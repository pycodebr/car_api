{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Car API - Documenta\u00e7\u00e3o","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o completa da Car API, uma API REST moderna para gerenciamento de carros e usu\u00e1rios, desenvolvida com FastAPI, SQLAlchemy e PostgreSQL/SQLite.</p>"},{"location":"#sobre-o-projeto","title":"\ud83d\ude97 Sobre o Projeto","text":"<p>A Car API \u00e9 um sistema completo que permite:</p> <ul> <li>Gest\u00e3o de Usu\u00e1rios: Registro, autentica\u00e7\u00e3o e gerenciamento de perfis</li> <li>Gest\u00e3o de Carros: CRUD completo com informa\u00e7\u00f5es detalhadas dos ve\u00edculos</li> <li>Gest\u00e3o de Marcas: Cadastro e manuten\u00e7\u00e3o de marcas de ve\u00edculos</li> <li>Autentica\u00e7\u00e3o JWT: Sistema seguro de autentica\u00e7\u00e3o baseado em tokens</li> <li>API RESTful: Endpoints bem estruturados seguindo padr\u00f5es REST</li> </ul>"},{"location":"#estrutura-da-documentacao","title":"\ud83d\udcda Estrutura da Documenta\u00e7\u00e3o","text":""},{"location":"#primeiros-passos","title":"\ud83c\udfaf Primeiros Passos","text":"<ul> <li>Vis\u00e3o Geral - Entenda o projeto e suas funcionalidades</li> <li>Pr\u00e9-requisitos - O que voc\u00ea precisa para come\u00e7ar</li> <li>Instala\u00e7\u00e3o - Como configurar o ambiente</li> <li>Configura\u00e7\u00e3o - Configura\u00e7\u00f5es do projeto</li> </ul>"},{"location":"#desenvolvimento","title":"\ud83c\udfd7\ufe0f Desenvolvimento","text":"<ul> <li>Guidelines e Padr\u00f5es - Padr\u00f5es de c\u00f3digo e desenvolvimento</li> <li>Estrutura do Projeto - Organiza\u00e7\u00e3o de arquivos e diret\u00f3rios</li> <li>API Endpoints - Documenta\u00e7\u00e3o completa da API</li> </ul>"},{"location":"#arquitetura","title":"\ud83c\udfdb\ufe0f Arquitetura","text":"<ul> <li>Modelagem do Sistema - Diagramas e modelos do sistema</li> <li>Autentica\u00e7\u00e3o e Seguran\u00e7a - Como funciona a seguran\u00e7a</li> </ul>"},{"location":"#operacoes","title":"\ud83d\udee0\ufe0f Opera\u00e7\u00f5es","text":"<ul> <li>Desenvolvimento - Fluxo de desenvolvimento</li> <li>Testes - Como executar e escrever testes</li> <li>Deploy - Como fazer deploy da aplica\u00e7\u00e3o</li> </ul>"},{"location":"#colaboracao","title":"\ud83d\udcdd Colabora\u00e7\u00e3o","text":"<ul> <li>Contribui\u00e7\u00e3o - Como contribuir com o projeto</li> <li>Release Notes - Hist\u00f3rico de vers\u00f5es</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Para come\u00e7ar rapidamente:</p> <pre><code># Clone o reposit\u00f3rio\ngit clone https://github.com/pycodebr/car_api.git\ncd car_api\n\n# Instale as depend\u00eancias\npoetry install\n\n# Configure o banco de dados\npoetry run alembic upgrade head\n\n# Execute a aplica\u00e7\u00e3o\npoetry run task run\n</code></pre> <p>A API estar\u00e1 dispon\u00edvel em <code>http://localhost:8000</code> e a documenta\u00e7\u00e3o interativa em <code>http://localhost:8000/docs</code>.</p>"},{"location":"#links-uteis","title":"\ud83d\udd17 Links \u00dateis","text":"<ul> <li>API Docs (Swagger): <code>http://localhost:8000/docs</code></li> <li>API Docs (ReDoc): <code>http://localhost:8000/redoc</code></li> <li>Health Check: <code>http://localhost:8000/health_check</code></li> </ul>"},{"location":"#versao","title":"\ud83c\udff7\ufe0f Vers\u00e3o","text":"<p>Vers\u00e3o atual: 0.1.0</p>"},{"location":"#suporte","title":"\ud83d\udcde Suporte","text":"<p>Para d\u00favidas, problemas ou sugest\u00f5es: - Email: pycodebr@gmail.com - GitHub Issues: Reportar problemas</p> <p>Documenta\u00e7\u00e3o gerada automaticamente para o projeto Car API</p>"},{"location":"api-endpoints/","title":"API Endpoints","text":""},{"location":"api-endpoints/#visao-geral-da-api","title":"\ud83c\udf10 Vis\u00e3o Geral da API","text":"<p>A Car API exp\u00f5e endpoints RESTful organizados por funcionalidade. Todos os endpoints seguem padr\u00f5es consistentes de nomenclatura, c\u00f3digos de status HTTP e estruturas de resposta.</p>"},{"location":"api-endpoints/#base-url","title":"\ud83d\udd17 Base URL","text":"<pre><code>http://localhost:8000/api/v1\n</code></pre>"},{"location":"api-endpoints/#documentacao-interativa","title":"\ud83d\udcda Documenta\u00e7\u00e3o Interativa","text":"<ul> <li>Swagger UI: <code>http://localhost:8000/docs</code></li> <li>ReDoc: <code>http://localhost:8000/redoc</code></li> <li>OpenAPI Schema: <code>http://localhost:8000/openapi.json</code></li> </ul>"},{"location":"api-endpoints/#autenticacao","title":"\ud83d\udd11 Autentica\u00e7\u00e3o","text":""},{"location":"api-endpoints/#gerar-token-de-acesso","title":"Gerar Token de Acesso","text":"<p>POST <code>/auth/token</code></p> <p>Autentica um usu\u00e1rio e retorna um token JWT.</p>"},{"location":"api-endpoints/#request-body","title":"Request Body","text":"<pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-200","title":"Response (200)","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-401","title":"Response (401)","text":"<pre><code>{\n  \"detail\": \"Incorrect email or password\"\n}\n</code></pre>"},{"location":"api-endpoints/#curl-example","title":"cURL Example","text":"<pre><code>curl -X POST \"http://localhost:8000/api/v1/auth/token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n  }'\n</code></pre>"},{"location":"api-endpoints/#renovar-token","title":"Renovar Token","text":"<p>POST <code>/auth/refresh_token</code></p> <p>Gera um novo token para o usu\u00e1rio autenticado.</p>"},{"location":"api-endpoints/#headers","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-200_1","title":"Response (200)","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"bearer\"\n}\n</code></pre>"},{"location":"api-endpoints/#usuarios","title":"\ud83d\udc64 Usu\u00e1rios","text":""},{"location":"api-endpoints/#criar-usuario","title":"Criar Usu\u00e1rio","text":"<p>POST <code>/users/</code></p> <p>Registra um novo usu\u00e1rio no sistema.</p>"},{"location":"api-endpoints/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"username\": \"joao_silva\",\n  \"email\": \"joao@example.com\",\n  \"password\": \"senha_segura123\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-201","title":"Response (201)","text":"<pre><code>{\n  \"id\": 1,\n  \"username\": \"joao_silva\",\n  \"email\": \"joao@example.com\",\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-400","title":"Response (400)","text":"<pre><code>{\n  \"detail\": \"Email j\u00e1 est\u00e1 em uso\"\n}\n</code></pre>"},{"location":"api-endpoints/#listar-usuarios","title":"Listar Usu\u00e1rios","text":"<p>GET <code>/users/</code></p> <p>Lista usu\u00e1rios com pagina\u00e7\u00e3o e busca.</p>"},{"location":"api-endpoints/#query-parameters","title":"Query Parameters","text":"Par\u00e2metro Tipo Obrigat\u00f3rio Padr\u00e3o Descri\u00e7\u00e3o <code>offset</code> int N\u00e3o 0 Registros para pular <code>limit</code> int N\u00e3o 100 Limite de registros (m\u00e1x: 100) <code>search</code> string N\u00e3o - Buscar por username ou email"},{"location":"api-endpoints/#response-200_2","title":"Response (200)","text":"<pre><code>{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"username\": \"joao_silva\",\n      \"email\": \"joao@example.com\",\n      \"created_at\": \"2023-12-01T10:00:00Z\",\n      \"updated_at\": \"2023-12-01T10:00:00Z\"\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 100\n}\n</code></pre>"},{"location":"api-endpoints/#curl-example_1","title":"cURL Example","text":"<pre><code>curl -X GET \"http://localhost:8000/api/v1/users/?search=joao&amp;limit=10\"\n</code></pre>"},{"location":"api-endpoints/#buscar-usuario-por-id","title":"Buscar Usu\u00e1rio por ID","text":"<p>GET <code>/users/{user_id}</code></p> <p>Retorna detalhes de um usu\u00e1rio espec\u00edfico.</p>"},{"location":"api-endpoints/#path-parameters","title":"Path Parameters","text":"<ul> <li><code>user_id</code> (int): ID do usu\u00e1rio</li> </ul>"},{"location":"api-endpoints/#response-200_3","title":"Response (200)","text":"<pre><code>{\n  \"id\": 1,\n  \"username\": \"joao_silva\",\n  \"email\": \"joao@example.com\",\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-404","title":"Response (404)","text":"<pre><code>{\n  \"detail\": \"Usu\u00e1rio n\u00e3o encontrado\"\n}\n</code></pre>"},{"location":"api-endpoints/#atualizar-usuario","title":"Atualizar Usu\u00e1rio","text":"<p>PUT <code>/users/{user_id}</code></p> <p>Atualiza dados de um usu\u00e1rio. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_1","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#request-body-todos-os-campos-sao-opcionais","title":"Request Body (Todos os campos s\u00e3o opcionais)","text":"<pre><code>{\n  \"username\": \"novo_username\",\n  \"email\": \"novo@example.com\",\n  \"password\": \"nova_senha123\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-200_4","title":"Response (200)","text":"<pre><code>{\n  \"id\": 1,\n  \"username\": \"novo_username\",\n  \"email\": \"novo@example.com\",\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T12:00:00Z\"\n}\n</code></pre>"},{"location":"api-endpoints/#deletar-usuario","title":"Deletar Usu\u00e1rio","text":"<p>DELETE <code>/users/{user_id}</code></p> <p>Remove um usu\u00e1rio do sistema. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_2","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-204","title":"Response (204)","text":"<pre><code>No Content\n</code></pre>"},{"location":"api-endpoints/#marcas","title":"\ud83c\udff7\ufe0f Marcas","text":""},{"location":"api-endpoints/#criar-marca","title":"Criar Marca","text":"<p>POST <code>/brands/</code></p> <p>Cria uma nova marca de ve\u00edculo. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_3","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#request-body_2","title":"Request Body","text":"<pre><code>{\n  \"name\": \"Toyota\",\n  \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n  \"is_active\": true\n}\n</code></pre>"},{"location":"api-endpoints/#response-201_1","title":"Response (201)","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Toyota\",\n  \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n  \"is_active\": true,\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\"\n}\n</code></pre>"},{"location":"api-endpoints/#response-400_1","title":"Response (400)","text":"<pre><code>{\n  \"detail\": \"Nome da marca j\u00e1 est\u00e1 em uso\"\n}\n</code></pre>"},{"location":"api-endpoints/#listar-marcas","title":"Listar Marcas","text":"<p>GET <code>/brands/</code></p> <p>Lista marcas com filtros. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_4","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#query-parameters_1","title":"Query Parameters","text":"Par\u00e2metro Tipo Obrigat\u00f3rio Padr\u00e3o Descri\u00e7\u00e3o <code>offset</code> int N\u00e3o 0 Registros para pular <code>limit</code> int N\u00e3o 100 Limite de registros <code>search</code> string N\u00e3o - Buscar por nome da marca <code>is_active</code> boolean N\u00e3o - Filtrar por marcas ativas"},{"location":"api-endpoints/#response-200_5","title":"Response (200)","text":"<pre><code>{\n  \"brands\": [\n    {\n      \"id\": 1,\n      \"name\": \"Toyota\",\n      \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n      \"is_active\": true,\n      \"created_at\": \"2023-12-01T10:00:00Z\",\n      \"updated_at\": \"2023-12-01T10:00:00Z\"\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 100\n}\n</code></pre>"},{"location":"api-endpoints/#buscar-marca-por-id","title":"Buscar Marca por ID","text":"<p>GET <code>/brands/{brand_id}</code></p> <p>Retorna detalhes de uma marca espec\u00edfica. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_5","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-200_6","title":"Response (200)","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Toyota\",\n  \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n  \"is_active\": true,\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\"\n}\n</code></pre>"},{"location":"api-endpoints/#atualizar-marca","title":"Atualizar Marca","text":"<p>PUT <code>/brands/{brand_id}</code></p> <p>Atualiza dados de uma marca. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_6","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#request-body-todos-os-campos-sao-opcionais_1","title":"Request Body (Todos os campos s\u00e3o opcionais)","text":"<pre><code>{\n  \"name\": \"Toyota Motors\",\n  \"description\": \"Marca japonesa l\u00edder mundial\",\n  \"is_active\": false\n}\n</code></pre>"},{"location":"api-endpoints/#deletar-marca","title":"Deletar Marca","text":"<p>DELETE <code>/brands/{brand_id}</code></p> <p>Remove uma marca do sistema. Requer autentica\u00e7\u00e3o. Nota: N\u00e3o \u00e9 poss\u00edvel deletar marcas que possuem carros associados.</p>"},{"location":"api-endpoints/#headers_7","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-204_1","title":"Response (204)","text":"<pre><code>No Content\n</code></pre>"},{"location":"api-endpoints/#response-400_2","title":"Response (400)","text":"<pre><code>{\n  \"detail\": \"N\u00e3o \u00e9 poss\u00edvel deletar marca que possui carros associados\"\n}\n</code></pre>"},{"location":"api-endpoints/#carros","title":"\ud83d\ude97 Carros","text":""},{"location":"api-endpoints/#criar-carro","title":"Criar Carro","text":"<p>POST <code>/cars/</code></p> <p>Registra um novo carro no sistema. Requer autentica\u00e7\u00e3o.</p>"},{"location":"api-endpoints/#headers_8","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#request-body_3","title":"Request Body","text":"<pre><code>{\n  \"model\": \"Corolla\",\n  \"factory_year\": 2022,\n  \"model_year\": 2023,\n  \"color\": \"Prata\",\n  \"plate\": \"ABC1234\",\n  \"fuel_type\": \"flex\",\n  \"transmission\": \"automatic\",\n  \"price\": \"85000.00\",\n  \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel\",\n  \"is_available\": true,\n  \"brand_id\": 1\n}\n</code></pre>"},{"location":"api-endpoints/#enums-validos","title":"Enums V\u00e1lidos","text":"<p>Fuel Type: - <code>gasoline</code> - Gasolina - <code>ethanol</code> - Etanol - <code>flex</code> - Flex - <code>diesel</code> - Diesel - <code>electric</code> - El\u00e9trico - <code>hybrid</code> - H\u00edbrido</p> <p>Transmission Type: - <code>manual</code> - Manual - <code>automatic</code> - Autom\u00e1tico - <code>semi_automatic</code> - Semi-autom\u00e1tico - <code>cvt</code> - CVT</p>"},{"location":"api-endpoints/#response-201_2","title":"Response (201)","text":"<pre><code>{\n  \"id\": 1,\n  \"model\": \"Corolla\",\n  \"factory_year\": 2022,\n  \"model_year\": 2023,\n  \"color\": \"Prata\",\n  \"plate\": \"ABC1234\",\n  \"fuel_type\": \"flex\",\n  \"transmission\": \"automatic\",\n  \"price\": \"85000.00\",\n  \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel\",\n  \"is_available\": true,\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\",\n  \"brand\": {\n    \"id\": 1,\n    \"name\": \"Toyota\",\n    \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n    \"is_active\": true\n  },\n  \"owner\": {\n    \"id\": 1,\n    \"username\": \"joao_silva\",\n    \"email\": \"joao@example.com\"\n  }\n}\n</code></pre>"},{"location":"api-endpoints/#response-400_3","title":"Response (400)","text":"<pre><code>{\n  \"detail\": \"Placa j\u00e1 est\u00e1 em uso\"\n}\n</code></pre>"},{"location":"api-endpoints/#listar-carros","title":"Listar Carros","text":"<p>GET <code>/cars/</code></p> <p>Lista carros do usu\u00e1rio autenticado com filtros avan\u00e7ados.</p>"},{"location":"api-endpoints/#headers_9","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#query-parameters_2","title":"Query Parameters","text":"Par\u00e2metro Tipo Obrigat\u00f3rio Padr\u00e3o Descri\u00e7\u00e3o <code>offset</code> int N\u00e3o 0 Registros para pular <code>limit</code> int N\u00e3o 100 Limite de registros <code>search</code> string N\u00e3o - Buscar por modelo ou placa <code>brand_id</code> int N\u00e3o - Filtrar por marca <code>fuel_type</code> string N\u00e3o - Filtrar por combust\u00edvel <code>transmission</code> string N\u00e3o - Filtrar por transmiss\u00e3o <code>is_available</code> boolean N\u00e3o - Filtrar por disponibilidade <code>min_price</code> float N\u00e3o - Pre\u00e7o m\u00ednimo <code>max_price</code> float N\u00e3o - Pre\u00e7o m\u00e1ximo"},{"location":"api-endpoints/#response-200_7","title":"Response (200)","text":"<pre><code>{\n  \"cars\": [\n    {\n      \"id\": 1,\n      \"model\": \"Corolla\",\n      \"factory_year\": 2022,\n      \"model_year\": 2023,\n      \"color\": \"Prata\",\n      \"plate\": \"ABC1234\",\n      \"fuel_type\": \"flex\",\n      \"transmission\": \"automatic\",\n      \"price\": \"85000.00\",\n      \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel\",\n      \"is_available\": true,\n      \"created_at\": \"2023-12-01T10:00:00Z\",\n      \"updated_at\": \"2023-12-01T10:00:00Z\",\n      \"brand\": {\n        \"id\": 1,\n        \"name\": \"Toyota\"\n      },\n      \"owner\": {\n        \"id\": 1,\n        \"username\": \"joao_silva\"\n      }\n    }\n  ],\n  \"offset\": 0,\n  \"limit\": 100\n}\n</code></pre>"},{"location":"api-endpoints/#curl-example_2","title":"cURL Example","text":"<pre><code>curl -X GET \"http://localhost:8000/api/v1/cars/?fuel_type=flex&amp;min_price=50000&amp;max_price=100000\" \\\n  -H \"Authorization: Bearer &lt;access_token&gt;\"\n</code></pre>"},{"location":"api-endpoints/#buscar-carro-por-id","title":"Buscar Carro por ID","text":"<p>GET <code>/cars/{car_id}</code></p> <p>Retorna detalhes de um carro espec\u00edfico. Requer autentica\u00e7\u00e3o e propriedade.</p>"},{"location":"api-endpoints/#headers_10","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-200_8","title":"Response (200)","text":"<pre><code>{\n  \"id\": 1,\n  \"model\": \"Corolla\",\n  \"factory_year\": 2022,\n  \"model_year\": 2023,\n  \"color\": \"Prata\",\n  \"plate\": \"ABC1234\",\n  \"fuel_type\": \"flex\",\n  \"transmission\": \"automatic\",\n  \"price\": \"85000.00\",\n  \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel\",\n  \"is_available\": true,\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T10:00:00Z\",\n  \"brand\": {\n    \"id\": 1,\n    \"name\": \"Toyota\",\n    \"description\": \"Marca japonesa conhecida pela confiabilidade\",\n    \"is_active\": true\n  },\n  \"owner\": {\n    \"id\": 1,\n    \"username\": \"joao_silva\",\n    \"email\": \"joao@example.com\"\n  }\n}\n</code></pre>"},{"location":"api-endpoints/#response-403","title":"Response (403)","text":"<pre><code>{\n  \"detail\": \"Acesso negado\"\n}\n</code></pre>"},{"location":"api-endpoints/#atualizar-carro","title":"Atualizar Carro","text":"<p>PUT <code>/cars/{car_id}</code></p> <p>Atualiza dados de um carro. Requer autentica\u00e7\u00e3o e propriedade.</p>"},{"location":"api-endpoints/#headers_11","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#request-body-todos-os-campos-sao-opcionais_2","title":"Request Body (Todos os campos s\u00e3o opcionais)","text":"<pre><code>{\n  \"model\": \"Corolla XEi\",\n  \"price\": \"88000.00\",\n  \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel - vers\u00e3o XEi\",\n  \"is_available\": false\n}\n</code></pre>"},{"location":"api-endpoints/#response-200_9","title":"Response (200)","text":"<pre><code>{\n  \"id\": 1,\n  \"model\": \"Corolla XEi\",\n  \"factory_year\": 2022,\n  \"model_year\": 2023,\n  \"color\": \"Prata\",\n  \"plate\": \"ABC1234\",\n  \"fuel_type\": \"flex\",\n  \"transmission\": \"automatic\",\n  \"price\": \"88000.00\",\n  \"description\": \"Sedan econ\u00f4mico e confi\u00e1vel - vers\u00e3o XEi\",\n  \"is_available\": false,\n  \"created_at\": \"2023-12-01T10:00:00Z\",\n  \"updated_at\": \"2023-12-01T12:00:00Z\",\n  \"brand\": {\n    \"id\": 1,\n    \"name\": \"Toyota\"\n  },\n  \"owner\": {\n    \"id\": 1,\n    \"username\": \"joao_silva\"\n  }\n}\n</code></pre>"},{"location":"api-endpoints/#deletar-carro","title":"Deletar Carro","text":"<p>DELETE <code>/cars/{car_id}</code></p> <p>Remove um carro do sistema. Requer autentica\u00e7\u00e3o e propriedade.</p>"},{"location":"api-endpoints/#headers_12","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#response-204_2","title":"Response (204)","text":"<pre><code>No Content\n</code></pre>"},{"location":"api-endpoints/#health-check","title":"\ud83c\udfe5 Health Check","text":""},{"location":"api-endpoints/#verificar-status-da-api","title":"Verificar Status da API","text":"<p>GET <code>/health_check</code></p> <p>Endpoint p\u00fablico para verificar se a API est\u00e1 funcionando.</p>"},{"location":"api-endpoints/#response-200_10","title":"Response (200)","text":"<pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre>"},{"location":"api-endpoints/#codigos-de-status-http","title":"\ud83d\udcca C\u00f3digos de Status HTTP","text":""},{"location":"api-endpoints/#codigos-de-sucesso","title":"C\u00f3digos de Sucesso","text":"<ul> <li>200 OK: Opera\u00e7\u00e3o bem-sucedida</li> <li>201 Created: Recurso criado com sucesso</li> <li>204 No Content: Recurso deletado com sucesso</li> </ul>"},{"location":"api-endpoints/#codigos-de-erro-do-cliente","title":"C\u00f3digos de Erro do Cliente","text":"<ul> <li>400 Bad Request: Dados inv\u00e1lidos ou regra de neg\u00f3cio violada</li> <li>401 Unauthorized: Token inv\u00e1lido ou ausente</li> <li>403 Forbidden: Acesso negado (sem permiss\u00e3o)</li> <li>404 Not Found: Recurso n\u00e3o encontrado</li> <li>422 Unprocessable Entity: Erro de valida\u00e7\u00e3o de dados</li> </ul>"},{"location":"api-endpoints/#codigos-de-erro-do-servidor","title":"C\u00f3digos de Erro do Servidor","text":"<ul> <li>500 Internal Server Error: Erro interno do servidor</li> </ul>"},{"location":"api-endpoints/#seguranca","title":"\ud83d\udd12 Seguran\u00e7a","text":""},{"location":"api-endpoints/#autenticacao-jwt","title":"Autentica\u00e7\u00e3o JWT","text":"<p>Todos os endpoints protegidos requerem um token JWT v\u00e1lido no header:</p> <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre>"},{"location":"api-endpoints/#validacao-de-propriedade","title":"Valida\u00e7\u00e3o de Propriedade","text":"<p>Usu\u00e1rios s\u00f3 podem acessar/modificar seus pr\u00f3prios carros:</p> <pre><code>def verify_car_ownership(current_user: User, car_owner_id: int):\n    if current_user.id != car_owner_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail='Acesso negado'\n        )\n</code></pre>"},{"location":"api-endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>\u26a0\ufe0f Planejado para implementa\u00e7\u00e3o futura: - Limite de 100 requests por minuto por usu\u00e1rio - Limite de 1000 requests por hora por IP</p>"},{"location":"api-endpoints/#exemplos-de-uso","title":"\ud83d\udcdd Exemplos de Uso","text":""},{"location":"api-endpoints/#fluxo-completo-registrar-usuario-e-criar-carro","title":"Fluxo Completo: Registrar Usu\u00e1rio e Criar Carro","text":"<pre><code># 1. Registrar usu\u00e1rio\ncurl -X POST \"http://localhost:8000/api/v1/users/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"maria_silva\",\n    \"email\": \"maria@example.com\",\n    \"password\": \"senha123\"\n  }'\n\n# 2. Fazer login\nTOKEN=$(curl -X POST \"http://localhost:8000/api/v1/auth/token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"maria@example.com\",\n    \"password\": \"senha123\"\n  }' | jq -r '.access_token')\n\n# 3. Criar marca\ncurl -X POST \"http://localhost:8000/api/v1/brands/\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Honda\",\n    \"description\": \"Marca japonesa inovadora\",\n    \"is_active\": true\n  }'\n\n# 4. Criar carro\ncurl -X POST \"http://localhost:8000/api/v1/cars/\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"Civic\",\n    \"factory_year\": 2023,\n    \"model_year\": 2023,\n    \"color\": \"Branco\",\n    \"plate\": \"XYZ9876\",\n    \"fuel_type\": \"flex\",\n    \"transmission\": \"manual\",\n    \"price\": \"95000.00\",\n    \"description\": \"Sedan esportivo\",\n    \"is_available\": true,\n    \"brand_id\": 2\n  }'\n\n# 5. Listar carros\ncurl -X GET \"http://localhost:8000/api/v1/cars/\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"api-endpoints/#busca-avancada-de-carros","title":"Busca Avan\u00e7ada de Carros","text":"<pre><code># Buscar carros Honda autom\u00e1ticos entre R$ 80.000 e R$ 120.000\ncurl -X GET \"http://localhost:8000/api/v1/cars/?brand_id=2&amp;transmission=automatic&amp;min_price=80000&amp;max_price=120000\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Buscar carros por modelo\ncurl -X GET \"http://localhost:8000/api/v1/cars/?search=civic\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n\n# Buscar carros el\u00e9tricos dispon\u00edveis\ncurl -X GET \"http://localhost:8000/api/v1/cars/?fuel_type=electric&amp;is_available=true\" \\\n  -H \"Authorization: Bearer $TOKEN\"\n</code></pre>"},{"location":"api-endpoints/#testes-da-api","title":"\ud83e\uddea Testes da API","text":""},{"location":"api-endpoints/#executar-testes","title":"Executar Testes","text":"<pre><code># Todos os testes\npoetry run task test\n\n# Testes espec\u00edficos\npoetry run pytest tests/test_cars.py -v\npoetry run pytest tests/test_auth.py::test_login_success -v\n</code></pre>"},{"location":"api-endpoints/#testar-com-httpie","title":"Testar com HTTPie","text":"<pre><code># Instalar HTTPie\npip install httpie\n\n# Registrar usu\u00e1rio\nhttp POST localhost:8000/api/v1/users/ \\\n  username=test_user \\\n  email=test@example.com \\\n  password=test123\n\n# Fazer login\nhttp POST localhost:8000/api/v1/auth/token \\\n  email=test@example.com \\\n  password=test123\n</code></pre>"},{"location":"api-endpoints/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Para explorar mais:</p> <ol> <li>\ud83c\udfd7\ufe0f Entenda a Modelagem do Sistema</li> <li>\ud83d\udd10 Saiba mais sobre Autentica\u00e7\u00e3o e Seguran\u00e7a</li> <li>\ud83e\uddea Aprenda sobre Testes</li> <li>\ud83d\udcbb Comece o Desenvolvimento</li> </ol>"},{"location":"authentication/","title":"Autentica\u00e7\u00e3o e Seguran\u00e7a","text":""},{"location":"authentication/#visao-geral-da-seguranca","title":"\ud83d\udd10 Vis\u00e3o Geral da Seguran\u00e7a","text":"<p>A Car API implementa um sistema de seguran\u00e7a robusto baseado em JWT (JSON Web Tokens) com hash de senhas usando Argon2. O sistema garante autentica\u00e7\u00e3o segura, autoriza\u00e7\u00e3o granular e prote\u00e7\u00e3o contra as principais vulnerabilidades web.</p>"},{"location":"authentication/#autenticacao-jwt","title":"\ud83d\udd11 Autentica\u00e7\u00e3o JWT","text":""},{"location":"authentication/#como-funciona","title":"Como Funciona","text":"<ol> <li>Login: Cliente envia email/senha</li> <li>Valida\u00e7\u00e3o: Servidor verifica credenciais</li> <li>Token: Servidor gera JWT assinado</li> <li>Uso: Cliente inclui token nas requisi\u00e7\u00f5es</li> <li>Valida\u00e7\u00e3o: Servidor valida token a cada request</li> </ol>"},{"location":"authentication/#estrutura-do-token-jwt","title":"Estrutura do Token JWT","text":"<pre><code>{\n  \"header\": {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n  },\n  \"payload\": {\n    \"sub\": \"1\",\n    \"exp\": 1640995200,\n    \"iat\": 1640908800\n  },\n  \"signature\": \"HMACSHA256(base64UrlEncode(header) + '.' + base64UrlEncode(payload), secret)\"\n}\n</code></pre>"},{"location":"authentication/#configuracao-jwt","title":"Configura\u00e7\u00e3o JWT","text":"<pre><code># car_api/core/settings.py\nclass Settings(BaseSettings):\n    jwt_secret_key: str  # Chave secreta (m\u00edn. 64 caracteres)\n    jwt_algorithm: str = 'HS256'  # Algoritmo de assinatura\n    jwt_expiration_minutes: int = 30  # Tempo de expira\u00e7\u00e3o\n</code></pre>"},{"location":"authentication/#implementacao-da-autenticacao","title":"Implementa\u00e7\u00e3o da Autentica\u00e7\u00e3o","text":""},{"location":"authentication/#1-geracao-de-token","title":"1. Gera\u00e7\u00e3o de Token","text":"<pre><code># car_api/core/security.py\nfrom datetime import datetime, timedelta\nimport jwt\nfrom car_api.core.settings import Settings\n\nsettings = Settings()\n\ndef create_access_token(data: dict) -&gt; str:\n    \"\"\"\n    Criar token JWT com dados do usu\u00e1rio.\n\n    Args:\n        data: Dados para incluir no token (geralmente {'sub': user_id})\n\n    Returns:\n        str: Token JWT assinado\n    \"\"\"\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=settings.jwt_expiration_minutes)\n    to_encode.update({\"exp\": expire})\n\n    return jwt.encode(\n        to_encode,\n        settings.jwt_secret_key,\n        algorithm=settings.jwt_algorithm\n    )\n</code></pre>"},{"location":"authentication/#2-validacao-de-token","title":"2. Valida\u00e7\u00e3o de Token","text":"<pre><code>from fastapi import HTTPException, status, Depends\nfrom fastapi.security import HTTPBearer\nimport jwt\n\noauth2_scheme = HTTPBearer()\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)) -&gt; User:\n    \"\"\"\n    Extrair e validar usu\u00e1rio atual do token JWT.\n\n    Args:\n        token: Token JWT do header Authorization\n\n    Returns:\n        User: Usu\u00e1rio autenticado\n\n    Raises:\n        HTTPException: Se token inv\u00e1lido ou usu\u00e1rio n\u00e3o encontrado\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n\n    try:\n        # Decodificar token\n        payload = jwt.decode(\n            token.credentials,\n            settings.jwt_secret_key,\n            algorithms=[settings.jwt_algorithm]\n        )\n\n        # Extrair user ID\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Token has expired\"\n        )\n    except jwt.JWTError:\n        raise credentials_exception\n\n    # Buscar usu\u00e1rio no banco\n    async with get_session() as db:\n        user = await db.get(User, int(user_id))\n        if user is None:\n            raise credentials_exception\n\n    return user\n</code></pre>"},{"location":"authentication/#endpoint-de-login","title":"Endpoint de Login","text":"<pre><code># car_api/routers/auth.py\n@router.post('/token', response_model=Token)\nasync def login(\n    login_data: LoginRequest,\n    db: AsyncSession = Depends(get_session)\n):\n    \"\"\"\n    Endpoint de autentica\u00e7\u00e3o - gerar token JWT.\n\n    Args:\n        login_data: Email e senha do usu\u00e1rio\n        db: Sess\u00e3o do banco de dados\n\n    Returns:\n        Token: Access token e tipo\n    \"\"\"\n    # Autenticar usu\u00e1rio\n    user = await authenticate_user(login_data.email, login_data.password, db)\n\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail='Incorrect email or password',\n            headers={'WWW-Authenticate': 'Bearer'},\n        )\n\n    # Gerar token\n    access_token = create_access_token(data={'sub': str(user.id)})\n\n    return {\n        'access_token': access_token,\n        'token_type': 'bearer'\n    }\n</code></pre>"},{"location":"authentication/#hash-de-senhas","title":"\ud83d\udd12 Hash de Senhas","text":""},{"location":"authentication/#pwdlib-com-argon2","title":"PWDLib com Argon2","text":"<p>A API usa PWDLib com Argon2 para hash seguro de senhas:</p> <pre><code># car_api/core/security.py\nfrom pwdlib import PasswordHash\n\n# Configura\u00e7\u00e3o recomendada para Argon2\npwd_context = PasswordHash.recommended()\n\ndef get_password_hash(password: str) -&gt; str:\n    \"\"\"\n    Gerar hash seguro da senha usando Argon2.\n\n    Args:\n        password: Senha em texto plano\n\n    Returns:\n        str: Hash da senha\n    \"\"\"\n    return pwd_context.hash(password)\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    \"\"\"\n    Verificar se senha corresponde ao hash.\n\n    Args:\n        plain_password: Senha em texto plano\n        hashed_password: Hash armazenado\n\n    Returns:\n        bool: True se senha correta\n    \"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n</code></pre>"},{"location":"authentication/#por-que-argon2","title":"Por que Argon2?","text":"<ul> <li>Resistente a ataques de for\u00e7a bruta</li> <li>Memory-hard: Requer muita mem\u00f3ria para calcular</li> <li>Padr\u00e3o recomendado pela OWASP</li> <li>Configura\u00e7\u00e3o adapt\u00e1vel de custo computacional</li> </ul>"},{"location":"authentication/#autorizacao","title":"\ud83d\udee1\ufe0f Autoriza\u00e7\u00e3o","text":""},{"location":"authentication/#verificacao-de-propriedade","title":"Verifica\u00e7\u00e3o de Propriedade","text":"<pre><code>def verify_car_ownership(current_user: User, car_owner_id: int):\n    \"\"\"\n    Verificar se usu\u00e1rio \u00e9 propriet\u00e1rio do carro.\n\n    Args:\n        current_user: Usu\u00e1rio autenticado\n        car_owner_id: ID do propriet\u00e1rio do carro\n\n    Raises:\n        HTTPException: Se usu\u00e1rio n\u00e3o \u00e9 propriet\u00e1rio\n    \"\"\"\n    if current_user.id != car_owner_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail='Acesso negado - voc\u00ea n\u00e3o \u00e9 propriet\u00e1rio deste carro'\n        )\n</code></pre>"},{"location":"authentication/#decorador-de-autorizacao","title":"Decorador de Autoriza\u00e7\u00e3o","text":"<pre><code>from functools import wraps\nfrom fastapi import HTTPException, status\n\ndef require_ownership(resource_field: str = 'owner_id'):\n    \"\"\"\n    Decorador para verificar propriedade de recurso.\n\n    Args:\n        resource_field: Campo que cont\u00e9m o ID do propriet\u00e1rio\n    \"\"\"\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            current_user = kwargs.get('current_user')\n            resource = kwargs.get('resource')\n\n            if not current_user or not resource:\n                raise HTTPException(\n                    status_code=status.HTTP_401_UNAUTHORIZED,\n                    detail='Authentication required'\n                )\n\n            owner_id = getattr(resource, resource_field)\n            if current_user.id != owner_id:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail='Access denied'\n                )\n\n            return await func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n# Uso do decorador\n@require_ownership('owner_id')\nasync def update_car(car: Car, current_user: User):\n    # L\u00f3gica de atualiza\u00e7\u00e3o\n    pass\n</code></pre>"},{"location":"authentication/#seguranca-de-endpoints","title":"\ud83d\udd10 Seguran\u00e7a de Endpoints","text":""},{"location":"authentication/#protecao-de-rotas","title":"Prote\u00e7\u00e3o de Rotas","text":"<pre><code># Rota p\u00fablica (sem autentica\u00e7\u00e3o)\n@router.post('/users/', response_model=UserPublicSchema)\nasync def register_user(user: UserSchema, db: AsyncSession = Depends(get_session)):\n    # Qualquer um pode registrar\n\n# Rota protegida (requer autentica\u00e7\u00e3o)\n@router.get('/cars/', response_model=CarListPublicSchema)\nasync def list_cars(\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session)\n):\n    # Apenas usu\u00e1rios autenticados\n\n# Rota com autoriza\u00e7\u00e3o (requer ser propriet\u00e1rio)\n@router.get('/cars/{car_id}', response_model=CarPublicSchema)\nasync def get_car(\n    car_id: int,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session)\n):\n    car = await db.get(Car, car_id)\n    if not car:\n        raise HTTPException(404, \"Carro n\u00e3o encontrado\")\n\n    verify_car_ownership(current_user, car.owner_id)\n    return car\n</code></pre>"},{"location":"authentication/#middleware-de-seguranca","title":"Middleware de Seguran\u00e7a","text":"<pre><code># car_api/app.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp = FastAPI()\n\n# CORS - Controlar origens permitidas\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\n        \"https://yourdomain.com\",\n        \"https://app.yourdomain.com\"\n    ],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Trusted Host - Prevenir ataques Host Header\napp.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=[\"yourdomain.com\", \"*.yourdomain.com\"]\n)\n</code></pre>"},{"location":"authentication/#tratamento-de-erros-de-seguranca","title":"\ud83d\udea8 Tratamento de Erros de Seguran\u00e7a","text":""},{"location":"authentication/#respostas-padronizadas","title":"Respostas Padronizadas","text":"<pre><code># Erro 401 - N\u00e3o autenticado\n{\n    \"detail\": \"Could not validate credentials\"\n}\n\n# Erro 403 - Sem permiss\u00e3o\n{\n    \"detail\": \"Acesso negado\"\n}\n\n# Erro 422 - Dados inv\u00e1lidos\n{\n    \"detail\": [\n        {\n            \"loc\": [\"body\", \"password\"],\n            \"msg\": \"ensure this value has at least 8 characters\",\n            \"type\": \"value_error.any_str.min_length\"\n        }\n    ]\n}\n</code></pre>"},{"location":"authentication/#exception-handlers-customizados","title":"Exception Handlers Customizados","text":"<pre><code>from fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import JSONResponse\nimport jwt\n\napp = FastAPI()\n\n@app.exception_handler(jwt.ExpiredSignatureError)\nasync def expired_token_handler(request: Request, exc: jwt.ExpiredSignatureError):\n    return JSONResponse(\n        status_code=401,\n        content={\n            \"detail\": \"Token has expired\",\n            \"error_code\": \"TOKEN_EXPIRED\"\n        }\n    )\n\n@app.exception_handler(jwt.JWTError)\nasync def jwt_error_handler(request: Request, exc: jwt.JWTError):\n    return JSONResponse(\n        status_code=401,\n        content={\n            \"detail\": \"Invalid token\",\n            \"error_code\": \"INVALID_TOKEN\"\n        }\n    )\n</code></pre>"},{"location":"authentication/#validacao-de-entrada","title":"\ud83d\udd0d Valida\u00e7\u00e3o de Entrada","text":""},{"location":"authentication/#schemas-pydantic","title":"Schemas Pydantic","text":"<pre><code>from pydantic import BaseModel, Field, validator\nfrom typing import Optional\nimport re\n\nclass UserSchema(BaseModel):\n    username: str = Field(\n        ...,\n        min_length=3,\n        max_length=50,\n        regex=r'^[a-zA-Z0-9_]+$'\n    )\n    email: str = Field(..., regex=r'^[^@]+@[^@]+\\.[^@]+$')\n    password: str = Field(..., min_length=8)\n\n    @validator('password')\n    def password_strength(cls, v):\n        \"\"\"Validar for\u00e7a da senha.\"\"\"\n        if not re.search(r'[A-Z]', v):\n            raise ValueError('Password must contain uppercase letter')\n        if not re.search(r'[a-z]', v):\n            raise ValueError('Password must contain lowercase letter')\n        if not re.search(r'[0-9]', v):\n            raise ValueError('Password must contain digit')\n        return v\n\nclass CarSchema(BaseModel):\n    model: str = Field(..., min_length=1, max_length=100)\n    factory_year: int = Field(..., ge=1900, le=2030)\n    price: Decimal = Field(..., gt=0)\n    plate: str = Field(\n        ...,\n        regex=r'^[A-Z]{3}[0-9]{4}$|^[A-Z]{3}[0-9][A-Z][0-9]{2}$'\n    )\n\n    @validator('plate')\n    def validate_plate(cls, v):\n        \"\"\"Validar formato da placa brasileira.\"\"\"\n        v = v.upper().replace('-', '').replace(' ', '')\n\n        # Formato antigo: ABC1234\n        # Formato Mercosul: ABC1A23\n        if not re.match(r'^[A-Z]{3}[0-9]{4}$|^[A-Z]{3}[0-9][A-Z][0-9]{2}$', v):\n            raise ValueError('Invalid plate format')\n\n        return v\n</code></pre>"},{"location":"authentication/#sanitizacao-de-dados","title":"Sanitiza\u00e7\u00e3o de Dados","text":"<pre><code>import html\nimport bleach\n\ndef sanitize_input(text: str) -&gt; str:\n    \"\"\"\n    Sanitizar entrada de texto contra XSS.\n\n    Args:\n        text: Texto de entrada\n\n    Returns:\n        str: Texto sanitizado\n    \"\"\"\n    # Escapar HTML\n    text = html.escape(text)\n\n    # Remover tags HTML perigosas\n    allowed_tags = ['p', 'br', 'strong', 'em']\n    text = bleach.clean(text, tags=allowed_tags, strip=True)\n\n    return text\n\n# Uso em schemas\nclass CarUpdateSchema(BaseModel):\n    description: Optional[str] = None\n\n    @validator('description', pre=True)\n    def sanitize_description(cls, v):\n        if v:\n            return sanitize_input(v)\n        return v\n</code></pre>"},{"location":"authentication/#prevencao-de-vulnerabilidades","title":"\ud83d\udd12 Preven\u00e7\u00e3o de Vulnerabilidades","text":""},{"location":"authentication/#sql-injection","title":"SQL Injection","text":"<pre><code># \u2705 Correto - SQLAlchemy ORM com par\u00e2metros\nquery = select(Car).where(Car.plate == plate_value)\n\n# \u2705 Correto - Query parametrizada\nquery = text(\"SELECT * FROM cars WHERE plate = :plate\")\nresult = await db.execute(query, {\"plate\": plate_value})\n\n# \u274c Incorreto - String concatenation (vulner\u00e1vel)\nquery = f\"SELECT * FROM cars WHERE plate = '{plate_value}'\"\n</code></pre>"},{"location":"authentication/#nosql-injection","title":"NoSQL Injection","text":"<pre><code># \u2705 Correto - Valida\u00e7\u00e3o de tipos\ndef get_car_by_id(car_id: int):  # Type hint garante int\n    return db.get(Car, car_id)\n\n# \u274c Incorreto - Aceitar qualquer tipo\ndef get_car_by_id(car_id):  # Poderia receber dict malicioso\n    return db.get(Car, car_id)\n</code></pre>"},{"location":"authentication/#csrf-protection","title":"CSRF Protection","text":"<pre><code>from fastapi_csrf_protect import CsrfProtect\n\n@CsrfProtect.validate_csrf\n@router.post('/cars/')\nasync def create_car(car: CarSchema, csrf_protect: CsrfProtect = Depends()):\n    # Endpoint protegido contra CSRF\n    pass\n</code></pre>"},{"location":"authentication/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from slowapi import Limiter, _rate_limit_exceeded_handler\nfrom slowapi.util import get_remote_address\nfrom slowapi.errors import RateLimitExceeded\n\nlimiter = Limiter(key_func=get_remote_address)\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n\n@router.post('/auth/token')\n@limiter.limit(\"5/minute\")  # M\u00e1ximo 5 tentativas de login por minuto\nasync def login(request: Request, login_data: LoginRequest):\n    # L\u00f3gica de login\n    pass\n</code></pre>"},{"location":"authentication/#configuracao-de-producao","title":"\ud83d\udd10 Configura\u00e7\u00e3o de Produ\u00e7\u00e3o","text":""},{"location":"authentication/#variaveis-de-ambiente-seguras","title":"Vari\u00e1veis de Ambiente Seguras","text":"<pre><code># .env.production\nJWT_SECRET_KEY='sua-chave-super-secreta-de-pelo-menos-64-caracteres-aqui'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\n\n# Database\nDATABASE_URL='postgresql+psycopg://user:password@host:5432/db'\n\n# HTTPS obrigat\u00f3rio\nFORCE_HTTPS=true\n\n# Logging\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"authentication/#checklist-de-seguranca","title":"Checklist de Seguran\u00e7a","text":""},{"location":"authentication/#autenticacao","title":"\u2705 Autentica\u00e7\u00e3o","text":"<ul> <li>[ ] JWT com chave secreta forte (64+ caracteres)</li> <li>[ ] Tempo de expira\u00e7\u00e3o adequado (15-30 minutos)</li> <li>[ ] Hash de senhas com Argon2</li> <li>[ ] Valida\u00e7\u00e3o de for\u00e7a de senha</li> </ul>"},{"location":"authentication/#autorizacao_1","title":"\u2705 Autoriza\u00e7\u00e3o","text":"<ul> <li>[ ] Verifica\u00e7\u00e3o de propriedade de recursos</li> <li>[ ] Princ\u00edpio de menor privil\u00e9gio</li> <li>[ ] Valida\u00e7\u00e3o de permiss\u00f5es por endpoint</li> </ul>"},{"location":"authentication/#entradasaida","title":"\u2705 Entrada/Sa\u00edda","text":"<ul> <li>[ ] Valida\u00e7\u00e3o rigorosa com Pydantic</li> <li>[ ] Sanitiza\u00e7\u00e3o de dados de entrada</li> <li>[ ] Escape de dados de sa\u00edda</li> <li>[ ] Limite de tamanho de payload</li> </ul>"},{"location":"authentication/#comunicacao","title":"\u2705 Comunica\u00e7\u00e3o","text":"<ul> <li>[ ] HTTPS obrigat\u00f3rio em produ\u00e7\u00e3o</li> <li>[ ] CORS configurado corretamente</li> <li>[ ] Headers de seguran\u00e7a adequados</li> </ul>"},{"location":"authentication/#infraestrutura","title":"\u2705 Infraestrutura","text":"<ul> <li>[ ] Rate limiting implementado</li> <li>[ ] Logs de seguran\u00e7a habilitados</li> <li>[ ] Monitoramento de anomalias</li> <li>[ ] Backup seguro de dados</li> </ul>"},{"location":"authentication/#headers-de-seguranca","title":"Headers de Seguran\u00e7a","text":"<pre><code>from fastapi.middleware.secure_headers import SecureHeadersMiddleware\n\napp.add_middleware(\n    SecureHeadersMiddleware,\n    server=\"FastAPI\",  # Ocultar vers\u00e3o\n    x_frame_options=\"DENY\",  # Prevenir clickjacking\n    content_type_options=\"nosniff\",  # Prevenir MIME sniffing\n    x_xss_protection=\"1; mode=block\",  # XSS protection\n    strict_transport_security=\"max-age=31536000; includeSubDomains\",  # HSTS\n    content_security_policy=\"default-src 'self'\",  # CSP\n)\n</code></pre>"},{"location":"authentication/#auditoria-e-monitoramento","title":"\ud83d\udcca Auditoria e Monitoramento","text":""},{"location":"authentication/#logs-de-seguranca","title":"Logs de Seguran\u00e7a","text":"<pre><code>import logging\nfrom datetime import datetime\n\nsecurity_logger = logging.getLogger(\"security\")\n\nasync def log_authentication_attempt(email: str, success: bool, ip: str):\n    \"\"\"Registrar tentativa de login.\"\"\"\n    security_logger.info(\n        f\"Authentication attempt - \"\n        f\"Email: {email}, \"\n        f\"Success: {success}, \"\n        f\"IP: {ip}, \"\n        f\"Timestamp: {datetime.utcnow()}\"\n    )\n\nasync def log_authorization_failure(user_id: int, resource: str, action: str):\n    \"\"\"Registrar falha de autoriza\u00e7\u00e3o.\"\"\"\n    security_logger.warning(\n        f\"Authorization failure - \"\n        f\"User: {user_id}, \"\n        f\"Resource: {resource}, \"\n        f\"Action: {action}, \"\n        f\"Timestamp: {datetime.utcnow()}\"\n    )\n</code></pre>"},{"location":"authentication/#metricas-de-seguranca","title":"M\u00e9tricas de Seguran\u00e7a","text":"<pre><code>from prometheus_client import Counter, Histogram\n\n# Contadores de seguran\u00e7a\nauth_attempts = Counter('auth_attempts_total', 'Total authentication attempts', ['status'])\nauth_failures = Counter('auth_failures_total', 'Failed authentication attempts')\nforbidden_access = Counter('forbidden_access_total', 'Forbidden access attempts')\n\n# Histograma de tempo de autentica\u00e7\u00e3o\nauth_duration = Histogram('auth_duration_seconds', 'Authentication duration')\n\n# Uso nos endpoints\n@auth_duration.time()\nasync def authenticate_user(email: str, password: str):\n    try:\n        # L\u00f3gica de autentica\u00e7\u00e3o\n        auth_attempts.labels(status='success').inc()\n        return user\n    except AuthenticationError:\n        auth_attempts.labels(status='failure').inc()\n        auth_failures.inc()\n        raise\n</code></pre>"},{"location":"authentication/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<p>Para implementar melhorias de seguran\u00e7a:</p> <ol> <li>\ud83d\udcbb Desenvolvimento - Fluxo seguro de desenvolvimento</li> <li>\ud83e\uddea Testes - Testes de seguran\u00e7a</li> <li>\ud83d\ude80 Deploy - Deploy seguro</li> <li>\ud83d\udcca Implementar Rate Limiting com Redis</li> <li>\ud83d\udd0d Adicionar detec\u00e7\u00e3o de anomalias</li> <li>\ud83d\udcf1 Implementar 2FA (Two-Factor Authentication)</li> </ol>"},{"location":"configuration/","title":"Configura\u00e7\u00e3o do Projeto","text":""},{"location":"configuration/#configuracoes-gerais","title":"\ud83d\udd27 Configura\u00e7\u00f5es Gerais","text":""},{"location":"configuration/#arquivo-de-configuracao-principal","title":"Arquivo de Configura\u00e7\u00e3o Principal","text":"<p>O projeto utiliza o arquivo <code>car_api/core/settings.py</code> para gerenciar todas as configura\u00e7\u00f5es:</p> <pre><code># car_api/core/settings.py\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    database_url: str = 'sqlite+aiosqlite:///./car.db'\n    jwt_secret_key: str\n    jwt_algorithm: str = 'HS256'\n    jwt_expiration_minutes: int = 30\n\n    class Config:\n        env_file = '.env'\n</code></pre>"},{"location":"configuration/#variaveis-de-ambiente","title":"\ud83c\udf0d Vari\u00e1veis de Ambiente","text":""},{"location":"configuration/#arquivo-env","title":"Arquivo .env","text":"<p>Crie um arquivo <code>.env</code> na raiz do projeto com as seguintes configura\u00e7\u00f5es:</p> <pre><code># Banco de Dados\nDATABASE_URL='sqlite+aiosqlite:///./car.db'\n\n# JWT Authentication\nJWT_SECRET_KEY='your-super-secret-jwt-key-here-change-this-in-production'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\n</code></pre>"},{"location":"configuration/#configuracoes-por-ambiente","title":"Configura\u00e7\u00f5es por Ambiente","text":""},{"location":"configuration/#desenvolvimento-sqlite","title":"\ud83d\udd2c Desenvolvimento (SQLite)","text":"<pre><code># .env.development\nDATABASE_URL='sqlite+aiosqlite:///./car.db'\nJWT_SECRET_KEY='dev-secret-key-not-for-production'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=60\nDEBUG=true\n</code></pre>"},{"location":"configuration/#testes-sqlite-in-memory","title":"\ud83e\uddea Testes (SQLite in-memory)","text":"<pre><code># .env.test\nDATABASE_URL='sqlite+aiosqlite:///:memory:'\nJWT_SECRET_KEY='test-secret-key'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=5\nDEBUG=true\n</code></pre>"},{"location":"configuration/#producao-postgresql","title":"\ud83d\ude80 Produ\u00e7\u00e3o (PostgreSQL)","text":"<pre><code># .env.production\nDATABASE_URL='postgresql+psycopg://username:password@localhost:5432/car_api'\nJWT_SECRET_KEY='super-secure-production-key-64-chars-minimum'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\nDEBUG=false\n</code></pre>"},{"location":"configuration/#configuracao-de-banco-de-dados","title":"\ud83d\uddc3\ufe0f Configura\u00e7\u00e3o de Banco de Dados","text":""},{"location":"configuration/#sqlite-desenvolvimento","title":"SQLite (Desenvolvimento)","text":"<pre><code># Configura\u00e7\u00e3o autom\u00e1tica\nDATABASE_URL='sqlite+aiosqlite:///./car.db'\n</code></pre> <p>Caracter\u00edsticas: - \u2705 N\u00e3o requer instala\u00e7\u00e3o adicional - \u2705 Arquivo local (<code>car.db</code>) - \u2705 Ideal para desenvolvimento - \u274c N\u00e3o suporta m\u00faltiplas conex\u00f5es simult\u00e2neas</p>"},{"location":"configuration/#postgresql-producao","title":"PostgreSQL (Produ\u00e7\u00e3o)","text":""},{"location":"configuration/#configuracao-local","title":"Configura\u00e7\u00e3o Local","text":"<pre><code># 1. Instalar PostgreSQL\nsudo apt install postgresql postgresql-contrib\n\n# 2. Criar banco e usu\u00e1rio\nsudo -u postgres psql\nCREATE DATABASE car_api;\nCREATE USER car_api_user WITH PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE car_api TO car_api_user;\n\\q\n\n# 3. Configurar .env\nDATABASE_URL='postgresql+psycopg://car_api_user:secure_password@localhost:5432/car_api'\n</code></pre>"},{"location":"configuration/#configuracao-com-docker","title":"Configura\u00e7\u00e3o com Docker","text":"<pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: car_api\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre> <pre><code># .env para Docker\nDATABASE_URL='postgresql+psycopg://postgres:postgres@localhost:5432/car_api'\n</code></pre>"},{"location":"configuration/#configuracao-de-seguranca-jwt","title":"\ud83d\udd10 Configura\u00e7\u00e3o de Seguran\u00e7a JWT","text":""},{"location":"configuration/#gerar-chave-secreta-segura","title":"Gerar Chave Secreta Segura","text":"<pre><code># M\u00e9todo 1: Python\npython -c \"import secrets; print(secrets.token_urlsafe(64))\"\n\n# M\u00e9todo 2: OpenSSL\nopenssl rand -base64 64\n\n# M\u00e9todo 3: Online (cuidado com seguran\u00e7a)\n# https://generate-secret.vercel.app/64\n</code></pre>"},{"location":"configuration/#configuracoes-de-jwt","title":"Configura\u00e7\u00f5es de JWT","text":"<pre><code># Chave secreta (m\u00ednimo 64 caracteres)\nJWT_SECRET_KEY='sua-chave-super-secreta-de-pelo-menos-64-caracteres-aqui'\n\n# Algoritmo de criptografia\nJWT_ALGORITHM='HS256'  # HS256, HS384, HS512, RS256, etc.\n\n# Tempo de expira\u00e7\u00e3o em minutos\nJWT_EXPIRATION_MINUTES=30  # 30 minutos (recomendado para produ\u00e7\u00e3o)\n</code></pre>"},{"location":"configuration/#configuracoes-avancadas-de-jwt","title":"Configura\u00e7\u00f5es Avan\u00e7adas de JWT","text":"<pre><code># car_api/core/settings.py (vers\u00e3o expandida)\nclass Settings(BaseSettings):\n    # ... outras configura\u00e7\u00f5es\n\n    # JWT\n    jwt_secret_key: str\n    jwt_algorithm: str = 'HS256'\n    jwt_expiration_minutes: int = 30\n    jwt_refresh_expiration_days: int = 7  # Para refresh tokens\n\n    # Seguran\u00e7a\n    cors_origins: list[str] = ['http://localhost:3000', 'http://localhost:8080']\n    allowed_hosts: list[str] = ['localhost', '127.0.0.1']\n\n    # Rate Limiting\n    rate_limit_requests: int = 100\n    rate_limit_window: int = 60  # segundos\n</code></pre>"},{"location":"configuration/#configuracao-do-alembic","title":"\u2699\ufe0f Configura\u00e7\u00e3o do Alembic","text":""},{"location":"configuration/#alembicini","title":"alembic.ini","text":"<pre><code># alembic.ini\n[alembic]\nscript_location = migrations\nfile_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s\ntruncate_slug_length = 40\n\n# Formato de sa\u00edda\noutput_encoding = utf-8\n\n# Configura\u00e7\u00f5es do banco\nsqlalchemy.url =\n\n[post_write_hooks]\nhooks = black\nblack.type = console_scripts\nblack.entrypoint = black\nblack.options = -l 79 REVISION_SCRIPT_FILENAME\n\n[loggers]\nkeys = root,sqlalchemy,alembic\n\n[handlers]\nkeys = console\n\n[formatters]\nkeys = generic\n\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n</code></pre>"},{"location":"configuration/#migrationsenvpy","title":"migrations/env.py","text":"<pre><code># migrations/env.py\nimport asyncio\nfrom logging.config import fileConfig\nfrom sqlalchemy import pool\nfrom sqlalchemy.engine import Connection\nfrom sqlalchemy.ext.asyncio import async_engine_from_config\nfrom alembic import context\n\n# Importar modelos\nfrom car_api.models.base import Base\nfrom car_api.models import users, cars  # noqa\nfrom car_api.core.settings import Settings\n\n# Configura\u00e7\u00f5es\nconfig = context.config\nsettings = Settings()\n\n# Configurar logging\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# Metadados dos modelos\ntarget_metadata = Base.metadata\n\ndef run_migrations_offline() -&gt; None:\n    \"\"\"Executar migra\u00e7\u00f5es offline.\"\"\"\n    url = settings.database_url\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef do_run_migrations(connection: Connection) -&gt; None:\n    \"\"\"Executar migra\u00e7\u00f5es com conex\u00e3o.\"\"\"\n    context.configure(connection=connection, target_metadata=target_metadata)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\nasync def run_async_migrations() -&gt; None:\n    \"\"\"Executar migra\u00e7\u00f5es ass\u00edncronas.\"\"\"\n    configuration = config.get_section(config.config_ini_section)\n    configuration[\"sqlalchemy.url\"] = settings.database_url\n\n    connectable = async_engine_from_config(\n        configuration,\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    async with connectable.connect() as connection:\n        await connection.run_sync(do_run_migrations)\n\n    await connectable.dispose()\n\ndef run_migrations_online() -&gt; None:\n    \"\"\"Executar migra\u00e7\u00f5es online.\"\"\"\n    asyncio.run(run_async_migrations())\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</code></pre>"},{"location":"configuration/#configuracao-do-fastapi","title":"\ud83d\ude80 Configura\u00e7\u00e3o do FastAPI","text":""},{"location":"configuration/#configuracoes-da-aplicacao","title":"Configura\u00e7\u00f5es da Aplica\u00e7\u00e3o","text":"<pre><code># car_api/app.py (vers\u00e3o expandida)\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\nfrom car_api.core.settings import Settings\nfrom car_api.routers import auth, brands, cars, users\n\nsettings = Settings()\n\napp = FastAPI(\n    title=\"Car API\",\n    description=\"API para gerenciamento de carros e usu\u00e1rios\",\n    version=\"0.1.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\",\n    openapi_url=\"/openapi.json\",\n)\n\n# Middleware CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.cors_origins,\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Middleware Trusted Host\napp.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=settings.allowed_hosts,\n)\n\n# Routers\napp.include_router(auth.router, prefix=\"/api/v1/auth\", tags=[\"authentication\"])\napp.include_router(users.router, prefix=\"/api/v1/users\", tags=[\"users\"])\napp.include_router(brands.router, prefix=\"/api/v1/brands\", tags=[\"brands\"])\napp.include_router(cars.router, prefix=\"/api/v1/cars\", tags=[\"cars\"])\n\n@app.get(\"/health_check\")\ndef health_check():\n    return {\"status\": \"ok\", \"version\": \"0.1.0\"}\n</code></pre>"},{"location":"configuration/#configuracao-de-testes","title":"\ud83e\uddea Configura\u00e7\u00e3o de Testes","text":""},{"location":"configuration/#pytestini","title":"pytest.ini","text":"<pre><code># pytest.ini\n[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\nasyncio_mode = auto\nasyncio_default_fixture_loop_scope = function\naddopts =\n    -v\n    --strict-markers\n    --strict-config\n    --cov=car_api\n    --cov-report=html\n    --cov-report=term-missing\n    --cov-fail-under=90\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    slow: Slow tests\n    database: Tests that require database\n</code></pre>"},{"location":"configuration/#conftestpy","title":"conftest.py","text":"<pre><code># tests/conftest.py\nimport asyncio\nimport pytest\nimport pytest_asyncio\nfrom httpx import AsyncClient\nfrom sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine\n\nfrom car_api.app import app\nfrom car_api.core.database import get_session\nfrom car_api.models.base import Base\n\n# Engine de teste\nTEST_DATABASE_URL = \"sqlite+aiosqlite:///:memory:\"\ntest_engine = create_async_engine(TEST_DATABASE_URL)\nTestSessionLocal = async_sessionmaker(\n    test_engine, expire_on_commit=False\n)\n\n@pytest_asyncio.fixture\nasync def db_session():\n    \"\"\"Criar sess\u00e3o de banco para testes.\"\"\"\n    async with test_engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    async with TestSessionLocal() as session:\n        yield session\n\n    async with test_engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n\n@pytest_asyncio.fixture\nasync def client(db_session):\n    \"\"\"Cliente HTTP para testes.\"\"\"\n    app.dependency_overrides[get_session] = lambda: db_session\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        yield ac\n\n    app.dependency_overrides.clear()\n</code></pre>"},{"location":"configuration/#configuracao-do-poetry","title":"\ud83d\udce6 Configura\u00e7\u00e3o do Poetry","text":""},{"location":"configuration/#pyprojecttoml","title":"pyproject.toml","text":"<pre><code>[tool.poetry]\nname = \"car-api\"\nversion = \"0.1.0\"\ndescription = \"API para gerenciamento de carros e usu\u00e1rios\"\nauthors = [\"PyCodeBR &lt;pycodebr@gmail.com&gt;\"]\nreadme = \"README.md\"\npackages = [{include = \"car_api\"}]\n\n[tool.poetry.dependencies]\npython = \"^3.13\"\nfastapi = {extras = [\"standard\"], version = \"^0.116.1\"}\nsqlalchemy = {extras = [\"asyncio\"], version = \"^2.0.42\"}\nalembic = \"^1.16.4\"\naiosqlite = \"^0.21.0\"\npsycopg = {extras = [\"binary\"], version = \"^3.2.9\"}\npydantic-settings = \"^2.10.1\"\npwdlib = {extras = [\"argon2\"], version = \"^0.2.1\"}\npyjwt = \"^2.10.1\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^8.0.0\"\npytest-asyncio = \"^0.25.0\"\npytest-cov = \"^5.0.0\"\nhttpx = \"^0.27.0\"\nruff = \"^0.12.7\"\ntaskipy = \"^1.14.1\"\nmkdocs = \"^1.6.1\"\nmkdocs-material = \"^9.5.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.pytest.ini_options]\npythonpath = \".\"\naddopts = \"-p no:warnings\"\nasyncio_default_fixture_loop_scope = \"function\"\n\n[tool.coverage.run]\nconcurrency = [\"thread\", \"greenlet\"]\n\n[tool.ruff]\nline-length = 79\nexclude = [\n    \".git\", \".tox\", \".venv\", \"__pycache__\",\n    \"migrations\", \"alembic\"\n]\n\n[tool.ruff.lint]\nselect = [\"I\", \"F\", \"E\", \"W\", \"PL\", \"PT\"]\nignore = [\"PLR2004\", \"PLR0917\", \"PLR0913\", \"PT022\"]\n\n[tool.ruff.format]\nquote-style = \"single\"\n\n[tool.taskipy.tasks]\nlint = \"ruff check\"\nformat = \"ruff format\"\ntest = \"pytest -v --cov=car_api\"\nrun = \"fastapi dev car_api/app.py\"\ndocs = \"mkdocs serve\"\nmigrate = \"alembic upgrade head\"\n</code></pre>"},{"location":"configuration/#configuracoes-adicionais","title":"\ud83d\udd27 Configura\u00e7\u00f5es Adicionais","text":""},{"location":"configuration/#logging","title":"Logging","text":"<pre><code># car_api/core/logging.py\nimport logging\nfrom typing import Any\n\ndef setup_logging(level: str = \"INFO\") -&gt; None:\n    \"\"\"Configurar logging da aplica\u00e7\u00e3o.\"\"\"\n    logging.basicConfig(\n        level=getattr(logging, level.upper()),\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        handlers=[\n            logging.StreamHandler(),\n            logging.FileHandler(\"app.log\"),\n        ],\n    )\n\n# Usar na aplica\u00e7\u00e3o\n# setup_logging(settings.log_level)\n</code></pre>"},{"location":"configuration/#cors","title":"CORS","text":"<pre><code># Configura\u00e7\u00e3o detalhada de CORS\nCORS_SETTINGS = {\n    \"allow_origins\": [\n        \"http://localhost:3000\",      # React dev\n        \"http://localhost:8080\",      # Vue dev\n        \"https://yourdomain.com\",     # Produ\u00e7\u00e3o\n    ],\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n    \"allow_headers\": [\n        \"Accept\",\n        \"Accept-Language\",\n        \"Content-Language\",\n        \"Content-Type\",\n        \"Authorization\",\n    ],\n}\n</code></pre>"},{"location":"configuration/#verificacao-de-configuracao","title":"\u2705 Verifica\u00e7\u00e3o de Configura\u00e7\u00e3o","text":"<p>Execute este script para verificar todas as configura\u00e7\u00f5es:</p> <pre><code># scripts/check_config.py\nfrom car_api.core.settings import Settings\nfrom car_api.core.database import engine\n\nasync def check_configuration():\n    \"\"\"Verificar configura\u00e7\u00f5es do projeto.\"\"\"\n    settings = Settings()\n\n    print(\"\ud83d\udd27 Verificando configura\u00e7\u00f5es...\")\n    print(f\"\u2705 Database URL: {settings.database_url}\")\n    print(f\"\u2705 JWT Algorithm: {settings.jwt_algorithm}\")\n    print(f\"\u2705 JWT Expiration: {settings.jwt_expiration_minutes} minutos\")\n\n    # Testar conex\u00e3o com banco\n    try:\n        async with engine.begin() as conn:\n            await conn.execute(\"SELECT 1\")\n        print(\"\u2705 Conex\u00e3o com banco: OK\")\n    except Exception as e:\n        print(f\"\u274c Erro na conex\u00e3o: {e}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(check_configuration())\n</code></pre> <pre><code># Executar verifica\u00e7\u00e3o\npoetry run python scripts/check_config.py\n</code></pre>"},{"location":"configuration/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Ap\u00f3s configurar o projeto:</p> <ol> <li>\ud83d\udcca Entenda a Estrutura do Projeto</li> <li>\ud83d\udd0d Explore os Guidelines e Padr\u00f5es</li> <li>\ud83d\udee0\ufe0f Comece o Desenvolvimento</li> <li>\ud83e\uddea Execute os Testes</li> </ol>"},{"location":"contributing/","title":"Contribui\u00e7\u00e3o","text":""},{"location":"contributing/#como-contribuir","title":"\ud83e\udd1d Como Contribuir","text":"<p>Agradecemos seu interesse em contribuir com o projeto Car API! Este guia detalha como voc\u00ea pode participar do desenvolvimento, reportar problemas e sugerir melhorias.</p>"},{"location":"contributing/#tipos-de-contribuicao","title":"\ud83d\udccb Tipos de Contribui\u00e7\u00e3o","text":""},{"location":"contributing/#reportar-bugs","title":"\ud83d\udc1b Reportar Bugs","text":"<ul> <li>Descreva o problema claramente</li> <li>Inclua passos para reproduzir</li> <li>Forne\u00e7a informa\u00e7\u00f5es do ambiente</li> <li>Use o template de issue apropriado</li> </ul>"},{"location":"contributing/#sugerir-features","title":"\u2728 Sugerir Features","text":"<ul> <li>Explique o caso de uso</li> <li>Descreva a solu\u00e7\u00e3o proposta</li> <li>Considere alternativas</li> <li>Discuta o impacto na API</li> </ul>"},{"location":"contributing/#melhorar-documentacao","title":"\ud83d\udcdd Melhorar Documenta\u00e7\u00e3o","text":"<ul> <li>Corrigir erros ou informa\u00e7\u00f5es desatualizadas</li> <li>Adicionar exemplos pr\u00e1ticos</li> <li>Traduzir documenta\u00e7\u00e3o</li> <li>Melhorar clareza e organiza\u00e7\u00e3o</li> </ul>"},{"location":"contributing/#contribuir-com-codigo","title":"\ud83d\udd27 Contribuir com C\u00f3digo","text":"<ul> <li>Implementar novas funcionalidades</li> <li>Corrigir bugs</li> <li>Melhorar performance</li> <li>Adicionar testes</li> </ul>"},{"location":"contributing/#processo-de-contribuicao","title":"\ud83d\ude80 Processo de Contribui\u00e7\u00e3o","text":""},{"location":"contributing/#1-configurar-ambiente","title":"1. Configurar Ambiente","text":"<pre><code># Fork do reposit\u00f3rio no GitHub\n# Clone do seu fork\ngit clone https://github.com/seu-usuario/car_api.git\ncd car_api\n\n# Adicionar remote upstream\ngit remote add upstream https://github.com/pycodebr/car_api.git\n\n# Configurar ambiente\npoetry install\npoetry run alembic upgrade head\n</code></pre>"},{"location":"contributing/#2-criar-branch-para-feature","title":"2. Criar Branch para Feature","text":"<pre><code># Atualizar main\ngit checkout main\ngit pull upstream main\n\n# Criar branch para feature\ngit checkout -b feature/nome-da-feature\n\n# Ou para bugfix\ngit checkout -b fix/nome-do-bug\n</code></pre>"},{"location":"contributing/#3-desenvolver-e-testar","title":"3. Desenvolver e Testar","text":"<pre><code># Desenvolver seguindo os padr\u00f5es\n# Escrever testes\npoetry run pytest\n\n# Verificar qualidade do c\u00f3digo\npoetry run task lint\npoetry run task format\n\n# Executar todos os testes\npoetry run task test\n</code></pre>"},{"location":"contributing/#4-commit-e-push","title":"4. Commit e Push","text":"<pre><code># Commit seguindo Conventional Commits\ngit add .\ngit commit -m \"feat: add new car insurance endpoint\"\n\n# Push para seu fork\ngit push origin feature/nome-da-feature\n</code></pre>"},{"location":"contributing/#5-criar-pull-request","title":"5. Criar Pull Request","text":"<ul> <li>Acesse GitHub e crie PR do seu fork para o reposit\u00f3rio principal</li> <li>Use o template de PR</li> <li>Descreva as mudan\u00e7as claramente</li> <li>Referencie issues relacionadas</li> </ul>"},{"location":"contributing/#padroes-de-codigo","title":"\ud83d\udcd0 Padr\u00f5es de C\u00f3digo","text":""},{"location":"contributing/#conventional-commits","title":"Conventional Commits","text":"<p>Seguimos a especifica\u00e7\u00e3o Conventional Commits:</p> <pre><code># Tipos de commit\nfeat: nova funcionalidade\nfix: corre\u00e7\u00e3o de bug\ndocs: documenta\u00e7\u00e3o\nstyle: formata\u00e7\u00e3o (sem mudan\u00e7a de l\u00f3gica)\nrefactor: refatora\u00e7\u00e3o de c\u00f3digo\ntest: testes\nchore: tarefas de manuten\u00e7\u00e3o\nperf: melhorias de performance\nci: mudan\u00e7as no CI/CD\n\n# Exemplos\nfeat: add insurance support to car model\nfix: resolve JWT token expiration issue\ndocs: update API documentation for new endpoints\ntest: add unit tests for car validation\n</code></pre>"},{"location":"contributing/#estrutura-de-commits","title":"Estrutura de Commits","text":"<pre><code># Formato\n&lt;tipo&gt;(&lt;escopo&gt;): &lt;descri\u00e7\u00e3o&gt;\n\n[corpo opcional]\n\n[rodap\u00e9 opcional]\n\n# Exemplos\nfeat(auth): add refresh token endpoint\n\nAdd endpoint to refresh JWT tokens without requiring\nfull authentication. This improves user experience\nby reducing login frequency.\n\nCloses #123\n\nfix(cars): resolve price validation error\n\nThe price field was not properly validating decimal\nprecision, causing errors with valid prices.\n\nBreaking change: Price format now requires exactly\n2 decimal places.\n</code></pre>"},{"location":"contributing/#code-review","title":"Code Review","text":""},{"location":"contributing/#checklist-para-revisores","title":"Checklist para Revisores","text":"<p>Funcionalidade: - [ ] A feature funciona conforme especificado - [ ] Todos os casos de uso s\u00e3o cobertos - [ ] N\u00e3o h\u00e1 regress\u00f5es</p> <p>C\u00f3digo: - [ ] C\u00f3digo \u00e9 limpo e leg\u00edvel - [ ] Segue padr\u00f5es do projeto - [ ] N\u00e3o h\u00e1 duplica\u00e7\u00e3o desnecess\u00e1ria - [ ] Performance \u00e9 adequada</p> <p>Testes: - [ ] Testes cobrem funcionalidade nova - [ ] Testes s\u00e3o significativos - [ ] Todos os testes passam - [ ] Coverage mantido ou melhorado</p> <p>Documenta\u00e7\u00e3o: - [ ] Documenta\u00e7\u00e3o atualizada - [ ] Docstrings adicionadas/atualizadas - [ ] Changelog atualizado se necess\u00e1rio</p>"},{"location":"contributing/#feedback-construtivo","title":"Feedback Construtivo","text":"<pre><code># \u2705 Bom feedback\nConsidere usar o m\u00e9todo `validate_plate()` existente aqui em vez de\nreimplementar a valida\u00e7\u00e3o. Isso mant\u00e9m a consist\u00eancia e reduz duplica\u00e7\u00e3o.\n\n# \u274c Feedback n\u00e3o construtivo\nEste c\u00f3digo est\u00e1 errado.\n\n# \u2705 Sugest\u00e3o espec\u00edfica\n```python\n# Em vez de:\nif len(plate) != 7:\n    raise ValueError(\"Invalid plate\")\n\n# Considere:\nvalidate_plate(plate)  # Reutiliza valida\u00e7\u00e3o existente\n</code></pre>"},{"location":"contributing/#reconhecer-pontos-positivos","title":"\u2705 Reconhecer pontos positivos","text":"<p>Excelente implementa\u00e7\u00e3o dos testes! A cobertura de casos edge est\u00e1 muito boa. <pre><code>## \ud83d\udc1b Reportar Issues\n\n### Template de Bug Report\n\n```markdown\n## \ud83d\udc1b Descri\u00e7\u00e3o do Bug\nDescri\u00e7\u00e3o clara e concisa do problema.\n\n## \ud83d\udd04 Passos para Reproduzir\n1. V\u00e1 para '...'\n2. Clique em '....'\n3. Veja o erro\n\n## \u2705 Comportamento Esperado\nDescri\u00e7\u00e3o do que deveria acontecer.\n\n## \ud83d\udcf1 Screenshots/Logs\nSe aplic\u00e1vel, adicione screenshots ou logs de erro.\n\n## \ud83d\udda5\ufe0f Ambiente\n- OS: [e.g. Ubuntu 22.04]\n- Python: [e.g. 3.13.0]\n- Poetry: [e.g. 1.7.1]\n- Browser: [e.g. Chrome 119]\n\n## \ud83d\udccb Contexto Adicional\nQualquer informa\u00e7\u00e3o adicional sobre o problema.\n</code></pre></p>"},{"location":"contributing/#template-de-feature-request","title":"Template de Feature Request","text":"<pre><code>## \ud83d\ude80 Feature Request\n\n### \ud83d\udcdd Descri\u00e7\u00e3o\nDescri\u00e7\u00e3o clara da funcionalidade desejada.\n\n### \ud83c\udfaf Problema\nQue problema esta feature resolve?\n\n### \ud83d\udca1 Solu\u00e7\u00e3o Proposta\nComo voc\u00ea imagina que a feature funcionaria?\n\n### \ud83d\udd04 Alternativas\nOutras maneiras de resolver o problema?\n\n### \ud83d\udccb Crit\u00e9rios de Aceita\u00e7\u00e3o\n- [ ] Crit\u00e9rio 1\n- [ ] Crit\u00e9rio 2\n- [ ] Crit\u00e9rio 3\n\n### \ud83d\udcca Impacto\n- **Usu\u00e1rios**: Quem se beneficia?\n- **Performance**: Impacto na performance?\n- **Breaking**: \u00c9 uma breaking change?\n</code></pre>"},{"location":"contributing/#arquitetura-de-contribuicoes","title":"\ud83c\udfd7\ufe0f Arquitetura de Contribui\u00e7\u00f5es","text":""},{"location":"contributing/#estrutura-para-novas-features","title":"Estrutura para Novas Features","text":"<pre><code>feature/new-endpoint/\n\u251c\u2500\u2500 models/           # Novos modelos se necess\u00e1rio\n\u251c\u2500\u2500 schemas/          # Schemas de valida\u00e7\u00e3o\n\u251c\u2500\u2500 routers/          # Endpoints da API\n\u251c\u2500\u2500 tests/            # Testes completos\n\u2514\u2500\u2500 docs/             # Documenta\u00e7\u00e3o atualizada\n</code></pre>"},{"location":"contributing/#exemplo-adicionar-sistema-de-avaliacoes","title":"Exemplo: Adicionar Sistema de Avalia\u00e7\u00f5es","text":"<pre><code># 1. Modelo\n# car_api/models/reviews.py\nclass Review(Base):\n    __tablename__ = 'reviews'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    rating: Mapped[int] = mapped_column(Integer)  # 1-5\n    comment: Mapped[Optional[str]] = mapped_column(Text)\n    car_id: Mapped[int] = mapped_column(ForeignKey('cars.id'))\n    reviewer_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n\n# 2. Schema\n# car_api/schemas/reviews.py\nclass ReviewSchema(BaseModel):\n    rating: int = Field(..., ge=1, le=5)\n    comment: Optional[str] = Field(None, max_length=1000)\n    car_id: int\n\n# 3. Router\n# car_api/routers/reviews.py\n@router.post('/')\nasync def create_review(\n    review: ReviewSchema,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session)\n):\n    # Implementa\u00e7\u00e3o\n\n# 4. Testes\n# tests/integration/test_reviews.py\nclass TestReviewsAPI:\n    async def test_create_review_success(self, client, auth_headers):\n        # Teste implementa\u00e7\u00e3o\n\n# 5. Migra\u00e7\u00e3o\n# poetry run alembic revision --autogenerate -m \"add reviews table\"\n</code></pre>"},{"location":"contributing/#guidelines-de-testes","title":"\ud83e\uddea Guidelines de Testes","text":""},{"location":"contributing/#cobertura-de-testes","title":"Cobertura de Testes","text":"<p>M\u00ednimo requerido: - Unit tests: 80%+ - Integration tests para novos endpoints - E2E tests para fluxos cr\u00edticos</p>"},{"location":"contributing/#estrutura-de-testes","title":"Estrutura de Testes","text":"<pre><code>class TestNewFeature:\n    \"\"\"Teste para nova funcionalidade.\"\"\"\n\n    async def test_success_case(self):\n        \"\"\"Testar caso de sucesso.\"\"\"\n        # Arrange\n        # Act\n        # Assert\n\n    async def test_validation_error(self):\n        \"\"\"Testar valida\u00e7\u00e3o de entrada.\"\"\"\n        # Teste com dados inv\u00e1lidos\n\n    async def test_authorization_error(self):\n        \"\"\"Testar autoriza\u00e7\u00e3o.\"\"\"\n        # Teste acesso negado\n\n    async def test_not_found_error(self):\n        \"\"\"Testar recurso n\u00e3o encontrado.\"\"\"\n        # Teste 404\n\n    async def test_edge_cases(self):\n        \"\"\"Testar casos extremos.\"\"\"\n        # Testes de boundary conditions\n</code></pre>"},{"location":"contributing/#mocks-e-fixtures","title":"Mocks e Fixtures","text":"<pre><code># Fixture reutiliz\u00e1vel\n@pytest.fixture\nasync def sample_review(db_session, sample_car, sample_user):\n    \"\"\"Review de exemplo para testes.\"\"\"\n    review = Review(\n        rating=5,\n        comment=\"Excelente carro!\",\n        car_id=sample_car.id,\n        reviewer_id=sample_user.id\n    )\n    db_session.add(review)\n    await db_session.commit()\n    return review\n\n# Mock de servi\u00e7o externo\n@pytest.fixture\ndef mock_notification_service(mocker):\n    \"\"\"Mock do servi\u00e7o de notifica\u00e7\u00f5es.\"\"\"\n    return mocker.patch('car_api.services.notification.send_email')\n</code></pre>"},{"location":"contributing/#documentacao","title":"\ud83d\udcdd Documenta\u00e7\u00e3o","text":""},{"location":"contributing/#docstrings","title":"Docstrings","text":"<pre><code>async def create_car(\n    car: CarSchema,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session),\n) -&gt; Car:\n    \"\"\"\n    Criar novo carro no sistema.\n\n    Registra um novo carro para o usu\u00e1rio autenticado, validando\n    todas as informa\u00e7\u00f5es e associando \u00e0 marca especificada.\n\n    Args:\n        car: Dados do carro a ser criado\n        current_user: Usu\u00e1rio autenticado via JWT\n        db: Sess\u00e3o do banco de dados\n\n    Returns:\n        Car: Carro criado com relacionamentos carregados\n\n    Raises:\n        HTTPException: 400 se placa j\u00e1 existe ou marca inv\u00e1lida\n        HTTPException: 401 se usu\u00e1rio n\u00e3o autenticado\n\n    Examples:\n        &gt;&gt;&gt; car_data = CarSchema(model=\"Civic\", brand_id=1, ...)\n        &gt;&gt;&gt; car = await create_car(car_data, user, db)\n        &gt;&gt;&gt; assert car.owner_id == user.id\n    \"\"\"\n</code></pre>"},{"location":"contributing/#comentarios-no-codigo","title":"Coment\u00e1rios no C\u00f3digo","text":"<pre><code>def verify_car_ownership(current_user: User, car_owner_id: int):\n    \"\"\"Verificar propriedade do carro.\"\"\"\n\n    # Implementar autoriza\u00e7\u00e3o granular para garantir que usu\u00e1rios\n    # s\u00f3 possam acessar/modificar seus pr\u00f3prios recursos\n    if current_user.id != car_owner_id:\n        # Retornar 403 em vez de 404 para n\u00e3o vazar informa\u00e7\u00f5es\n        # sobre exist\u00eancia de recursos de outros usu\u00e1rios\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail='Acesso negado'\n        )\n</code></pre>"},{"location":"contributing/#atualizacoes-na-documentacao","title":"Atualiza\u00e7\u00f5es na Documenta\u00e7\u00e3o","text":"<pre><code># Ao adicionar nova feature, atualizar:\n\n1. **API Endpoints** (`docs/api-endpoints.md`)\n   - Documentar novos endpoints\n   - Adicionar exemplos de request/response\n   - Incluir c\u00f3digos de erro\n\n2. **Modelagem do Sistema** (`docs/system-modeling.md`)\n   - Atualizar ERD se novos modelos\n   - Incluir novos fluxos se aplic\u00e1vel\n\n3. **README** (se mudan\u00e7a significativa)\n   - Atualizar features principais\n   - Modificar instru\u00e7\u00f5es se necess\u00e1rio\n</code></pre>"},{"location":"contributing/#release-process","title":"\ud83d\ude80 Release Process","text":""},{"location":"contributing/#versionamento-semantico","title":"Versionamento Sem\u00e2ntico","text":"<p>Seguimos Semantic Versioning:</p> <pre><code>MAJOR.MINOR.PATCH\n\n1.0.0 \u2192 1.0.1 (patch: bug fix)\n1.0.1 \u2192 1.1.0 (minor: new feature)\n1.1.0 \u2192 2.0.0 (major: breaking change)\n</code></pre>"},{"location":"contributing/#criterios-para-release","title":"Crit\u00e9rios para Release","text":"<p>Patch (x.x.X): - Bug fixes - Melhorias de seguran\u00e7a - Atualiza\u00e7\u00f5es de documenta\u00e7\u00e3o</p> <p>Minor (x.X.x): - Novas features - Melhorias de performance - Novos endpoints (n\u00e3o breaking)</p> <p>Major (X.x.x): - Breaking changes na API - Mudan\u00e7as na estrutura do banco - Remo\u00e7\u00e3o de features deprecated</p>"},{"location":"contributing/#processo-de-release","title":"Processo de Release","text":"<pre><code># 1. Atualizar CHANGELOG.md\n# 2. Bump version no pyproject.toml\n# 3. Criar release tag\ngit tag -a v1.2.0 -m \"Release v1.2.0\"\n\n# 4. Push tag\ngit push origin v1.2.0\n\n# 5. GitHub Actions cria release automaticamente\n</code></pre>"},{"location":"contributing/#reconhecimento","title":"\ud83c\udfc6 Reconhecimento","text":""},{"location":"contributing/#hall-of-fame","title":"Hall of Fame","text":"<p>Contribuidores que fizeram diferen\u00e7a significativa:</p> <ul> <li>@pycodebr - Criador e maintainer principal</li> <li>@contributor1 - Sistema de autentica\u00e7\u00e3o</li> <li>@contributor2 - Documenta\u00e7\u00e3o e testes</li> <li>@contributor3 - Performance e otimiza\u00e7\u00f5es</li> </ul>"},{"location":"contributing/#como-ser-reconhecido","title":"Como ser Reconhecido","text":"<p>First-time Contributor: - Badge especial no primeiro PR merged - Men\u00e7\u00e3o no README</p> <p>Regular Contributor: - Adi\u00e7\u00e3o ao CONTRIBUTORS.md - Acesso a discuss\u00f5es de roadmap</p> <p>Core Contributor: - Direitos de review - Participa\u00e7\u00e3o em decis\u00f5es t\u00e9cnicas - Mentor para novos contribuidores</p>"},{"location":"contributing/#comunicacao","title":"\ud83d\udcde Comunica\u00e7\u00e3o","text":""},{"location":"contributing/#canais-de-comunicacao","title":"Canais de Comunica\u00e7\u00e3o","text":"<p>GitHub Issues: - Reportar bugs - Solicitar features - Discuss\u00f5es t\u00e9cnicas</p> <p>GitHub Discussions: - D\u00favidas gerais - Compartilhar ideias - Ajuda da comunidade</p> <p>Discord (em breve): - Chat em tempo real - Mentoria - Networking</p>"},{"location":"contributing/#codigo-de-conduta","title":"C\u00f3digo de Conduta","text":"<p>Seguimos o Contributor Covenant:</p>"},{"location":"contributing/#nosso-compromisso","title":"Nosso Compromisso","text":"<p>Estamos comprometidos em tornar a participa\u00e7\u00e3o no projeto uma experi\u00eancia livre de ass\u00e9dio para todos, independentemente de idade, corpo, defici\u00eancia, etnia, identidade de g\u00eanero, n\u00edvel de experi\u00eancia, nacionalidade, apar\u00eancia pessoal, ra\u00e7a, religi\u00e3o ou identidade sexual.</p>"},{"location":"contributing/#padroes","title":"Padr\u00f5es","text":"<p>Comportamentos que contribuem para um ambiente positivo: - Usar linguagem acolhedora e inclusiva - Respeitar diferentes pontos de vista - Aceitar cr\u00edticas construtivas - Focar no que \u00e9 melhor para a comunidade - Mostrar empatia com outros membros</p> <p>Comportamentos inaceit\u00e1veis: - Linguagem ou imagens sexualizadas - Trolling, coment\u00e1rios insultuosos - Ass\u00e9dio p\u00fablico ou privado - Publicar informa\u00e7\u00f5es privadas sem permiss\u00e3o - Outras condutas consideradas inadequadas</p>"},{"location":"contributing/#roadmap","title":"\ud83c\udfaf Roadmap","text":""},{"location":"contributing/#proximas-features-v110","title":"Pr\u00f3ximas Features (v1.1.0)","text":"<ul> <li>[ ] Sistema de avalia\u00e7\u00f5es de carros</li> <li>[ ] Upload de imagens de carros</li> <li>[ ] Filtros avan\u00e7ados de busca</li> <li>[ ] Notifica\u00e7\u00f5es por email</li> <li>[ ] API de favoritos</li> </ul>"},{"location":"contributing/#melhorias-tecnicas","title":"Melhorias T\u00e9cnicas","text":"<ul> <li>[ ] Rate limiting com Redis</li> <li>[ ] Cache de queries frequentes</li> <li>[ ] Logs estruturados</li> <li>[ ] M\u00e9tricas de performance</li> <li>[ ] Documenta\u00e7\u00e3o interativa</li> </ul>"},{"location":"contributing/#como-influenciar-o-roadmap","title":"Como Influenciar o Roadmap","text":"<ol> <li>Participar de discuss\u00f5es no GitHub</li> <li>Votar em features atrav\u00e9s de \ud83d\udc4d nas issues</li> <li>Propor novas ideias com justificativa</li> <li>Implementar features priorit\u00e1rias</li> </ol>"},{"location":"contributing/#comecar-agora","title":"\ud83d\ude80 Come\u00e7ar Agora","text":""},{"location":"contributing/#issues-para-iniciantes","title":"Issues para Iniciantes","text":"<p>Procure por labels: - <code>good first issue</code> - Ideal para primeiro PR - <code>help wanted</code> - Precisamos de ajuda - <code>documentation</code> - Melhorar docs - <code>bug</code> - Corre\u00e7\u00f5es de bugs</p>"},{"location":"contributing/#primeiros-passos","title":"Primeiros Passos","text":"<ol> <li>Escolha uma issue marcada como <code>good first issue</code></li> <li>Comente na issue manifestando interesse</li> <li>Fa\u00e7a fork do reposit\u00f3rio</li> <li>Implemente seguindo os guidelines</li> <li>Abra PR usando o template</li> </ol>"},{"location":"contributing/#agradecimentos","title":"\ud83d\ude4f Agradecimentos","text":"<p>Obrigado por considerar contribuir com o Car API! Sua participa\u00e7\u00e3o faz toda a diferen\u00e7a para o crescimento e qualidade do projeto.</p> <p>Para d\u00favidas sobre contribui\u00e7\u00e3o: - \ud83d\udce7 Email: pycodebr@gmail.com - \ud83d\udc1b Issues: GitHub Issues - \ud83d\udcac Discussions: GitHub Discussions</p> <p>Juntos constru\u00edmos software melhor! \ud83d\ude80</p>"},{"location":"deployment/","title":"Deploy","text":""},{"location":"deployment/#estrategias-de-deploy","title":"\ud83d\ude80 Estrat\u00e9gias de Deploy","text":""},{"location":"deployment/#visao-geral-dos-ambientes","title":"Vis\u00e3o Geral dos Ambientes","text":"<pre><code>graph LR\n    DEV[Development] --&gt; TEST[Testing]\n    TEST --&gt; STAGE[Staging]\n    STAGE --&gt; PROD[Production]\n\n    subgraph \"Development\"\n        DEV_API[FastAPI Dev Server]\n        DEV_DB[SQLite Local]\n    end\n\n    subgraph \"Testing\"\n        TEST_API[Docker Container]\n        TEST_DB[PostgreSQL Test]\n    end\n\n    subgraph \"Staging\"\n        STAGE_API[Kubernetes Pod]\n        STAGE_DB[PostgreSQL Cloud]\n        STAGE_LB[Load Balancer]\n    end\n\n    subgraph \"Production\"\n        PROD_API1[API Instance 1]\n        PROD_API2[API Instance 2]\n        PROD_DB[PostgreSQL Cluster]\n        PROD_LB[Load Balancer]\n        PROD_CDN[CDN]\n    end\n\n    style DEV fill:#e8f5e8\n    style TEST fill:#e3f2fd\n    style STAGE fill:#fff3e0\n    style PROD fill:#ffebee</code></pre>"},{"location":"deployment/#docker","title":"\ud83d\udc33 Docker","text":""},{"location":"deployment/#dockerfile-de-producao","title":"Dockerfile de Produ\u00e7\u00e3o","text":"<pre><code># Dockerfile\nFROM python:3.13-slim as builder\n\n# Instalar depend\u00eancias do sistema\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Instalar Poetry\nRUN pip install poetry\n\n# Configurar Poetry\nENV POETRY_NO_INTERACTION=1 \\\n    POETRY_VENV_IN_PROJECT=1 \\\n    POETRY_CACHE_DIR=/tmp/poetry_cache\n\nWORKDIR /app\n\n# Copiar arquivos de depend\u00eancias\nCOPY pyproject.toml poetry.lock ./\n\n# Instalar depend\u00eancias\nRUN poetry install --only=main &amp;&amp; rm -rf $POETRY_CACHE_DIR\n\n# Est\u00e1gio de runtime\nFROM python:3.13-slim as runtime\n\n# Instalar depend\u00eancias de runtime\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    libpq5 \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Criar usu\u00e1rio n\u00e3o-root\nRUN groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser\n\nWORKDIR /app\n\n# Copiar virtual environment\nENV VIRTUAL_ENV=/app/.venv\nCOPY --from=builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Copiar c\u00f3digo da aplica\u00e7\u00e3o\nCOPY --chown=appuser:appuser . .\n\n# Configurar usu\u00e1rio\nUSER appuser\n\n# Expor porta\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health_check || exit 1\n\n# Comando padr\u00e3o\nCMD [\"fastapi\", \"run\", \"car_api/app.py\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/#docker-compose-para-producao","title":"Docker Compose para Produ\u00e7\u00e3o","text":"<pre><code># docker-compose.prod.yml\nversion: '3.8'\n\nservices:\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql+psycopg://car_api:${DB_PASSWORD}@db:5432/car_api\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY}\n      - JWT_ALGORITHM=HS256\n      - JWT_EXPIRATION_MINUTES=30\n    depends_on:\n      - db\n      - redis\n    restart: unless-stopped\n    networks:\n      - car_api_network\n    volumes:\n      - ./logs:/app/logs\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: car_api\n      POSTGRES_USER: car_api\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./backups:/backups\n    restart: unless-stopped\n    networks:\n      - car_api_network\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    restart: unless-stopped\n    networks:\n      - car_api_network\n    volumes:\n      - redis_data:/data\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl/certs\n    depends_on:\n      - api\n    restart: unless-stopped\n    networks:\n      - car_api_network\n\nnetworks:\n  car_api_network:\n    driver: bridge\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"deployment/#configuracao-do-nginx","title":"Configura\u00e7\u00e3o do Nginx","text":"<pre><code># nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream car_api {\n        server api:8000;\n    }\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n\n    server {\n        listen 80;\n        server_name yourdomain.com;\n\n        # Redirect HTTP to HTTPS\n        return 301 https://$server_name$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name yourdomain.com;\n\n        # SSL Configuration\n        ssl_certificate /etc/ssl/certs/cert.pem;\n        ssl_certificate_key /etc/ssl/certs/key.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n        ssl_prefer_server_ciphers off;\n\n        # Security Headers\n        add_header X-Frame-Options DENY;\n        add_header X-Content-Type-Options nosniff;\n        add_header X-XSS-Protection \"1; mode=block\";\n        add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\n\n        # API Proxy\n        location /api/ {\n            # Rate limiting\n            limit_req zone=api burst=20 nodelay;\n\n            proxy_pass http://car_api;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # Timeouts\n            proxy_connect_timeout 60s;\n            proxy_send_timeout 60s;\n            proxy_read_timeout 60s;\n        }\n\n        # Health Check\n        location /health_check {\n            proxy_pass http://car_api/health_check;\n            access_log off;\n        }\n\n        # Static files (if any)\n        location /static/ {\n            alias /app/static/;\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/#kubernetes","title":"\u2638\ufe0f Kubernetes","text":""},{"location":"deployment/#deployment","title":"Deployment","text":"<pre><code># k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: car-api\n  labels:\n    app: car-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: car-api\n  template:\n    metadata:\n      labels:\n        app: car-api\n    spec:\n      containers:\n      - name: car-api\n        image: car-api:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: car-api-secrets\n              key: database-url\n        - name: JWT_SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: car-api-secrets\n              key: jwt-secret-key\n        resources:\n          requests:\n            memory: \"128Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health_check\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /health_check\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre>"},{"location":"deployment/#service","title":"Service","text":"<pre><code># k8s/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: car-api-service\nspec:\n  selector:\n    app: car-api\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8000\n  type: LoadBalancer\n</code></pre>"},{"location":"deployment/#ingress","title":"Ingress","text":"<pre><code># k8s/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: car-api-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rate-limit: \"10\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - api.yourdomain.com\n    secretName: car-api-tls\n  rules:\n  - host: api.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: car-api-service\n            port:\n              number: 80\n</code></pre>"},{"location":"deployment/#secrets","title":"Secrets","text":"<pre><code># k8s/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: car-api-secrets\ntype: Opaque\ndata:\n  database-url: &lt;base64-encoded-database-url&gt;\n  jwt-secret-key: &lt;base64-encoded-jwt-secret&gt;\n</code></pre>"},{"location":"deployment/#configmap","title":"ConfigMap","text":"<pre><code># k8s/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: car-api-config\ndata:\n  JWT_ALGORITHM: \"HS256\"\n  JWT_EXPIRATION_MINUTES: \"30\"\n  LOG_LEVEL: \"INFO\"\n</code></pre>"},{"location":"deployment/#cicd-pipeline","title":"\ud83d\udd04 CI/CD Pipeline","text":""},{"location":"deployment/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ published ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.13'\n\n    - name: Install Poetry\n      uses: snok/install-poetry@v1\n\n    - name: Install dependencies\n      run: poetry install\n\n    - name: Run tests\n      run: |\n        poetry run pytest --cov=car_api --cov-fail-under=90\n        poetry run ruff check\n        poetry run ruff format --check\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=semver,pattern={{version}}\n          type=semver,pattern={{major}}.{{minor}}\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n\n  deploy-staging:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment: staging\n\n    steps:\n    - name: Deploy to staging\n      run: |\n        echo \"Deploying to staging environment\"\n        # Add staging deployment commands here\n\n  deploy-production:\n    needs: [build, deploy-staging]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'release'\n    environment: production\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG }}\n\n    - name: Deploy to Kubernetes\n      run: |\n        # Update image tag in deployment\n        sed -i 's|car-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}|g' k8s/deployment.yaml\n\n        # Apply Kubernetes manifests\n        kubectl apply -f k8s/\n\n        # Wait for rollout\n        kubectl rollout status deployment/car-api\n\n        # Verify deployment\n        kubectl get pods -l app=car-api\n</code></pre>"},{"location":"deployment/#scripts-de-deploy","title":"\ud83d\udd27 Scripts de Deploy","text":""},{"location":"deployment/#script-de-deploy-local","title":"Script de Deploy Local","text":"<pre><code>#!/bin/bash\n# scripts/deploy.sh\n\nset -e\n\necho \"\ud83d\ude80 Starting deployment process...\"\n\n# 1. Build Docker image\necho \"\ud83d\udce6 Building Docker image...\"\ndocker build -t car-api:latest .\n\n# 2. Run tests in container\necho \"\ud83e\uddea Running tests...\"\ndocker run --rm car-api:latest poetry run pytest\n\n# 3. Start services\necho \"\ud83d\udc33 Starting services...\"\ndocker-compose -f docker-compose.prod.yml up -d\n\n# 4. Wait for services\necho \"\u23f3 Waiting for services to be ready...\"\nsleep 30\n\n# 5. Run migrations\necho \"\ud83d\uddc3\ufe0f Running database migrations...\"\ndocker-compose -f docker-compose.prod.yml exec api poetry run alembic upgrade head\n\n# 6. Health check\necho \"\ud83c\udfe5 Performing health check...\"\nif curl -f http://localhost:8000/health_check; then\n    echo \"\u2705 Deployment successful!\"\nelse\n    echo \"\u274c Health check failed!\"\n    exit 1\nfi\n\necho \"\ud83c\udf89 Deployment completed successfully!\"\n</code></pre>"},{"location":"deployment/#script-de-rollback","title":"Script de Rollback","text":"<pre><code>#!/bin/bash\n# scripts/rollback.sh\n\nset -e\n\nPREVIOUS_VERSION=${1:-\"previous\"}\n\necho \"\ud83d\udd04 Rolling back to version: $PREVIOUS_VERSION\"\n\n# 1. Stop current containers\necho \"\ud83d\uded1 Stopping current containers...\"\ndocker-compose -f docker-compose.prod.yml down\n\n# 2. Deploy previous version\necho \"\ud83d\udce6 Deploying previous version...\"\ndocker tag car-api:$PREVIOUS_VERSION car-api:latest\ndocker-compose -f docker-compose.prod.yml up -d\n\n# 3. Wait and verify\necho \"\u23f3 Waiting for services...\"\nsleep 30\n\n# 4. Health check\necho \"\ud83c\udfe5 Performing health check...\"\nif curl -f http://localhost:8000/health_check; then\n    echo \"\u2705 Rollback successful!\"\nelse\n    echo \"\u274c Rollback failed!\"\n    exit 1\nfi\n</code></pre>"},{"location":"deployment/#gestao-de-banco-de-dados","title":"\ud83d\uddc3\ufe0f Gest\u00e3o de Banco de Dados","text":""},{"location":"deployment/#migracoes-em-producao","title":"Migra\u00e7\u00f5es em Produ\u00e7\u00e3o","text":"<pre><code>#!/bin/bash\n# scripts/migrate.sh\n\nset -e\n\necho \"\ud83d\uddc3\ufe0f Running database migrations...\"\n\n# 1. Backup database\necho \"\ud83d\udcbe Creating database backup...\"\ndocker-compose exec db pg_dump -U car_api car_api &gt; \"backup_$(date +%Y%m%d_%H%M%S).sql\"\n\n# 2. Run migrations\necho \"\ud83d\udd04 Running migrations...\"\ndocker-compose exec api poetry run alembic upgrade head\n\n# 3. Verify migrations\necho \"\u2705 Verifying migrations...\"\ndocker-compose exec api poetry run alembic current\n\necho \"\ud83c\udf89 Migrations completed successfully!\"\n</code></pre>"},{"location":"deployment/#backup-automatizado","title":"Backup Automatizado","text":"<pre><code>#!/bin/bash\n# scripts/backup.sh\n\nset -e\n\nBACKUP_DIR=\"/backups\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"car_api_backup_${DATE}.sql\"\n\necho \"\ud83d\udcbe Creating database backup...\"\n\n# Create backup\ndocker-compose exec db pg_dump -U car_api -h localhost car_api &gt; \"${BACKUP_DIR}/${BACKUP_FILE}\"\n\n# Compress backup\ngzip \"${BACKUP_DIR}/${BACKUP_FILE}\"\n\n# Clean old backups (keep last 7 days)\nfind ${BACKUP_DIR} -name \"car_api_backup_*.sql.gz\" -mtime +7 -delete\n\necho \"\u2705 Backup completed: ${BACKUP_FILE}.gz\"\n\n# Upload to S3 (optional)\nif [ ! -z \"$AWS_S3_BUCKET\" ]; then\n    aws s3 cp \"${BACKUP_DIR}/${BACKUP_FILE}.gz\" \"s3://${AWS_S3_BUCKET}/backups/\"\n    echo \"\u2601\ufe0f Backup uploaded to S3\"\nfi\n</code></pre>"},{"location":"deployment/#monitoramento","title":"\ud83d\udcca Monitoramento","text":""},{"location":"deployment/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># car_api/middleware/metrics.py\nfrom prometheus_client import Counter, Histogram, generate_latest\nfrom fastapi import Request, Response\nimport time\n\n# M\u00e9tricas\nREQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])\nREQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')\nDATABASE_QUERIES = Counter('database_queries_total', 'Total database queries')\n\nasync def metrics_middleware(request: Request, call_next):\n    start_time = time.time()\n\n    response = await call_next(request)\n\n    # Record metrics\n    REQUEST_COUNT.labels(\n        method=request.method,\n        endpoint=request.url.path,\n        status=response.status_code\n    ).inc()\n\n    REQUEST_DURATION.observe(time.time() - start_time)\n\n    return response\n\n# Endpoint para m\u00e9tricas\n@app.get('/metrics')\nasync def metrics():\n    return Response(generate_latest(), media_type=\"text/plain\")\n</code></pre>"},{"location":"deployment/#health-checks-avancados","title":"Health Checks Avan\u00e7ados","text":"<pre><code># car_api/core/health.py\nfrom fastapi import APIRouter\nfrom sqlalchemy import text\nfrom car_api.core.database import engine\n\nrouter = APIRouter()\n\n@router.get('/health_check')\nasync def health_check():\n    \"\"\"Health check b\u00e1sico.\"\"\"\n    return {\"status\": \"ok\", \"timestamp\": datetime.utcnow()}\n\n@router.get('/health_check/detailed')\nasync def detailed_health_check():\n    \"\"\"Health check detalhado.\"\"\"\n    checks = {}\n\n    # Database check\n    try:\n        async with engine.begin() as conn:\n            await conn.execute(text(\"SELECT 1\"))\n        checks[\"database\"] = {\"status\": \"ok\"}\n    except Exception as e:\n        checks[\"database\"] = {\"status\": \"error\", \"error\": str(e)}\n\n    # Memory check\n    import psutil\n    memory = psutil.virtual_memory()\n    checks[\"memory\"] = {\n        \"status\": \"ok\" if memory.percent &lt; 90 else \"warning\",\n        \"usage_percent\": memory.percent\n    }\n\n    # Disk check\n    disk = psutil.disk_usage('/')\n    checks[\"disk\"] = {\n        \"status\": \"ok\" if disk.percent &lt; 90 else \"warning\",\n        \"usage_percent\": disk.percent\n    }\n\n    overall_status = \"ok\" if all(\n        check[\"status\"] == \"ok\" for check in checks.values()\n    ) else \"degraded\"\n\n    return {\n        \"status\": overall_status,\n        \"timestamp\": datetime.utcnow(),\n        \"checks\": checks\n    }\n</code></pre>"},{"location":"deployment/#seguranca-em-producao","title":"\ud83d\udd12 Seguran\u00e7a em Produ\u00e7\u00e3o","text":""},{"location":"deployment/#configuracoes-de-seguranca","title":"Configura\u00e7\u00f5es de Seguran\u00e7a","text":"<pre><code># car_api/core/security_config.py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\ndef configure_security(app: FastAPI, settings):\n    \"\"\"Configurar middleware de seguran\u00e7a.\"\"\"\n\n    # CORS\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=settings.cors_origins,\n        allow_credentials=True,\n        allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        allow_headers=[\"*\"],\n    )\n\n    # Trusted Host\n    app.add_middleware(\n        TrustedHostMiddleware,\n        allowed_hosts=settings.allowed_hosts\n    )\n\n    # Security Headers\n    @app.middleware(\"http\")\n    async def add_security_headers(request, call_next):\n        response = await call_next(request)\n        response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n        response.headers[\"X-Frame-Options\"] = \"DENY\"\n        response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n        response.headers[\"Strict-Transport-Security\"] = \"max-age=31536000; includeSubDomains\"\n        return response\n</code></pre>"},{"location":"deployment/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<pre><code># .env.production\n# Database\nDATABASE_URL=postgresql+psycopg://user:password@host:5432/db\n\n# JWT\nJWT_SECRET_KEY=your-production-secret-key-64-chars-minimum\nJWT_ALGORITHM=HS256\nJWT_EXPIRATION_MINUTES=30\n\n# Security\nCORS_ORIGINS=[\"https://yourdomain.com\"]\nALLOWED_HOSTS=[\"yourdomain.com\", \"api.yourdomain.com\"]\n\n# Monitoring\nLOG_LEVEL=INFO\nSENTRY_DSN=https://your-sentry-dsn\n\n# Performance\nWORKERS=4\nMAX_CONNECTIONS=100\n</code></pre>"},{"location":"deployment/#escalabilidade","title":"\ud83d\udcc8 Escalabilidade","text":""},{"location":"deployment/#auto-scaling-kubernetes","title":"Auto Scaling (Kubernetes)","text":"<pre><code># k8s/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: car-api-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: car-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n</code></pre>"},{"location":"deployment/#load-balancer-aws-alb","title":"Load Balancer (AWS ALB)","text":"<pre><code># aws/alb.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: car-api-alb\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: \"nlb\"\n    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: \"true\"\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n    targetPort: 8000\n  selector:\n    app: car-api\n</code></pre>"},{"location":"deployment/#alertas-e-notificacoes","title":"\ud83d\udea8 Alertas e Notifica\u00e7\u00f5es","text":""},{"location":"deployment/#alertmanager","title":"Alertmanager","text":"<pre><code># alerts/rules.yml\ngroups:\n- name: car-api\n  rules:\n  - alert: HighErrorRate\n    expr: rate(http_requests_total{status=~\"5..\"}[5m]) &gt; 0.1\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"High error rate detected\"\n      description: \"Error rate is {{ $value }} errors per second\"\n\n  - alert: HighMemoryUsage\n    expr: memory_usage_percent &gt; 90\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High memory usage\"\n      description: \"Memory usage is {{ $value }}%\"\n\n  - alert: DatabaseDown\n    expr: up{job=\"car-api-db\"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Database is down\"\n      description: \"Database has been down for more than 1 minute\"\n</code></pre>"},{"location":"deployment/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Para melhorar o deploy:</p> <ol> <li>\ud83d\udcdd Contribui\u00e7\u00e3o - Como contribuir</li> <li>\ud83d\udccb Release Notes - Hist\u00f3rico de vers\u00f5es</li> <li>\ud83d\udd0d Implementar observabilidade completa</li> <li>\ud83d\udd10 Adicionar secrets management</li> <li>\ud83c\udf0d Setup multi-region</li> <li>\ud83d\udcca Dashboard de m\u00e9tricas customizado</li> </ol>"},{"location":"development/","title":"Desenvolvimento","text":""},{"location":"development/#fluxo-de-desenvolvimento","title":"\ud83d\udcbb Fluxo de Desenvolvimento","text":""},{"location":"development/#workflow-recomendado","title":"\ud83d\udd04 Workflow Recomendado","text":"<pre><code>graph TD\n    A[Clone Repository] --&gt; B[Create Feature Branch]\n    B --&gt; C[Setup Environment]\n    C --&gt; D[Write Tests]\n    D --&gt; E[Implement Feature]\n    E --&gt; F[Run Tests]\n    F --&gt; G{Tests Pass?}\n    G --&gt;|No| D\n    G --&gt;|Yes| H[Code Review]\n    H --&gt; I[Lint &amp; Format]\n    I --&gt; J[Create PR]\n    J --&gt; K[CI/CD Pipeline]\n    K --&gt; L[Merge to Main]\n    L --&gt; M[Deploy]\n\n    style A fill:#e8f5e8\n    style F fill:#e3f2fd\n    style G fill:#fff3e0\n    style M fill:#f3e5f5</code></pre>"},{"location":"development/#configuracao-do-ambiente","title":"\ud83d\ude80 Configura\u00e7\u00e3o do Ambiente","text":""},{"location":"development/#1-preparacao-inicial","title":"1. Prepara\u00e7\u00e3o Inicial","text":"<pre><code># Clone do reposit\u00f3rio\ngit clone https://github.com/pycodebr/car_api.git\ncd car_api\n\n# Criar branch para feature\ngit checkout -b feature/nova-funcionalidade\n\n# Verificar pr\u00e9-requisitos\npython --version  # Python 3.13+\npoetry --version  # Poetry instalado\n</code></pre>"},{"location":"development/#2-instalacao-de-dependencias","title":"2. Instala\u00e7\u00e3o de Depend\u00eancias","text":"<pre><code># Instalar depend\u00eancias com Poetry\npoetry install\n\n# Verificar ambiente virtual\npoetry env info\n\n# Ativar shell (opcional)\npoetry shell\n</code></pre>"},{"location":"development/#3-configuracao-do-banco","title":"3. Configura\u00e7\u00e3o do Banco","text":"<pre><code># Copiar arquivo de configura\u00e7\u00e3o\ncp .env.example .env\n\n# Editar configura\u00e7\u00f5es\nnano .env\n\n# Executar migra\u00e7\u00f5es\npoetry run alembic upgrade head\n\n# Verificar conex\u00e3o\npoetry run python -c \"from car_api.core.database import engine; print('Database OK')\"\n</code></pre>"},{"location":"development/#test-driven-development-tdd","title":"\ud83e\uddea Test-Driven Development (TDD)","text":""},{"location":"development/#ciclo-tdd-red-green-refactor","title":"Ciclo TDD: Red \u2192 Green \u2192 Refactor","text":""},{"location":"development/#1-red-escrever-teste-que-falha","title":"1. \ud83d\udd34 Red: Escrever Teste que Falha","text":"<pre><code># tests/test_new_feature.py\nimport pytest\nfrom httpx import AsyncClient\n\nclass TestNewFeature:\n    async def test_create_car_with_insurance(self, client: AsyncClient, auth_headers):\n        \"\"\"Teste para nova funcionalidade de seguro.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"brand_id\": 1,\n            \"insurance\": {\n                \"company\": \"Porto Seguro\",\n                \"policy_number\": \"12345\",\n                \"expires_at\": \"2024-12-31\"\n            }\n        }\n\n        response = await client.post(\n            \"/api/v1/cars/\",\n            json=car_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 201\n        assert response.json()[\"insurance\"][\"company\"] == \"Porto Seguro\"\n</code></pre>"},{"location":"development/#2-green-implementar-funcionalidade-minima","title":"2. \ud83d\udfe2 Green: Implementar Funcionalidade M\u00ednima","text":"<pre><code># car_api/models/cars.py\nclass Insurance(Base):\n    __tablename__ = 'insurances'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    company: Mapped[str] = mapped_column(String(100))\n    policy_number: Mapped[str] = mapped_column(String(50))\n    expires_at: Mapped[date]\n    car_id: Mapped[int] = mapped_column(ForeignKey('cars.id'))\n\nclass Car(Base):\n    # ... campos existentes\n    insurance: Mapped[Optional['Insurance']] = relationship(\n        'Insurance', back_populates='car'\n    )\n</code></pre> <pre><code># car_api/schemas/cars.py\nclass InsuranceSchema(BaseModel):\n    company: str = Field(..., min_length=1, max_length=100)\n    policy_number: str = Field(..., min_length=1, max_length=50)\n    expires_at: date\n\nclass CarSchema(BaseModel):\n    # ... campos existentes\n    insurance: Optional[InsuranceSchema] = None\n</code></pre>"},{"location":"development/#3-refactor-melhorar-implementacao","title":"3. \ud83d\udd35 Refactor: Melhorar Implementa\u00e7\u00e3o","text":"<pre><code># car_api/routers/cars.py\n@router.post('/', response_model=CarPublicSchema)\nasync def create_car(\n    car: CarSchema,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session),\n):\n    # Valida\u00e7\u00f5es existentes...\n\n    # Criar carro\n    db_car = Car(**car.model_dump(exclude={'insurance'}), owner_id=current_user.id)\n    db.add(db_car)\n    await db.flush()  # Para obter o ID\n\n    # Criar seguro se fornecido\n    if car.insurance:\n        db_insurance = Insurance(\n            **car.insurance.model_dump(),\n            car_id=db_car.id\n        )\n        db.add(db_insurance)\n\n    await db.commit()\n    await db.refresh(db_car)\n\n    return db_car\n</code></pre>"},{"location":"development/#executar-testes-durante-desenvolvimento","title":"Executar Testes Durante Desenvolvimento","text":"<pre><code># Executar testes espec\u00edficos\npoetry run pytest tests/test_new_feature.py -v\n\n# Executar com coverage\npoetry run pytest tests/test_new_feature.py --cov=car_api\n\n# Watch mode (reexecutar quando arquivos mudarem)\npoetry run ptw --now tests/test_new_feature.py\n\n# Executar apenas testes que falharam\npoetry run pytest --lf\n</code></pre>"},{"location":"development/#ferramentas-de-desenvolvimento","title":"\ud83d\udd27 Ferramentas de Desenvolvimento","text":""},{"location":"development/#taskipy-automacao-de-tarefas","title":"Taskipy - Automa\u00e7\u00e3o de Tarefas","text":"<pre><code># pyproject.toml\n[tool.taskipy.tasks]\n# Desenvolvimento\ndev = 'fastapi dev car_api/app.py --reload'\nshell = 'ipython'\n\n# Qualidade de c\u00f3digo\nlint = 'ruff check'\nformat = 'ruff format'\ntype-check = 'mypy car_api'\n\n# Testes\ntest = 'pytest -v --cov=car_api'\ntest-watch = 'ptw --now'\ntest-cov = 'pytest --cov=car_api --cov-report=html'\n\n# Banco de dados\ndb-upgrade = 'alembic upgrade head'\ndb-revision = 'alembic revision --autogenerate'\ndb-reset = 'alembic downgrade base &amp;&amp; alembic upgrade head'\n\n# Documenta\u00e7\u00e3o\ndocs = 'mkdocs serve'\ndocs-build = 'mkdocs build'\n\n# Deploy\nbuild = 'docker build -t car-api .'\nup = 'docker-compose up -d'\ndown = 'docker-compose down'\n</code></pre>"},{"location":"development/#comandos-frequentes","title":"Comandos Frequentes","text":"<pre><code># Iniciar desenvolvimento\npoetry run task dev\n\n# Executar testes em watch mode\npoetry run task test-watch\n\n# Verificar qualidade do c\u00f3digo\npoetry run task lint\npoetry run task format\n\n# Criar migra\u00e7\u00e3o\npoetry run task db-revision -m \"add insurance table\"\n\n# Aplicar migra\u00e7\u00f5es\npoetry run task db-upgrade\n\n# Gerar documenta\u00e7\u00e3o\npoetry run task docs\n</code></pre>"},{"location":"development/#padroes-de-codigo","title":"\ud83d\udcdd Padr\u00f5es de C\u00f3digo","text":""},{"location":"development/#estrutura-de-commit","title":"Estrutura de Commit","text":"<p>Usar Conventional Commits:</p> <pre><code># Tipos de commit\nfeat: nova funcionalidade\nfix: corre\u00e7\u00e3o de bug\ndocs: documenta\u00e7\u00e3o\nstyle: formata\u00e7\u00e3o\nrefactor: refatora\u00e7\u00e3o\ntest: testes\nchore: tarefas de manuten\u00e7\u00e3o\n\n# Exemplos\ngit commit -m \"feat: add insurance support to cars\"\ngit commit -m \"fix: resolve authentication timeout issue\"\ngit commit -m \"docs: update API documentation for insurance\"\ngit commit -m \"test: add unit tests for insurance validation\"\n</code></pre>"},{"location":"development/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.6\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n      - id: ruff-format\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-added-large-files\n\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.7.1\n    hooks:\n      - id: mypy\n        additional_dependencies: [types-all]\n</code></pre> <pre><code># Instalar pre-commit\npoetry add --group dev pre-commit\n\n# Configurar hooks\npoetry run pre-commit install\n\n# Executar em todos os arquivos\npoetry run pre-commit run --all-files\n</code></pre>"},{"location":"development/#desenvolvimento-com-banco-de-dados","title":"\ud83d\uddc3\ufe0f Desenvolvimento com Banco de Dados","text":""},{"location":"development/#workflow-de-migracoes","title":"Workflow de Migra\u00e7\u00f5es","text":""},{"location":"development/#1-modificar-modelo","title":"1. Modificar Modelo","text":"<pre><code># car_api/models/cars.py\nclass Car(Base):\n    # ... campos existentes\n    mileage: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)\n    last_maintenance: Mapped[Optional[date]] = mapped_column(Date, nullable=True)\n</code></pre>"},{"location":"development/#2-gerar-migracao","title":"2. Gerar Migra\u00e7\u00e3o","text":"<pre><code># Gerar migra\u00e7\u00e3o automaticamente\npoetry run alembic revision --autogenerate -m \"add mileage and maintenance fields to car\"\n\n# Verificar arquivo gerado\ncat migrations/versions/20231201_120000_add_mileage_and_maintenance_fields_to_car.py\n</code></pre>"},{"location":"development/#3-revisar-e-aplicar","title":"3. Revisar e Aplicar","text":"<pre><code># migrations/versions/20231201_120000_add_mileage_and_maintenance_fields_to_car.py\ndef upgrade() -&gt; None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('cars', sa.Column('mileage', sa.Integer(), nullable=True))\n    op.add_column('cars', sa.Column('last_maintenance', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\n\ndef downgrade() -&gt; None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('cars', 'last_maintenance')\n    op.drop_column('cars', 'mileage')\n    # ### end Alembic commands ###\n</code></pre> <pre><code># Aplicar migra\u00e7\u00e3o\npoetry run alembic upgrade head\n\n# Verificar status\npoetry run alembic current\n\n# Reverter se necess\u00e1rio\npoetry run alembic downgrade -1\n</code></pre>"},{"location":"development/#dados-de-teste-fixtures","title":"Dados de Teste (Fixtures)","text":"<pre><code># tests/fixtures.py\nimport pytest\nfrom datetime import date\nfrom decimal import Decimal\n\n@pytest.fixture\nasync def sample_brand(db_session):\n    \"\"\"Criar marca de exemplo.\"\"\"\n    brand = Brand(\n        name=\"Toyota\",\n        description=\"Marca japonesa confi\u00e1vel\",\n        is_active=True\n    )\n    db_session.add(brand)\n    await db_session.commit()\n    await db_session.refresh(brand)\n    return brand\n\n@pytest.fixture\nasync def sample_car(db_session, sample_user, sample_brand):\n    \"\"\"Criar carro de exemplo.\"\"\"\n    car = Car(\n        model=\"Corolla\",\n        factory_year=2022,\n        model_year=2023,\n        color=\"Prata\",\n        plate=\"ABC1234\",\n        fuel_type=FuelType.FLEX,\n        transmission=TransmissionType.AUTOMATIC,\n        price=Decimal(\"85000.00\"),\n        brand_id=sample_brand.id,\n        owner_id=sample_user.id\n    )\n    db_session.add(car)\n    await db_session.commit()\n    await db_session.refresh(car)\n    return car\n\n# Uso em testes\nasync def test_get_car(client, sample_car, auth_headers):\n    response = await client.get(\n        f\"/api/v1/cars/{sample_car.id}\",\n        headers=auth_headers\n    )\n    assert response.status_code == 200\n    assert response.json()[\"model\"] == \"Corolla\"\n</code></pre>"},{"location":"development/#debug-e-logging","title":"\ud83d\udc1b Debug e Logging","text":""},{"location":"development/#configuracao-de-logging","title":"Configura\u00e7\u00e3o de Logging","text":"<pre><code># car_api/core/logging.py\nimport logging\nimport sys\nfrom car_api.core.settings import Settings\n\nsettings = Settings()\n\ndef setup_logging():\n    \"\"\"Configurar logging para desenvolvimento.\"\"\"\n    logging.basicConfig(\n        level=logging.DEBUG if settings.debug else logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.StreamHandler(sys.stdout),\n            logging.FileHandler('app.log')\n        ]\n    )\n\n    # Logger espec\u00edfico para SQLAlchemy\n    sqlalchemy_logger = logging.getLogger('sqlalchemy.engine')\n    sqlalchemy_logger.setLevel(logging.INFO)\n\n# Usar em desenvolvimento\n# car_api/app.py\nif settings.debug:\n    setup_logging()\n</code></pre>"},{"location":"development/#debug-com-ipython","title":"Debug com IPython","text":"<pre><code># Inserir breakpoint no c\u00f3digo\nimport IPython; IPython.embed()\n\n# Ou usar debugger built-in\nimport pdb; pdb.set_trace()\n\n# Python 3.7+ breakpoint\nbreakpoint()\n</code></pre>"},{"location":"development/#logs-estruturados","title":"Logs Estruturados","text":"<pre><code>import structlog\n\nlogger = structlog.get_logger()\n\nasync def create_car(car_data: CarSchema, user: User):\n    logger.info(\n        \"Creating car\",\n        user_id=user.id,\n        model=car_data.model,\n        brand_id=car_data.brand_id\n    )\n\n    try:\n        # L\u00f3gica de cria\u00e7\u00e3o\n        logger.info(\"Car created successfully\", car_id=new_car.id)\n        return new_car\n    except Exception as e:\n        logger.error(\n            \"Failed to create car\",\n            error=str(e),\n            user_id=user.id\n        )\n        raise\n</code></pre>"},{"location":"development/#hot-reload-e-live-development","title":"\ud83d\udd04 Hot Reload e Live Development","text":""},{"location":"development/#fastapi-development-server","title":"FastAPI Development Server","text":"<pre><code># Modo desenvolvimento com hot reload\npoetry run fastapi dev car_api/app.py\n\n# Com configura\u00e7\u00f5es customizadas\npoetry run fastapi dev car_api/app.py \\\n  --host 0.0.0.0 \\\n  --port 8000 \\\n  --reload \\\n  --reload-dir car_api\n</code></pre>"},{"location":"development/#docker-development","title":"Docker Development","text":"<pre><code># Dockerfile.dev\nFROM python:3.13-slim\n\nWORKDIR /app\n\n# Instalar Poetry\nRUN pip install poetry\n\n# Copiar arquivos de depend\u00eancias\nCOPY pyproject.toml poetry.lock ./\n\n# Instalar depend\u00eancias\nRUN poetry config virtualenvs.create false \\\n    &amp;&amp; poetry install --no-dev\n\n# Copiar c\u00f3digo\nCOPY . .\n\n# Modo desenvolvimento\nCMD [\"fastapi\", \"dev\", \"car_api/app.py\", \"--host\", \"0.0.0.0\"]\n</code></pre> <pre><code># docker-compose.dev.yml\nversion: '3.8'\nservices:\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile.dev\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - .:/app\n    environment:\n      - DATABASE_URL=postgresql+psycopg://postgres:postgres@db:5432/car_api\n      - DEBUG=true\n    depends_on:\n      - db\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: car_api\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre> <pre><code># Executar em modo desenvolvimento\ndocker-compose -f docker-compose.dev.yml up\n</code></pre>"},{"location":"development/#monitoramento-de-performance","title":"\ud83d\udcca Monitoramento de Performance","text":""},{"location":"development/#profiling-de-performance","title":"Profiling de Performance","text":"<pre><code># car_api/middleware/profiling.py\nimport cProfile\nimport pstats\nimport io\nfrom fastapi import Request, Response\n\nclass ProfilerMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        if scope[\"type\"] == \"http\":\n            profiler = cProfile.Profile()\n            profiler.enable()\n\n            # Executar request\n            await self.app(scope, receive, send)\n\n            profiler.disable()\n\n            # Analisar resultados\n            s = io.StringIO()\n            ps = pstats.Stats(profiler, stream=s)\n            ps.sort_stats('cumulative').print_stats(10)\n\n            print(f\"Profile for {scope['path']}:\")\n            print(s.getvalue())\n\n# Usar apenas em desenvolvimento\nif settings.debug:\n    app.add_middleware(ProfilerMiddleware)\n</code></pre>"},{"location":"development/#metricas-de-database","title":"M\u00e9tricas de Database","text":"<pre><code>from sqlalchemy import event\nimport time\n\n# Monitor de queries lentas\n@event.listens_for(engine, \"before_cursor_execute\")\ndef receive_before_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    context._query_start_time = time.time()\n\n@event.listens_for(engine, \"after_cursor_execute\")\ndef receive_after_cursor_execute(conn, cursor, statement, parameters, context, executemany):\n    total = time.time() - context._query_start_time\n    if total &gt; 0.1:  # Query mais lenta que 100ms\n        logger.warning(\n            \"Slow query detected\",\n            duration=total,\n            statement=statement[:100]\n        )\n</code></pre>"},{"location":"development/#testes-de-integracao","title":"\ud83e\uddea Testes de Integra\u00e7\u00e3o","text":""},{"location":"development/#teste-de-api-completo","title":"Teste de API Completo","text":"<pre><code># tests/test_integration.py\nclass TestCarAPIIntegration:\n    async def test_full_car_workflow(self, client: AsyncClient):\n        \"\"\"Teste completo do fluxo de carros.\"\"\"\n\n        # 1. Registrar usu\u00e1rio\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"password123\"\n        }\n        response = await client.post(\"/api/v1/users/\", json=user_data)\n        assert response.status_code == 201\n\n        # 2. Fazer login\n        login_data = {\n            \"email\": \"test@example.com\",\n            \"password\": \"password123\"\n        }\n        response = await client.post(\"/api/v1/auth/token\", json=login_data)\n        assert response.status_code == 200\n        token = response.json()[\"access_token\"]\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n\n        # 3. Criar marca\n        brand_data = {\n            \"name\": \"Honda\",\n            \"description\": \"Marca japonesa\",\n            \"is_active\": True\n        }\n        response = await client.post(\"/api/v1/brands/\", json=brand_data, headers=headers)\n        assert response.status_code == 201\n        brand_id = response.json()[\"id\"]\n\n        # 4. Criar carro\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 2023,\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": \"XYZ9876\",\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"brand_id\": brand_id\n        }\n        response = await client.post(\"/api/v1/cars/\", json=car_data, headers=headers)\n        assert response.status_code == 201\n        car_id = response.json()[\"id\"]\n\n        # 5. Listar carros\n        response = await client.get(\"/api/v1/cars/\", headers=headers)\n        assert response.status_code == 200\n        assert len(response.json()[\"cars\"]) == 1\n\n        # 6. Buscar carro espec\u00edfico\n        response = await client.get(f\"/api/v1/cars/{car_id}\", headers=headers)\n        assert response.status_code == 200\n        assert response.json()[\"model\"] == \"Civic\"\n\n        # 7. Atualizar carro\n        update_data = {\"price\": \"98000.00\"}\n        response = await client.put(f\"/api/v1/cars/{car_id}\", json=update_data, headers=headers)\n        assert response.status_code == 200\n        assert response.json()[\"price\"] == \"98000.00\"\n\n        # 8. Deletar carro\n        response = await client.delete(f\"/api/v1/cars/{car_id}\", headers=headers)\n        assert response.status_code == 204\n</code></pre>"},{"location":"development/#documentacao-durante-desenvolvimento","title":"\ud83d\udcda Documenta\u00e7\u00e3o Durante Desenvolvimento","text":""},{"location":"development/#docstrings-automaticas","title":"Docstrings Autom\u00e1ticas","text":"<pre><code># car_api/routers/cars.py\n@router.post(\n    '/',\n    response_model=CarPublicSchema,\n    status_code=status.HTTP_201_CREATED,\n    summary='Criar novo carro',\n    description='Registra um novo carro no sistema para o usu\u00e1rio autenticado.',\n    responses={\n        201: {\"description\": \"Carro criado com sucesso\"},\n        400: {\"description\": \"Dados inv\u00e1lidos ou placa j\u00e1 existe\"},\n        401: {\"description\": \"Token de autentica\u00e7\u00e3o inv\u00e1lido\"},\n        422: {\"description\": \"Erro de valida\u00e7\u00e3o nos dados\"}\n    }\n)\nasync def create_car(\n    car: CarSchema,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session),\n):\n    \"\"\"\n    Criar novo carro no sistema.\n\n    - **model**: Nome do modelo do carro\n    - **factory_year**: Ano de fabrica\u00e7\u00e3o (1900-2030)\n    - **price**: Pre\u00e7o do carro (deve ser positivo)\n    - **plate**: Placa no formato brasileiro (ABC1234 ou ABC1A23)\n    - **brand_id**: ID da marca (deve existir no sistema)\n\n    O carro ser\u00e1 automaticamente associado ao usu\u00e1rio autenticado.\n    \"\"\"\n</code></pre>"},{"location":"development/#comentarios-de-codigo","title":"Coment\u00e1rios de C\u00f3digo","text":"<pre><code>def verify_car_ownership(current_user: User, car_owner_id: int):\n    \"\"\"\n    Verificar se o usu\u00e1rio autenticado \u00e9 propriet\u00e1rio do carro.\n\n    Esta fun\u00e7\u00e3o implementa autoriza\u00e7\u00e3o granular, garantindo que\n    usu\u00e1rios s\u00f3 possam acessar/modificar seus pr\u00f3prios carros.\n\n    Args:\n        current_user: Usu\u00e1rio autenticado via JWT\n        car_owner_id: ID do propriet\u00e1rio do carro\n\n    Raises:\n        HTTPException: 403 se usu\u00e1rio n\u00e3o \u00e9 propriet\u00e1rio\n\n    Examples:\n        &gt;&gt;&gt; verify_car_ownership(user, car.owner_id)  # OK se user.id == car.owner_id\n        &gt;&gt;&gt; verify_car_ownership(user, other_id)     # Raises HTTPException\n    \"\"\"\n    if current_user.id != car_owner_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail='Acesso negado - voc\u00ea n\u00e3o \u00e9 propriet\u00e1rio deste carro'\n        )\n</code></pre>"},{"location":"development/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<p>Para continuar o desenvolvimento:</p> <ol> <li>\ud83e\uddea Testes - Estrat\u00e9gias avan\u00e7adas de teste</li> <li>\ud83d\ude80 Deploy - Prepara\u00e7\u00e3o para produ\u00e7\u00e3o</li> <li>\ud83d\udcca Implementar monitoramento e m\u00e9tricas</li> <li>\ud83d\udd0d Adicionar logging estruturado</li> <li>\ud83c\udfaf Otimizar performance de queries</li> <li>\ud83d\udcf1 Desenvolver frontend ou mobile app</li> </ol>"},{"location":"guidelines/","title":"Guidelines e Padr\u00f5es","text":""},{"location":"guidelines/#padroes-de-codigo","title":"\ud83c\udfaf Padr\u00f5es de C\u00f3digo","text":""},{"location":"guidelines/#estilo-de-codigo","title":"Estilo de C\u00f3digo","text":"<p>O projeto segue padr\u00f5es rigorosos de qualidade de c\u00f3digo utilizando Ruff como linter e formatador principal.</p>"},{"location":"guidelines/#configuracao-do-ruff","title":"Configura\u00e7\u00e3o do Ruff","text":"<pre><code>[tool.ruff]\nline-length = 79\nexclude = [\n    \".git\", \".tox\", \".venv\", \"__pycache__\",\n    \"migrations\", \"alembic\"\n]\n\n[tool.ruff.lint]\npreview = true\nselect = ['I', 'F', 'E', 'W', 'PL', 'PT']\nignore = ['PLR2004', 'PLR0917', 'PLR0913', 'PT022']\n\n[tool.ruff.format]\npreview = true\nquote-style = 'single'\n</code></pre>"},{"location":"guidelines/#regras-de-formatacao","title":"Regras de Formata\u00e7\u00e3o","text":"<ul> <li>Linha m\u00e1xima: 79 caracteres</li> <li>Aspas: Simples (<code>'</code>) para strings</li> <li>Imports: Organizados automaticamente</li> <li>Trailing commas: Obrigat\u00f3rias em listas multi-linha</li> </ul>"},{"location":"guidelines/#type-hints","title":"Type Hints","text":"<p>Obrigat\u00f3rio em todo o c\u00f3digo:</p> <pre><code># \u2705 Correto\nfrom typing import Optional, List\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nasync def get_user(\n    user_id: int,\n    db: AsyncSession\n) -&gt; Optional[User]:\n    return await db.get(User, user_id)\n\n# \u274c Incorreto\nasync def get_user(user_id, db):\n    return await db.get(User, user_id)\n</code></pre>"},{"location":"guidelines/#nomenclatura","title":"Nomenclatura","text":""},{"location":"guidelines/#variaveis-e-funcoes","title":"Vari\u00e1veis e Fun\u00e7\u00f5es","text":"<pre><code># \u2705 Snake case\nuser_name = \"Jo\u00e3o\"\ncar_model = \"Civic\"\n\nasync def create_new_user():\n    pass\n\nasync def get_car_by_id():\n    pass\n</code></pre>"},{"location":"guidelines/#classes","title":"Classes","text":"<pre><code># \u2705 Pascal case\nclass UserSchema:\n    pass\n\nclass CarPublicSchema:\n    pass\n\nclass AuthenticationError:\n    pass\n</code></pre>"},{"location":"guidelines/#constantes","title":"Constantes","text":"<pre><code># \u2705 UPPER_SNAKE_CASE\nJWT_ALGORITHM = 'HS256'\nDEFAULT_PAGE_SIZE = 100\nMAX_CARS_PER_USER = 50\n</code></pre>"},{"location":"guidelines/#arquivos-e-modulos","title":"Arquivos e M\u00f3dulos","text":"<pre><code># \u2705 Snake case\ncar_schemas.py\nuser_models.py\nauth_middleware.py\n</code></pre>"},{"location":"guidelines/#arquitetura-e-estrutura","title":"\ud83c\udfd7\ufe0f Arquitetura e Estrutura","text":""},{"location":"guidelines/#padrao-de-arquitetura","title":"Padr\u00e3o de Arquitetura","text":"<p>O projeto segue o padr\u00e3o Repository/Service Layer adaptado para FastAPI:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Controllers   \u2502  \u2190 FastAPI Routers\n\u2502   (Routers)     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Schemas       \u2502  \u2190 Pydantic Models (Validation)\n\u2502   (DTOs)        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Models        \u2502  \u2190 SQLAlchemy Models (Database)\n\u2502   (Entities)    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Core          \u2502  \u2190 Database, Security, Settings\n\u2502   (Infrastructure) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guidelines/#separacao-de-responsabilidades","title":"Separa\u00e7\u00e3o de Responsabilidades","text":""},{"location":"guidelines/#1-routers-controladores","title":"1. Routers (Controladores)","text":"<pre><code># Responsabilidades:\n# - Receber requisi\u00e7\u00f5es HTTP\n# - Validar par\u00e2metros de entrada\n# - Chamar l\u00f3gica de neg\u00f3cio\n# - Retornar respostas HTTP\n\n@router.post('/', response_model=CarPublicSchema)\nasync def create_car(\n    car: CarSchema,\n    current_user: User = Depends(get_current_user),\n    db: AsyncSession = Depends(get_session),\n):\n    # Valida\u00e7\u00e3o de regras de neg\u00f3cio\n    # Opera\u00e7\u00f5es no banco\n    # Retorno da resposta\n</code></pre>"},{"location":"guidelines/#2-schemas-dtos","title":"2. Schemas (DTOs)","text":"<pre><code># Responsabilidades:\n# - Valida\u00e7\u00e3o de dados de entrada\n# - Serializa\u00e7\u00e3o de dados de sa\u00edda\n# - Documenta\u00e7\u00e3o autom\u00e1tica da API\n\nclass CarSchema(BaseModel):\n    model: str = Field(..., min_length=1, max_length=100)\n    factory_year: int = Field(..., ge=1900, le=2030)\n    price: Decimal = Field(..., gt=0)\n</code></pre>"},{"location":"guidelines/#3-models-entidades","title":"3. Models (Entidades)","text":"<pre><code># Responsabilidades:\n# - Representar estrutura do banco\n# - Definir relacionamentos\n# - Valida\u00e7\u00f5es de integridade\n\nclass Car(Base):\n    __tablename__ = 'cars'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    model: Mapped[str] = mapped_column(String(100))\n    brand: Mapped['Brand'] = relationship('Brand')\n</code></pre>"},{"location":"guidelines/#4-core-infraestrutura","title":"4. Core (Infraestrutura)","text":"<pre><code># Responsabilidades:\n# - Configura\u00e7\u00f5es globais\n# - Conectividade com banco\n# - Seguran\u00e7a e autentica\u00e7\u00e3o\n# - Utilit\u00e1rios compartilhados\n</code></pre>"},{"location":"guidelines/#padroes-de-seguranca","title":"\ud83d\udd10 Padr\u00f5es de Seguran\u00e7a","text":""},{"location":"guidelines/#autenticacao-jwt","title":"Autentica\u00e7\u00e3o JWT","text":"<pre><code># Sempre verificar autentica\u00e7\u00e3o em rotas protegidas\n@router.get('/')\nasync def protected_endpoint(\n    current_user: User = Depends(get_current_user)\n):\n    # L\u00f3gica do endpoint\n</code></pre>"},{"location":"guidelines/#validacao-de-propriedade","title":"Valida\u00e7\u00e3o de Propriedade","text":"<pre><code># Verificar se o usu\u00e1rio \u00e9 dono do recurso\ndef verify_car_ownership(current_user: User, car_owner_id: int):\n    if current_user.id != car_owner_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail='Acesso negado'\n        )\n</code></pre>"},{"location":"guidelines/#hash-de-senhas","title":"Hash de Senhas","text":"<pre><code># Sempre usar hash seguro para senhas\nfrom pwdlib import PasswordHash\n\npwd_context = PasswordHash.recommended()\n\ndef get_password_hash(password: str) -&gt; str:\n    return pwd_context.hash(password)\n</code></pre>"},{"location":"guidelines/#padroes-de-banco-de-dados","title":"\ud83d\uddc3\ufe0f Padr\u00f5es de Banco de Dados","text":""},{"location":"guidelines/#migracoes","title":"Migra\u00e7\u00f5es","text":"<pre><code># Sempre criar migra\u00e7\u00f5es para mudan\u00e7as no schema\npoetry run alembic revision --autogenerate -m \"add new field to car model\"\n</code></pre>"},{"location":"guidelines/#consultas","title":"Consultas","text":"<pre><code># \u2705 Usar async/await\nasync def get_cars(db: AsyncSession) -&gt; list[Car]:\n    result = await db.execute(select(Car))\n    return result.scalars().all()\n\n# \u2705 Usar selectinload para relacionamentos\nquery = select(Car).options(\n    selectinload(Car.brand),\n    selectinload(Car.owner)\n)\n</code></pre>"},{"location":"guidelines/#transacoes","title":"Transa\u00e7\u00f5es","text":"<pre><code># \u2705 Commit e rollback expl\u00edcitos\ntry:\n    db.add(new_car)\n    await db.commit()\n    await db.refresh(new_car)\nexcept Exception:\n    await db.rollback()\n    raise\n</code></pre>"},{"location":"guidelines/#padroes-de-api","title":"\ud83d\udcca Padr\u00f5es de API","text":""},{"location":"guidelines/#codigos-de-status-http","title":"C\u00f3digos de Status HTTP","text":"<pre><code># \u2705 Usar c\u00f3digos apropriados\n@router.post('/', status_code=status.HTTP_201_CREATED)  # Cria\u00e7\u00e3o\n@router.get('/', status_code=status.HTTP_200_OK)       # Sucesso\n@router.put('/', status_code=status.HTTP_200_OK)       # Atualiza\u00e7\u00e3o\n@router.delete('/', status_code=status.HTTP_204_NO_CONTENT)  # Dele\u00e7\u00e3o\n\n# \u2705 Erros espec\u00edficos\nraise HTTPException(\n    status_code=status.HTTP_404_NOT_FOUND,\n    detail='Recurso n\u00e3o encontrado'\n)\n</code></pre>"},{"location":"guidelines/#paginacao","title":"Pagina\u00e7\u00e3o","text":"<pre><code># \u2705 Padr\u00e3o de pagina\u00e7\u00e3o\n@router.get('/')\nasync def list_items(\n    offset: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=100),\n):\n    # Implementa\u00e7\u00e3o\n    return {\n        'items': items,\n        'offset': offset,\n        'limit': limit\n    }\n</code></pre>"},{"location":"guidelines/#filtros-e-busca","title":"Filtros e Busca","text":"<pre><code># \u2705 Par\u00e2metros opcionais de filtro\n@router.get('/')\nasync def list_cars(\n    search: Optional[str] = Query(None),\n    brand_id: Optional[int] = Query(None),\n    fuel_type: Optional[FuelType] = Query(None),\n):\n    # Implementa\u00e7\u00e3o\n</code></pre>"},{"location":"guidelines/#padroes-de-testes","title":"\ud83e\uddea Padr\u00f5es de Testes","text":""},{"location":"guidelines/#estrutura-de-testes","title":"Estrutura de Testes","text":"<pre><code># \u2705 Usar pytest com fixtures\n@pytest_asyncio.fixture\nasync def client(db_session):\n    app.dependency_overrides[get_session] = lambda: db_session\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        yield ac\n\n# \u2705 Testar cen\u00e1rios positivos e negativos\nasync def test_create_car_success(client, sample_user):\n    # Teste de sucesso\n\nasync def test_create_car_invalid_data(client):\n    # Teste de erro\n</code></pre>"},{"location":"guidelines/#nomenclatura-de-testes","title":"Nomenclatura de Testes","text":"<pre><code># \u2705 Padr\u00e3o: test_[action]_[scenario]_[expected_result]\ndef test_create_user_with_valid_data_returns_201():\n    pass\n\ndef test_create_user_with_duplicate_email_returns_400():\n    pass\n\ndef test_get_user_that_not_exists_returns_404():\n    pass\n</code></pre>"},{"location":"guidelines/#cobertura-de-testes","title":"Cobertura de Testes","text":"<pre><code># Manter cobertura m\u00ednima de 90%\npoetry run task test\n\n# Verificar relat\u00f3rio HTML\nopen htmlcov/index.html\n</code></pre>"},{"location":"guidelines/#padroes-de-documentacao","title":"\ud83d\udcdd Padr\u00f5es de Documenta\u00e7\u00e3o","text":""},{"location":"guidelines/#docstrings","title":"Docstrings","text":"<pre><code># \u2705 Usar docstrings em fun\u00e7\u00f5es p\u00fablicas\nasync def create_car(\n    car: CarSchema,\n    current_user: User,\n    db: AsyncSession\n) -&gt; Car:\n    \"\"\"\n    Criar novo carro no sistema.\n\n    Args:\n        car: Dados do carro a ser criado\n        current_user: Usu\u00e1rio autenticado\n        db: Sess\u00e3o do banco de dados\n\n    Returns:\n        Car: Carro criado com ID gerado\n\n    Raises:\n        HTTPException: Se placa j\u00e1 existe ou marca inv\u00e1lida\n    \"\"\"\n</code></pre>"},{"location":"guidelines/#comentarios","title":"Coment\u00e1rios","text":"<pre><code># \u2705 Coment\u00e1rios para l\u00f3gica complexa\n# Verificar se a placa j\u00e1 est\u00e1 em uso antes de criar\nplate_exists = await db.scalar(\n    select(exists().where(Car.plate == car.plate))\n)\n\n# \u274c Evitar coment\u00e1rios \u00f3bvios\nuser_id = 1  # Define user_id como 1\n</code></pre>"},{"location":"guidelines/#readme-e-documentacao","title":"README e Documenta\u00e7\u00e3o","text":"<ul> <li>README.md: Instru\u00e7\u00f5es b\u00e1sicas de instala\u00e7\u00e3o e uso</li> <li>docs/: Documenta\u00e7\u00e3o detalhada com exemplos</li> <li>Changelog: Hist\u00f3rico de vers\u00f5es e mudan\u00e7as</li> </ul>"},{"location":"guidelines/#padroes-de-deploy","title":"\ud83d\ude80 Padr\u00f5es de Deploy","text":""},{"location":"guidelines/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<pre><code># \u2705 Usar Settings com Pydantic\nclass Settings(BaseSettings):\n    database_url: str\n    jwt_secret_key: str\n    debug: bool = False\n\n    class Config:\n        env_file = '.env'\n</code></pre>"},{"location":"guidelines/#docker","title":"Docker","text":"<pre><code># \u2705 Multi-stage build\nFROM python:3.13-slim as builder\n# Build dependencies\n\nFROM python:3.13-slim as runtime\n# Runtime image\n</code></pre>"},{"location":"guidelines/#logs","title":"Logs","text":"<pre><code># \u2705 Usar logging estruturado\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nasync def create_car(car_data):\n    logger.info(f\"Creating car: {car_data.model}\")\n    try:\n        # L\u00f3gica\n        logger.info(f\"Car created successfully: {car.id}\")\n    except Exception as e:\n        logger.error(f\"Failed to create car: {e}\")\n        raise\n</code></pre>"},{"location":"guidelines/#checklist-de-qualidade","title":"\u2705 Checklist de Qualidade","text":"<p>Antes de fazer commit, verificar:</p> <ul> <li>[ ] Testes: Todos os testes passam</li> <li>[ ] Linting: <code>poetry run task lint</code> sem erros</li> <li>[ ] Formata\u00e7\u00e3o: <code>poetry run task format</code> aplicado</li> <li>[ ] Type hints: Todas as fun\u00e7\u00f5es tipadas</li> <li>[ ] Documenta\u00e7\u00e3o: Docstrings em fun\u00e7\u00f5es p\u00fablicas</li> <li>[ ] Seguran\u00e7a: Valida\u00e7\u00f5es e autentica\u00e7\u00e3o implementadas</li> <li>[ ] Migra\u00e7\u00e3o: Migra\u00e7\u00e3o criada se necess\u00e1rio</li> </ul>"},{"location":"guidelines/#fluxo-de-desenvolvimento","title":"\ud83d\udd04 Fluxo de Desenvolvimento","text":""},{"location":"guidelines/#1-criar-feature-branch","title":"1. Criar Feature Branch","text":"<pre><code>git checkout -b feature/new-car-endpoint\n</code></pre>"},{"location":"guidelines/#2-desenvolver-com-tdd","title":"2. Desenvolver com TDD","text":"<pre><code># 1. Escrever teste\n# 2. Implementar funcionalidade\n# 3. Refatorar\npoetry run task test\n</code></pre>"},{"location":"guidelines/#3-verificar-qualidade","title":"3. Verificar Qualidade","text":"<pre><code>poetry run task lint\npoetry run task format\npoetry run task test\n</code></pre>"},{"location":"guidelines/#4-commit-e-push","title":"4. Commit e Push","text":"<pre><code>git add .\ngit commit -m \"feat: add new car endpoint with validation\"\ngit push origin feature/new-car-endpoint\n</code></pre>"},{"location":"guidelines/#5-pull-request","title":"5. Pull Request","text":"<ul> <li>Descri\u00e7\u00e3o clara da funcionalidade</li> <li>Testes inclu\u00eddos</li> <li>Documenta\u00e7\u00e3o atualizada</li> </ul>"},{"location":"guidelines/#convencoes-de-commit","title":"\ud83d\udccb Conven\u00e7\u00f5es de Commit","text":"<p>Usar Conventional Commits:</p> <pre><code># Features\ngit commit -m \"feat: add car search endpoint\"\n\n# Bug fixes\ngit commit -m \"fix: resolve authentication issue\"\n\n# Documentation\ngit commit -m \"docs: update API documentation\"\n\n# Refactoring\ngit commit -m \"refactor: improve database queries\"\n\n# Tests\ngit commit -m \"test: add unit tests for car model\"\n\n# Breaking changes\ngit commit -m \"feat!: change API response format\"\n</code></pre>"},{"location":"guidelines/#objetivos-de-qualidade","title":"\ud83c\udfaf Objetivos de Qualidade","text":"<ul> <li>Cobertura de testes: \u2265 90%</li> <li>Performance: APIs respondem em &lt; 200ms</li> <li>Seguran\u00e7a: Todas as rotas protegidas adequadamente</li> <li>Documenta\u00e7\u00e3o: Todas as APIs documentadas no OpenAPI</li> <li>Manutenibilidade: Complexidade ciclom\u00e1tica &lt; 10</li> <li>Confiabilidade: Zero erros em produ\u00e7\u00e3o</li> </ul>"},{"location":"installation/","title":"Instala\u00e7\u00e3o","text":""},{"location":"installation/#guia-de-instalacao-completo","title":"\ud83d\ude80 Guia de Instala\u00e7\u00e3o Completo","text":""},{"location":"installation/#1-clone-do-repositorio","title":"1. Clone do Reposit\u00f3rio","text":"<pre><code># HTTPS\ngit clone https://github.com/pycodebr/car_api.git\n\n# SSH (se configurado)\ngit clone git@github.com:pycodebr/car_api.git\n\n# Entrar no diret\u00f3rio\ncd car_api\n</code></pre>"},{"location":"installation/#2-verificar-estrutura-do-projeto","title":"2. Verificar Estrutura do Projeto","text":"<pre><code>ls -la\n</code></pre> <p>Voc\u00ea deve ver: <pre><code>\u251c\u2500\u2500 car_api/           # C\u00f3digo principal\n\u251c\u2500\u2500 tests/             # Testes automatizados\n\u251c\u2500\u2500 migrations/        # Migra\u00e7\u00f5es do banco\n\u251c\u2500\u2500 docs/             # Documenta\u00e7\u00e3o\n\u251c\u2500\u2500 pyproject.toml    # Configura\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 alembic.ini       # Configura\u00e7\u00e3o do Alembic\n\u251c\u2500\u2500 .env.example      # Exemplo de vari\u00e1veis de ambiente\n\u2514\u2500\u2500 README.md         # Documenta\u00e7\u00e3o b\u00e1sica\n</code></pre></p>"},{"location":"installation/#3-configurar-ambiente-virtual","title":"3. Configurar Ambiente Virtual","text":""},{"location":"installation/#usando-poetry-recomendado","title":"Usando Poetry (Recomendado)","text":"<pre><code># Instalar depend\u00eancias e criar ambiente virtual\npoetry install\n\n# Verificar ambiente\npoetry env info\n\n# Ativar shell do ambiente (opcional)\npoetry shell\n</code></pre>"},{"location":"installation/#alternativa-venv-pip","title":"Alternativa: venv + pip","text":"<pre><code># Criar ambiente virtual\npython -m venv .venv\n\n# Ativar ambiente virtual\n# Linux/macOS:\nsource .venv/bin/activate\n# Windows:\n.venv\\Scripts\\activate\n\n# Instalar depend\u00eancias\npip install -r requirements.txt\n</code></pre>"},{"location":"installation/#4-configurar-variaveis-de-ambiente","title":"4. Configurar Vari\u00e1veis de Ambiente","text":"<pre><code># Copiar exemplo de configura\u00e7\u00e3o\ncp .env.example .env\n\n# Editar configura\u00e7\u00f5es\nnano .env  # ou seu editor preferido\n</code></pre>"},{"location":"installation/#configuracao-para-desenvolvimento-sqlite","title":"Configura\u00e7\u00e3o para Desenvolvimento (SQLite)","text":"<pre><code># .env\nDATABASE_URL='sqlite+aiosqlite:///./car.db'\nJWT_SECRET_KEY='your-super-secret-jwt-key-here'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\n</code></pre>"},{"location":"installation/#configuracao-para-producao-postgresql","title":"Configura\u00e7\u00e3o para Produ\u00e7\u00e3o (PostgreSQL)","text":"<pre><code># .env\nDATABASE_URL='postgresql+psycopg://postgres:postgres@localhost:5432/car_api'\nJWT_SECRET_KEY='your-super-secret-jwt-key-here'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\n</code></pre>"},{"location":"installation/#5-configurar-banco-de-dados","title":"5. Configurar Banco de Dados","text":""},{"location":"installation/#opcao-a-sqlite-desenvolvimento","title":"Op\u00e7\u00e3o A: SQLite (Desenvolvimento)","text":"<pre><code># Executar migra\u00e7\u00f5es\npoetry run alembic upgrade head\n\n# Verificar se o banco foi criado\nls -la car.db\n</code></pre>"},{"location":"installation/#opcao-b-postgresql-producao","title":"Op\u00e7\u00e3o B: PostgreSQL (Produ\u00e7\u00e3o)","text":"<pre><code># 1. Criar banco de dados\nsudo -u postgres createdb car_api\n\n# 2. Criar usu\u00e1rio (opcional)\nsudo -u postgres createuser --interactive car_api_user\n\n# 3. Executar migra\u00e7\u00f5es\npoetry run alembic upgrade head\n</code></pre>"},{"location":"installation/#opcao-c-postgresql-com-docker","title":"Op\u00e7\u00e3o C: PostgreSQL com Docker","text":"<pre><code># 1. Subir banco via Docker Compose\ndocker-compose up -d db\n\n# 2. Aguardar inicializa\u00e7\u00e3o (30 segundos)\nsleep 30\n\n# 3. Executar migra\u00e7\u00f5es\npoetry run alembic upgrade head\n</code></pre>"},{"location":"installation/#6-verificar-instalacao","title":"6. Verificar Instala\u00e7\u00e3o","text":""},{"location":"installation/#executar-testes","title":"Executar Testes","text":"<pre><code># Executar todos os testes\npoetry run task test\n\n# Ou apenas verificar se a aplica\u00e7\u00e3o inicia\npoetry run task lint\n</code></pre>"},{"location":"installation/#iniciar-aplicacao","title":"Iniciar Aplica\u00e7\u00e3o","text":"<pre><code># Modo desenvolvimento\npoetry run task run\n\n# A aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em:\n# http://localhost:8000\n</code></pre>"},{"location":"installation/#verificar-endpoints","title":"Verificar Endpoints","text":"<pre><code># Health check\ncurl http://localhost:8000/health_check\n\n# Documenta\u00e7\u00e3o da API\n# http://localhost:8000/docs\n</code></pre>"},{"location":"installation/#instalacao-com-docker","title":"\ud83d\udc33 Instala\u00e7\u00e3o com Docker","text":""},{"location":"installation/#desenvolvimento-completo","title":"Desenvolvimento Completo","text":"<pre><code># Subir todos os servi\u00e7os\ndocker-compose up -d\n\n# Verificar logs\ndocker-compose logs -f\n\n# Executar migra\u00e7\u00f5es\ndocker-compose exec api poetry run alembic upgrade head\n</code></pre>"},{"location":"installation/#apenas-banco-de-dados","title":"Apenas Banco de Dados","text":"<pre><code># Subir apenas PostgreSQL\ndocker-compose up -d db\n\n# Verificar se est\u00e1 rodando\ndocker-compose ps\n</code></pre>"},{"location":"installation/#build-da-aplicacao","title":"Build da Aplica\u00e7\u00e3o","text":"<pre><code># Build da imagem\ndocker build -t car-api .\n\n# Executar container\ndocker run -p 8000:8000 --env-file .env car-api\n</code></pre>"},{"location":"installation/#comandos-uteis","title":"\ud83d\udccb Comandos \u00dateis","text":""},{"location":"installation/#poetry","title":"Poetry","text":"<pre><code># Adicionar nova depend\u00eancia\npoetry add fastapi\n\n# Adicionar depend\u00eancia de desenvolvimento\npoetry add --group dev pytest\n\n# Atualizar depend\u00eancias\npoetry update\n\n# Mostrar depend\u00eancias\npoetry show\n\n# Exportar requirements.txt\npoetry export -f requirements.txt --output requirements.txt\n</code></pre>"},{"location":"installation/#alembic-migracoes","title":"Alembic (Migra\u00e7\u00f5es)","text":"<pre><code># Criar nova migra\u00e7\u00e3o\npoetry run alembic revision --autogenerate -m \"descri\u00e7\u00e3o\"\n\n# Aplicar migra\u00e7\u00f5es\npoetry run alembic upgrade head\n\n# Reverter migra\u00e7\u00e3o\npoetry run alembic downgrade -1\n\n# Verificar status\npoetry run alembic current\n\n# Hist\u00f3rico de migra\u00e7\u00f5es\npoetry run alembic history\n</code></pre>"},{"location":"installation/#taskipy-tarefas","title":"Taskipy (Tarefas)","text":"<pre><code># Ver todas as tarefas dispon\u00edveis\npoetry run task --list\n\n# Executar tarefas\npoetry run task run      # Iniciar aplica\u00e7\u00e3o\npoetry run task test     # Executar testes\npoetry run task lint     # Verificar c\u00f3digo\npoetry run task format   # Formatar c\u00f3digo\npoetry run task docs     # Iniciar documenta\u00e7\u00e3o\n</code></pre>"},{"location":"installation/#solucao-de-problemas","title":"\ud83d\udd27 Solu\u00e7\u00e3o de Problemas","text":""},{"location":"installation/#erro-poetry-not-found","title":"Erro: \"poetry not found\"","text":"<pre><code># Reinstalar Poetry via pipx\npipx uninstall poetry\npipx install poetry\n\n# Verificar PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"installation/#erro-no-module-named-car_api","title":"Erro: \"No module named 'car_api'\"","text":"<pre><code># Verificar se est\u00e1 no ambiente correto\npoetry env info\n\n# Reinstalar em modo development\npoetry install\n</code></pre>"},{"location":"installation/#erro-de-migracao","title":"Erro de Migra\u00e7\u00e3o","text":"<pre><code># Verificar conex\u00e3o com banco\npoetry run python -c \"from car_api.core.database import engine; print('OK')\"\n\n# Resetar migra\u00e7\u00f5es (cuidado!)\nrm -rf migrations/versions/*.py\npoetry run alembic revision --autogenerate -m \"initial\"\npoetry run alembic upgrade head\n</code></pre>"},{"location":"installation/#erro-de-dependencias","title":"Erro de Depend\u00eancias","text":"<pre><code># Limpar cache do Poetry\npoetry cache clear . --all\n\n# Reinstalar depend\u00eancias\npoetry install --no-cache\n</code></pre>"},{"location":"installation/#porta-ja-em-uso","title":"Porta j\u00e1 em uso","text":"<pre><code># Verificar processo usando a porta\nlsof -i :8000\n\n# Matar processo\nkill -9 &lt;PID&gt;\n\n# Ou usar porta diferente\npoetry run fastapi dev car_api/app.py --port 8001\n</code></pre>"},{"location":"installation/#problemas-com-postgresql","title":"Problemas com PostgreSQL","text":"<pre><code># Verificar se est\u00e1 rodando\nsudo systemctl status postgresql\n\n# Reiniciar servi\u00e7o\nsudo systemctl restart postgresql\n\n# Verificar logs\nsudo journalctl -u postgresql\n\n# Testar conex\u00e3o\npsql -h localhost -U postgres -d car_api\n</code></pre>"},{"location":"installation/#verificacao-final","title":"\u2705 Verifica\u00e7\u00e3o Final","text":"<p>Execute este checklist para confirmar que tudo est\u00e1 funcionando:</p> <pre><code># 1. Verificar ambiente\npoetry env info\n\n# 2. Verificar depend\u00eancias\npoetry check\n\n# 3. Executar testes\npoetry run task test\n\n# 4. Verificar linting\npoetry run task lint\n\n# 5. Iniciar aplica\u00e7\u00e3o\npoetry run task run\n</code></pre> <p>Se todos os comandos executarem sem erro, sua instala\u00e7\u00e3o est\u00e1 completa! \ud83c\udf89</p>"},{"location":"installation/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o bem-sucedida:</p> <ol> <li>\ud83d\udcd6 Leia a Configura\u00e7\u00e3o do Projeto</li> <li>\ud83c\udfd7\ufe0f Entenda a Estrutura do Projeto</li> <li>\ud83d\ude80 Explore os API Endpoints</li> <li>\ud83e\uddea Execute os Testes</li> <li>\ud83d\udcbb Inicie o Desenvolvimento</li> </ol>"},{"location":"overview/","title":"Vis\u00e3o Geral do Projeto","text":""},{"location":"overview/#proposito","title":"\ud83c\udfaf Prop\u00f3sito","text":"<p>A Car API \u00e9 uma aplica\u00e7\u00e3o web RESTful moderna desenvolvida para gerenciar um sistema de carros e usu\u00e1rios. O projeto demonstra as melhores pr\u00e1ticas de desenvolvimento usando tecnologias Python modernas, incluindo FastAPI, SQLAlchemy 2.0 e autentica\u00e7\u00e3o JWT.</p>"},{"location":"overview/#principais-funcionalidades","title":"\u2728 Principais Funcionalidades","text":""},{"location":"overview/#gestao-de-usuarios","title":"\ud83d\udc65 Gest\u00e3o de Usu\u00e1rios","text":"<ul> <li>Registro de usu\u00e1rios com valida\u00e7\u00e3o de dados</li> <li>Autentica\u00e7\u00e3o segura com JWT (JSON Web Tokens)</li> <li>Gerenciamento de perfis de usu\u00e1rios</li> <li>Refresh de tokens para sess\u00f5es prolongadas</li> </ul>"},{"location":"overview/#gestao-de-carros","title":"\ud83d\ude97 Gest\u00e3o de Carros","text":"<ul> <li>CRUD completo para ve\u00edculos</li> <li>Informa\u00e7\u00f5es detalhadas: modelo, ano de fabrica\u00e7\u00e3o, ano do modelo, cor, combust\u00edvel, transmiss\u00e3o</li> <li>Gest\u00e3o de pre\u00e7os com precis\u00e3o decimal</li> <li>Controle de disponibilidade dos ve\u00edculos</li> <li>Associa\u00e7\u00e3o com propriet\u00e1rios (usu\u00e1rios)</li> </ul>"},{"location":"overview/#gestao-de-marcas","title":"\ud83c\udff7\ufe0f Gest\u00e3o de Marcas","text":"<ul> <li>Cadastro de marcas de ve\u00edculos</li> <li>Controle de ativa\u00e7\u00e3o/desativa\u00e7\u00e3o de marcas</li> <li>Descri\u00e7\u00f5es detalhadas das marcas</li> <li>Relacionamento com carros</li> </ul>"},{"location":"overview/#seguranca","title":"\ud83d\udd10 Seguran\u00e7a","text":"<ul> <li>Autentica\u00e7\u00e3o JWT com tokens seguros</li> <li>Hash de senhas usando Argon2</li> <li>Prote\u00e7\u00e3o de rotas com middleware de autentica\u00e7\u00e3o</li> <li>Valida\u00e7\u00e3o rigorosa de dados de entrada</li> </ul>"},{"location":"overview/#arquitetura-do-sistema","title":"\ud83c\udfd7\ufe0f Arquitetura do Sistema","text":""},{"location":"overview/#padrao-arquitetural","title":"Padr\u00e3o Arquitetural","text":"<p>O projeto segue uma arquitetura em camadas bem definida:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   API Layer     \u2502  \u2190 FastAPI Routers\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Business Logic  \u2502  \u2190 Service Layer (impl\u00edcito nos routers)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Data Access   \u2502  \u2190 SQLAlchemy Models\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Database      \u2502  \u2190 PostgreSQL/SQLite\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"overview/#principais-componentes","title":"Principais Componentes","text":"<ol> <li>FastAPI Application (<code>app.py</code>)</li> <li>Ponto de entrada da aplica\u00e7\u00e3o</li> <li> <p>Configura\u00e7\u00e3o de routers e middleware</p> </li> <li> <p>Core Modules (<code>core/</code>)</p> </li> <li>Database: Configura\u00e7\u00e3o e sess\u00f5es do banco</li> <li>Security: Fun\u00e7\u00f5es de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o</li> <li> <p>Settings: Configura\u00e7\u00f5es da aplica\u00e7\u00e3o</p> </li> <li> <p>Models (<code>models/</code>)</p> </li> <li>User: Modelo de usu\u00e1rios</li> <li>Car: Modelo de carros com relacionamentos</li> <li> <p>Base: Classe base para todos os modelos</p> </li> <li> <p>Schemas (<code>schemas/</code>)</p> </li> <li>Pydantic models para valida\u00e7\u00e3o de entrada e sa\u00edda</li> <li> <p>DTOs (Data Transfer Objects) da API</p> </li> <li> <p>Routers (<code>routers/</code>)</p> </li> <li>Auth: Endpoints de autentica\u00e7\u00e3o</li> <li>Users: CRUD de usu\u00e1rios</li> <li>Cars: CRUD de carros</li> <li>Brands: CRUD de marcas</li> </ol>"},{"location":"overview/#stack-tecnologica","title":"\ud83d\udee0\ufe0f Stack Tecnol\u00f3gica","text":""},{"location":"overview/#backend-framework","title":"Backend Framework","text":"<ul> <li>FastAPI: Framework web moderno e r\u00e1pido</li> <li>Python 3.13+: Linguagem de programa\u00e7\u00e3o</li> </ul>"},{"location":"overview/#banco-de-dados","title":"Banco de Dados","text":"<ul> <li>SQLAlchemy 2.0: ORM moderno com suporte async</li> <li>PostgreSQL: Banco principal (produ\u00e7\u00e3o)</li> <li>SQLite: Banco para desenvolvimento</li> <li>Alembic: Migra\u00e7\u00f5es de banco de dados</li> </ul>"},{"location":"overview/#autenticacao-seguranca","title":"Autentica\u00e7\u00e3o &amp; Seguran\u00e7a","text":"<ul> <li>PyJWT: Tokens JWT</li> <li>PWDLib[argon2]: Hash seguro de senhas</li> <li>Pydantic: Valida\u00e7\u00e3o de dados</li> </ul>"},{"location":"overview/#desenvolvimento","title":"Desenvolvimento","text":"<ul> <li>Poetry: Gerenciamento de depend\u00eancias</li> <li>Pytest: Framework de testes</li> <li>Ruff: Linter e formatador</li> <li>Taskipy: Automa\u00e7\u00e3o de tarefas</li> </ul>"},{"location":"overview/#devops","title":"DevOps","text":"<ul> <li>Docker: Containeriza\u00e7\u00e3o</li> <li>Docker Compose: Orquestra\u00e7\u00e3o de containers</li> <li>MkDocs: Documenta\u00e7\u00e3o</li> </ul>"},{"location":"overview/#diferenciais-do-projeto","title":"\ud83c\udf1f Diferenciais do Projeto","text":""},{"location":"overview/#codigo-moderno","title":"C\u00f3digo Moderno","text":"<ul> <li>Type Hints completos em todo o c\u00f3digo</li> <li>Async/Await para opera\u00e7\u00f5es I/O</li> <li>SQLAlchemy 2.0 com mapped columns</li> <li>Pydantic V2 para valida\u00e7\u00e3o</li> </ul>"},{"location":"overview/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ul> <li>Separa\u00e7\u00e3o de responsabilidades clara</li> <li>Inje\u00e7\u00e3o de depend\u00eancias com FastAPI</li> <li>Tratamento de erros consistente</li> <li>Documenta\u00e7\u00e3o autom\u00e1tica com OpenAPI</li> </ul>"},{"location":"overview/#qualidade-de-codigo","title":"Qualidade de C\u00f3digo","text":"<ul> <li>Testes automatizados com alta cobertura</li> <li>Linting autom\u00e1tico com Ruff</li> <li>Formata\u00e7\u00e3o consistente de c\u00f3digo</li> <li>CI/CD ready com tasks automatizadas</li> </ul>"},{"location":"overview/#casos-de-uso","title":"\ud83c\udfaf Casos de Uso","text":""},{"location":"overview/#para-desenvolvedores","title":"Para Desenvolvedores","text":"<ul> <li>Template de projeto FastAPI moderno</li> <li>Refer\u00eancia de boas pr\u00e1ticas Python</li> <li>Exemplo de autentica\u00e7\u00e3o JWT</li> <li>Estrutura de projeto escal\u00e1vel</li> </ul>"},{"location":"overview/#para-aprendizado","title":"Para Aprendizado","text":"<ul> <li>API REST completa com CRUD</li> <li>Relacionamentos de banco complexos</li> <li>Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o</li> <li>Testes automatizados</li> </ul>"},{"location":"overview/#para-producao","title":"Para Produ\u00e7\u00e3o","text":"<ul> <li>Sistema de gest\u00e3o de frotas</li> <li>Base para marketplace de carros</li> <li>API para aplicativos m\u00f3veis</li> <li>Microservi\u00e7o de ve\u00edculos</li> </ul>"},{"location":"overview/#metricas-do-projeto","title":"\ud83d\udcca M\u00e9tricas do Projeto","text":"<ul> <li>Linguagem: Python 3.13+</li> <li>Framework: FastAPI</li> <li>Linhas de c\u00f3digo: ~1000+ linhas</li> <li>Cobertura de testes: 90%+</li> <li>Depend\u00eancias: 15+ bibliotecas</li> <li>Endpoints: 15+ rotas API</li> </ul>"},{"location":"prerequisites/","title":"Pr\u00e9-requisitos","text":""},{"location":"prerequisites/#python","title":"\ud83d\udc0d Python","text":""},{"location":"prerequisites/#versao-necessaria","title":"Vers\u00e3o Necess\u00e1ria","text":"<ul> <li>Python 3.13 ou superior</li> </ul> <p>O projeto utiliza recursos modernos do Python, incluindo: - Type hints avan\u00e7ados - Pattern matching (match/case) - Melhorias de performance - Novos recursos de async/await</p>"},{"location":"prerequisites/#verificar-versao","title":"Verificar Vers\u00e3o","text":"<pre><code>python --version\n# ou\npython3 --version\n</code></pre>"},{"location":"prerequisites/#instalacao-do-python","title":"Instala\u00e7\u00e3o do Python","text":""},{"location":"prerequisites/#linux","title":"\ud83d\udc27 Linux","text":"<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3.13 python3.13-venv python3.13-dev\n\n# Fedora/CentOS/RHEL\nsudo dnf install python3.13 python3.13-venv python3.13-devel\n\n# Arch Linux\nsudo pacman -S python\n</code></pre>"},{"location":"prerequisites/#macos","title":"\ud83c\udf4e macOS","text":"<pre><code># Usando Homebrew (recomendado)\nbrew install python@3.13\n\n# Ou baixar do site oficial\n# https://www.python.org/downloads/macos/\n</code></pre>"},{"location":"prerequisites/#windows","title":"\ud83e\ude9f Windows","text":"<ol> <li>Baixe do site oficial</li> <li>Execute o instalador</li> <li>\u2705 IMPORTANTE: Marque \"Add Python to PATH\"</li> </ol>"},{"location":"prerequisites/#gerenciador-de-pacotes","title":"\ud83d\udce6 Gerenciador de Pacotes","text":""},{"location":"prerequisites/#pipx-recomendado","title":"pipx (Recomendado)","text":"<p>O pipx \u00e9 usado para instalar ferramentas Python em ambientes isolados.</p>"},{"location":"prerequisites/#instalacao-do-pipx","title":"Instala\u00e7\u00e3o do pipx","text":"<p>Linux: <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\n</code></pre></p> <p>macOS: <pre><code>brew install pipx\npipx ensurepath\n</code></pre></p> <p>Windows: <pre><code>python -m pip install --user pipx\npython -m pipx ensurepath\n</code></pre></p>"},{"location":"prerequisites/#apos-a-instalacao","title":"Ap\u00f3s a instala\u00e7\u00e3o","text":"<p>Reinicie o terminal ou execute: <pre><code># Linux\nsource ~/.bashrc\n\n# macOS com zsh\nsource ~/.zshrc\n</code></pre></p>"},{"location":"prerequisites/#poetry","title":"Poetry","text":"<p>O Poetry \u00e9 usado para gerenciamento de depend\u00eancias e ambientes virtuais.</p>"},{"location":"prerequisites/#instalacao-via-pipx","title":"Instala\u00e7\u00e3o via pipx","text":"<pre><code>pipx install poetry\n</code></pre>"},{"location":"prerequisites/#verificar-instalacao","title":"Verificar instala\u00e7\u00e3o","text":"<pre><code>poetry --version\n</code></pre>"},{"location":"prerequisites/#configuracao-recomendada","title":"Configura\u00e7\u00e3o recomendada","text":"<pre><code># Criar .venv na pasta do projeto\npoetry config virtualenvs.in-project true\n\n# Verificar configura\u00e7\u00e3o\npoetry config --list\n</code></pre>"},{"location":"prerequisites/#banco-de-dados","title":"\ud83d\uddc3\ufe0f Banco de Dados","text":""},{"location":"prerequisites/#desenvolvimento-sqlite","title":"Desenvolvimento (SQLite)","text":"<ul> <li>Inclu\u00eddo no Python: N\u00e3o requer instala\u00e7\u00e3o adicional</li> <li>Arquivo local: <code>car.db</code> criado automaticamente</li> </ul>"},{"location":"prerequisites/#producao-postgresql","title":"Produ\u00e7\u00e3o (PostgreSQL)","text":""},{"location":"prerequisites/#linux_1","title":"\ud83d\udc27 Linux","text":"<pre><code># Ubuntu/Debian\nsudo apt install postgresql postgresql-contrib\n\n# Fedora/CentOS/RHEL\nsudo dnf install postgresql postgresql-server postgresql-contrib\n\n# Arch Linux\nsudo pacman -S postgresql\n</code></pre>"},{"location":"prerequisites/#macos_1","title":"\ud83c\udf4e macOS","text":"<pre><code># Homebrew\nbrew install postgresql\n\n# Ou usando Postgres.app\n# https://postgresapp.com/\n</code></pre>"},{"location":"prerequisites/#windows_1","title":"\ud83e\ude9f Windows","text":"<ol> <li>Baixe do site oficial</li> <li>Execute o instalador</li> <li>Configure usu\u00e1rio e senha</li> </ol>"},{"location":"prerequisites/#docker-alternativa","title":"Docker (Alternativa)","text":"<pre><code># PostgreSQL via Docker\ndocker run --name postgres-car-api \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -e POSTGRES_DB=car_api \\\n  -p 5432:5432 \\\n  -d postgres:15\n</code></pre>"},{"location":"prerequisites/#ferramentas-de-desenvolvimento","title":"\ud83d\udd27 Ferramentas de Desenvolvimento","text":""},{"location":"prerequisites/#git","title":"Git","text":"<pre><code># Linux\nsudo apt install git  # Ubuntu/Debian\nsudo dnf install git  # Fedora/CentOS/RHEL\n\n# macOS\nbrew install git\n\n# Windows\n# Baixar de: https://git-scm.com/download/win\n</code></pre>"},{"location":"prerequisites/#editoride-opcional","title":"Editor/IDE (Opcional)","text":"<p>Editores recomendados: - VS Code com extens\u00f5es Python - PyCharm (Community ou Professional) - Vim/Neovim com plugins Python - Sublime Text com Package Control</p>"},{"location":"prerequisites/#docker-opcional","title":"Docker (Opcional)","text":"<p>Para desenvolvimento com containers:</p> <pre><code># Linux\nsudo apt install docker.io docker-compose  # Ubuntu/Debian\nsudo dnf install docker docker-compose     # Fedora/CentOS/RHEL\n\n# macOS\nbrew install docker docker-compose\n\n# Windows\n# Baixar Docker Desktop: https://www.docker.com/products/docker-desktop\n</code></pre>"},{"location":"prerequisites/#variaveis-de-ambiente","title":"\ud83c\udf10 Vari\u00e1veis de Ambiente","text":""},{"location":"prerequisites/#arquivo-env","title":"Arquivo .env","text":"<p>O projeto requer um arquivo <code>.env</code> com as seguintes vari\u00e1veis:</p> <pre><code># Banco de Dados\nDATABASE_URL='postgresql+psycopg://user:password@localhost:5432/dbname'\n\n# JWT (altere para sua chave secreta)\nJWT_SECRET_KEY='sua-chave-secreta-super-forte'\nJWT_ALGORITHM='HS256'\nJWT_EXPIRATION_MINUTES=30\n</code></pre>"},{"location":"prerequisites/#gerar-chave-jwt","title":"Gerar Chave JWT","text":"<pre><code># Usando Python\npython -c \"import secrets; print(secrets.token_urlsafe(64))\"\n\n# Usando OpenSSL\nopenssl rand -base64 64\n</code></pre>"},{"location":"prerequisites/#verificacao-dos-pre-requisitos","title":"\u2705 Verifica\u00e7\u00e3o dos Pr\u00e9-requisitos","text":"<p>Execute este script para verificar se tudo est\u00e1 instalado:</p> <pre><code>#!/bin/bash\n\necho \"\ud83d\udd0d Verificando pr\u00e9-requisitos...\"\n\n# Python\nif command -v python3 &amp;&gt; /dev/null; then\n    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)\n    echo \"\u2705 Python: $PYTHON_VERSION\"\nelse\n    echo \"\u274c Python n\u00e3o encontrado\"\nfi\n\n# Poetry\nif command -v poetry &amp;&gt; /dev/null; then\n    POETRY_VERSION=$(poetry --version | cut -d' ' -f3)\n    echo \"\u2705 Poetry: $POETRY_VERSION\"\nelse\n    echo \"\u274c Poetry n\u00e3o encontrado\"\nfi\n\n# Git\nif command -v git &amp;&gt; /dev/null; then\n    GIT_VERSION=$(git --version | cut -d' ' -f3)\n    echo \"\u2705 Git: $GIT_VERSION\"\nelse\n    echo \"\u274c Git n\u00e3o encontrado\"\nfi\n\n# PostgreSQL (opcional)\nif command -v psql &amp;&gt; /dev/null; then\n    PSQL_VERSION=$(psql --version | cut -d' ' -f3)\n    echo \"\u2705 PostgreSQL: $PSQL_VERSION\"\nelse\n    echo \"\u26a0\ufe0f  PostgreSQL n\u00e3o encontrado (opcional)\"\nfi\n\necho \"\ud83c\udf89 Verifica\u00e7\u00e3o conclu\u00edda!\"\n</code></pre>"},{"location":"prerequisites/#solucao-de-problemas","title":"\ud83d\udd27 Solu\u00e7\u00e3o de Problemas","text":""},{"location":"prerequisites/#python-nao-encontrado","title":"Python n\u00e3o encontrado","text":"<pre><code># Verificar se est\u00e1 no PATH\necho $PATH\n\n# Criar alias (tempor\u00e1rio)\nalias python=python3\n\n# Adicionar ao .bashrc/.zshrc (permanente)\necho 'alias python=python3' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"prerequisites/#poetry-nao-funciona","title":"Poetry n\u00e3o funciona","text":"<pre><code># Reinstalar via pipx\npipx uninstall poetry\npipx install poetry\n\n# Verificar PATH\npoetry config --list\n</code></pre>"},{"location":"prerequisites/#problemas-de-permissao-linux","title":"Problemas de permiss\u00e3o (Linux)","text":"<pre><code># Adicionar usu\u00e1rio ao grupo docker\nsudo usermod -aG docker $USER\n\n# Relogar ou executar\nnewgrp docker\n</code></pre>"},{"location":"prerequisites/#postgresql-nao-conecta","title":"PostgreSQL n\u00e3o conecta","text":"<pre><code># Verificar se est\u00e1 rodando\nsudo systemctl status postgresql\n\n# Iniciar servi\u00e7o\nsudo systemctl start postgresql\n\n# Criar usu\u00e1rio/banco\nsudo -u postgres createuser --interactive\nsudo -u postgres createdb car_api\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#historico-de-versoes","title":"\ud83d\udcdd Hist\u00f3rico de Vers\u00f5es","text":"<p>Todas as mudan\u00e7as not\u00e1veis neste projeto ser\u00e3o documentadas neste arquivo.</p> <p>O formato \u00e9 baseado em Keep a Changelog, e este projeto segue Semantic Versioning.</p>"},{"location":"release-notes/#unreleased","title":"[Unreleased]","text":""},{"location":"release-notes/#added","title":"\ud83d\ude80 Added","text":"<ul> <li>Sistema de avalia\u00e7\u00f5es de carros (em desenvolvimento)</li> <li>Upload de imagens de carros (planejado)</li> <li>Filtros avan\u00e7ados de busca (planejado)</li> </ul>"},{"location":"release-notes/#changed","title":"\ud83d\udd27 Changed","text":"<ul> <li>Melhorias na documenta\u00e7\u00e3o da API</li> </ul>"},{"location":"release-notes/#fixed","title":"\ud83d\udc1b Fixed","text":"<ul> <li>Corre\u00e7\u00f5es menores na valida\u00e7\u00e3o de dados</li> </ul>"},{"location":"release-notes/#010-2023-12-01","title":"[0.1.0] - 2023-12-01","text":""},{"location":"release-notes/#primeira-release","title":"\ud83c\udf89 Primeira Release","text":""},{"location":"release-notes/#added_1","title":"\ud83d\ude80 Added","text":"<p>API Core: - \u2728 API REST completa com FastAPI - \ud83d\udd10 Sistema de autentica\u00e7\u00e3o JWT - \ud83d\udc64 CRUD completo de usu\u00e1rios - \ud83c\udff7\ufe0f CRUD completo de marcas de carros - \ud83d\ude97 CRUD completo de carros - \ud83d\udcca Pagina\u00e7\u00e3o e filtros avan\u00e7ados - \ud83d\udee1\ufe0f Middleware de seguran\u00e7a (CORS, valida\u00e7\u00e3o)</p> <p>Modelos de Dados: - \ud83d\udcc4 Usu\u00e1rios com autentica\u00e7\u00e3o segura - \ud83c\udff7\ufe0f Marcas de ve\u00edculos com controle de ativa\u00e7\u00e3o - \ud83d\ude97 Carros com informa\u00e7\u00f5es detalhadas - \ud83d\udd17 Relacionamentos entre usu\u00e1rios, marcas e carros - \u26a1 Timestamps autom\u00e1ticos (created_at, updated_at)</p> <p>Valida\u00e7\u00e3o e Schemas: - \ud83d\udcdd Schemas Pydantic para valida\u00e7\u00e3o rigorosa - \ud83d\udd0d Valida\u00e7\u00e3o de placas brasileiras (formato antigo e Mercosul) - \ud83d\udcb0 Valida\u00e7\u00e3o de pre\u00e7os com precis\u00e3o decimal - \ud83d\udce7 Valida\u00e7\u00e3o de emails e usernames \u00fanicos - \ud83d\udd10 Valida\u00e7\u00e3o de for\u00e7a de senha</p> <p>Seguran\u00e7a: - \ud83d\udd12 Hash de senhas com Argon2 - \ud83d\udd11 Tokens JWT com expira\u00e7\u00e3o configur\u00e1vel - \ud83d\udee1\ufe0f Autoriza\u00e7\u00e3o granular (usu\u00e1rios s\u00f3 acessam pr\u00f3prios recursos) - \ud83d\udeab Prote\u00e7\u00e3o contra ataques comuns (SQL Injection, XSS) - \u23f1\ufe0f Rate limiting b\u00e1sico</p> <p>Banco de Dados: - \ud83d\uddc3\ufe0f SQLAlchemy 2.0 com suporte async - \ud83d\udd04 Migra\u00e7\u00f5es com Alembic - \ud83d\udcca Suporte a SQLite (desenvolvimento) e PostgreSQL (produ\u00e7\u00e3o) - \ud83c\udfd7\ufe0f Relacionamentos complexos entre entidades</p> <p>Testes: - \ud83e\uddea Suite completa de testes (unit, integration, e2e) - \ud83d\udcca Cobertura de testes &gt; 90% - \ud83d\udd27 Fixtures para dados de teste - \u26a1 Testes ass\u00edncronos com pytest-asyncio</p> <p>Documenta\u00e7\u00e3o: - \ud83d\udcda Documenta\u00e7\u00e3o completa em Markdown - \ud83d\udcd6 Swagger UI integrado (<code>/docs</code>) - \ud83d\udcc4 ReDoc alternativo (<code>/redoc</code>) - \ud83c\udfd7\ufe0f Diagramas de arquitetura com Mermaid - \ud83d\udd17 Guias de instala\u00e7\u00e3o, desenvolvimento e deploy</p> <p>DevOps: - \ud83d\udc33 Containeriza\u00e7\u00e3o com Docker - \ud83d\udd27 Docker Compose para desenvolvimento - \ud83d\udccb Scripts de automa\u00e7\u00e3o com Taskipy - \ud83c\udfaf Configura\u00e7\u00e3o de CI/CD com GitHub Actions - \ud83d\ude80 Suporte a deploy com Kubernetes</p>"},{"location":"release-notes/#endpoints-implementados","title":"\ud83d\udccb Endpoints Implementados","text":"<p>Autentica\u00e7\u00e3o (<code>/api/v1/auth</code>): - <code>POST /token</code> - Gerar token de acesso - <code>POST /refresh_token</code> - Renovar token</p> <p>Usu\u00e1rios (<code>/api/v1/users</code>): - <code>POST /</code> - Registrar usu\u00e1rio - <code>GET /</code> - Listar usu\u00e1rios (com pagina\u00e7\u00e3o e busca) - <code>GET /{user_id}</code> - Buscar usu\u00e1rio por ID - <code>PUT /{user_id}</code> - Atualizar usu\u00e1rio - <code>DELETE /{user_id}</code> - Deletar usu\u00e1rio</p> <p>Marcas (<code>/api/v1/brands</code>): - <code>POST /</code> - Criar marca - <code>GET /</code> - Listar marcas (com filtros) - <code>GET /{brand_id}</code> - Buscar marca por ID - <code>PUT /{brand_id}</code> - Atualizar marca - <code>DELETE /{brand_id}</code> - Deletar marca (com prote\u00e7\u00e3o)</p> <p>Carros (<code>/api/v1/cars</code>): - <code>POST /</code> - Criar carro - <code>GET /</code> - Listar carros (com filtros avan\u00e7ados) - <code>GET /{car_id}</code> - Buscar carro por ID - <code>PUT /{car_id}</code> - Atualizar carro - <code>DELETE /{car_id}</code> - Deletar carro</p> <p>Utilit\u00e1rios: - <code>GET /health_check</code> - Verificar status da API</p>"},{"location":"release-notes/#tecnologias-utilizadas","title":"\ud83d\udd27 Tecnologias Utilizadas","text":"<p>Backend: - FastAPI 0.116.1 - Framework web moderno - Python 3.13+ - Linguagem de programa\u00e7\u00e3o - SQLAlchemy 2.0.42 - ORM com suporte async - Alembic 1.16.4 - Migra\u00e7\u00f5es de banco - Pydantic - Valida\u00e7\u00e3o de dados - PWDLib[argon2] - Hash seguro de senhas - PyJWT - Tokens JWT</p> <p>Banco de Dados: - PostgreSQL 15 - Banco principal (produ\u00e7\u00e3o) - SQLite - Banco para desenvolvimento - aiosqlite - Driver SQLite ass\u00edncrono - psycopg - Driver PostgreSQL ass\u00edncrono</p> <p>Desenvolvimento: - Poetry - Gerenciamento de depend\u00eancias - Pytest - Framework de testes - Ruff - Linter e formatador - Taskipy - Automa\u00e7\u00e3o de tarefas - pre-commit - Git hooks</p> <p>DevOps: - Docker - Containeriza\u00e7\u00e3o - Docker Compose - Orquestra\u00e7\u00e3o - GitHub Actions - CI/CD - MkDocs - Documenta\u00e7\u00e3o</p>"},{"location":"release-notes/#estatisticas-da-release","title":"\ud83d\udcca Estat\u00edsticas da Release","text":"<ul> <li>\ud83d\udcc4 Linhas de c\u00f3digo: ~1.500</li> <li>\ud83e\uddea Testes: 45+ testes</li> <li>\ud83d\udcca Cobertura: 92%</li> <li>\ud83d\udd17 Endpoints: 15</li> <li>\ud83d\udcda Documenta\u00e7\u00e3o: 12 arquivos</li> <li>\ud83d\udc33 Docker: Multi-stage build</li> <li>\u26a1 Performance: &lt; 200ms por request</li> </ul>"},{"location":"release-notes/#casos-de-uso-suportados","title":"\ud83c\udfaf Casos de Uso Suportados","text":"<p>Para Desenvolvedores: - \u2705 Template de API FastAPI moderna - \u2705 Refer\u00eancia de boas pr\u00e1ticas Python - \u2705 Exemplo de autentica\u00e7\u00e3o JWT - \u2705 Estrutura de projeto escal\u00e1vel</p> <p>Para Aprendizado: - \u2705 API REST completa com CRUD - \u2705 Relacionamentos de banco complexos - \u2705 Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o - \u2705 Testes automatizados</p> <p>Para Produ\u00e7\u00e3o: - \u2705 Sistema de gest\u00e3o de frotas - \u2705 Base para marketplace de carros - \u2705 API para aplicativos m\u00f3veis - \u2705 Microservi\u00e7o de ve\u00edculos</p>"},{"location":"release-notes/#recursos-de-seguranca","title":"\ud83d\udd10 Recursos de Seguran\u00e7a","text":"<ul> <li>\ud83d\udd12 Autentica\u00e7\u00e3o JWT com tokens seguros</li> <li>\ud83d\udd11 Hash Argon2 para senhas</li> <li>\ud83d\udee1\ufe0f Autoriza\u00e7\u00e3o granular por recurso</li> <li>\ud83d\udeab Prote\u00e7\u00e3o SQL Injection com ORM</li> <li>\u23f1\ufe0f Rate limiting configur\u00e1vel</li> <li>\ud83d\udd10 Valida\u00e7\u00e3o rigorosa de entrada</li> <li>\ud83d\udee1\ufe0f Headers de seguran\u00e7a apropriados</li> </ul>"},{"location":"release-notes/#performance","title":"\ud83d\udcc8 Performance","text":"<ul> <li>\u26a1 Response time: &lt; 200ms m\u00e9dio</li> <li>\ud83d\udd04 Concorr\u00eancia: Suporte async nativo</li> <li>\ud83d\udcca Throughput: 1000+ req/s</li> <li>\ud83d\udcbe Mem\u00f3ria: &lt; 100MB em idle</li> <li>\ud83d\uddc3\ufe0f Database: Connection pooling</li> <li>\ud83c\udfaf Otimiza\u00e7\u00f5es: Eager loading de relacionamentos</li> </ul>"},{"location":"release-notes/#qualidade-de-codigo","title":"\ud83e\uddea Qualidade de C\u00f3digo","text":"<ul> <li>\u2705 Linting: Ruff configurado</li> <li>\ud83d\udccf Formata\u00e7\u00e3o: Consistente em todo projeto</li> <li>\ud83d\udd0d Type hints: 100% do c\u00f3digo</li> <li>\ud83d\udcdd Docstrings: Fun\u00e7\u00f5es p\u00fablicas documentadas</li> <li>\ud83e\uddea Testes: Cobertura &gt; 90%</li> <li>\ud83d\udd04 CI/CD: Pipeline automatizado</li> </ul>"},{"location":"release-notes/#distribuicao","title":"\ud83d\udce6 Distribui\u00e7\u00e3o","text":"<p>Docker Hub: <pre><code>docker pull car-api:0.1.0\n</code></pre></p> <p>PyPI (planejado): <pre><code>pip install car-api\n</code></pre></p> <p>GitHub Releases: - \u2705 Source code (zip/tar.gz) - \u2705 Docker images - \u2705 Documentation bundle</p>"},{"location":"release-notes/#problemas-conhecidos","title":"\ud83d\udc1b Problemas Conhecidos","text":"<ul> <li>\u26a0\ufe0f Rate limiting ainda n\u00e3o implementado para produ\u00e7\u00e3o</li> <li>\u26a0\ufe0f Upload de arquivos n\u00e3o suportado</li> <li>\u26a0\ufe0f Notifica\u00e7\u00f5es por email em desenvolvimento</li> <li>\u26a0\ufe0f Logs estruturados planejados para v0.2.0</li> </ul>"},{"location":"release-notes/#migracoes","title":"\ud83d\udd04 Migra\u00e7\u00f5es","text":"<p>Primeira instala\u00e7\u00e3o: <pre><code>poetry run alembic upgrade head\n</code></pre></p> <p>Schema inicial inclui: - Tabela <code>users</code> com autentica\u00e7\u00e3o - Tabela <code>brands</code> para marcas - Tabela <code>cars</code> com relacionamentos - \u00cdndices otimizados para performance</p>"},{"location":"release-notes/#como-comecar","title":"\ud83d\ude80 Como Come\u00e7ar","text":"<pre><code># Clone do reposit\u00f3rio\ngit clone https://github.com/pycodebr/car_api.git\ncd car_api\n\n# Instalar depend\u00eancias\npoetry install\n\n# Configurar banco\ncp .env.example .env\npoetry run alembic upgrade head\n\n# Executar aplica\u00e7\u00e3o\npoetry run task run\n\n# Acessar documenta\u00e7\u00e3o\nopen http://localhost:8000/docs\n</code></pre>"},{"location":"release-notes/#suporte","title":"\ud83d\udcde Suporte","text":"<p>Documenta\u00e7\u00e3o: - \ud83d\udcda Documenta\u00e7\u00e3o completa - \ud83d\udd17 API Reference - \ud83c\udfd7\ufe0f Guia de desenvolvimento</p> <p>Comunidade: - \ud83d\udc1b Reportar bugs - \ud83d\udca1 Sugerir features - \ud83d\udce7 Email de contato</p>"},{"location":"release-notes/#agradecimentos","title":"\ud83d\ude4f Agradecimentos","text":"<p>Contribuidores: - @pycodebr - Desenvolvimento inicial e arquitetura - Comunidade Python Brasil - Feedback e sugest\u00f5es - FastAPI Team - Framework excepcional - SQLAlchemy Team - ORM robusto</p> <p>Inspira\u00e7\u00f5es: - FastAPI Best Practices - Awesome FastAPI - Real World Example Apps</p>"},{"location":"release-notes/#proximos-passos-v020","title":"\ud83c\udfaf Pr\u00f3ximos Passos (v0.2.0)","text":"<p>Planejado para Q1 2024: - \ud83c\udf1f Sistema de avalia\u00e7\u00f5es de carros - \ud83d\udcc1 Upload de imagens - \ud83d\udce7 Notifica\u00e7\u00f5es por email - \ud83d\udcca Dashboard administrativo - \ud83d\udd0d Busca full-text - \ud83c\udf0d Internacionaliza\u00e7\u00e3o (i18n)</p> <p>Melhorias T\u00e9cnicas: - \u26a1 Cache com Redis - \ud83d\udcc8 M\u00e9tricas com Prometheus - \ud83d\udd0d Logs estruturados - \ud83d\udee1\ufe0f Rate limiting avan\u00e7ado - \ud83d\udd04 Health checks detalhados</p>"},{"location":"release-notes/#formato-de-changelog","title":"\ud83d\udccb Formato de Changelog","text":""},{"location":"release-notes/#tipos-de-mudancas","title":"Tipos de Mudan\u00e7as","text":"<ul> <li>\ud83d\ude80 Added - Novas funcionalidades</li> <li>\ud83d\udd27 Changed - Mudan\u00e7as em funcionalidades existentes</li> <li>\ud83d\uddd1\ufe0f Deprecated - Funcionalidades que ser\u00e3o removidas</li> <li>\ud83d\udeab Removed - Funcionalidades removidas</li> <li>\ud83d\udc1b Fixed - Corre\u00e7\u00f5es de bugs</li> <li>\ud83d\udd12 Security - Corre\u00e7\u00f5es de seguran\u00e7a</li> </ul>"},{"location":"release-notes/#versionamento","title":"Versionamento","text":"<p>Seguimos Semantic Versioning:</p> <ul> <li>MAJOR (X.y.z) - Breaking changes</li> <li>MINOR (x.Y.z) - Novas features (backward compatible)</li> <li>PATCH (x.y.Z) - Bug fixes (backward compatible)</li> </ul>"},{"location":"release-notes/#links","title":"Links","text":"<ul> <li>Keep a Changelog</li> <li>Semantic Versioning</li> <li>Conventional Commits</li> </ul> <p>Para ver todas as releases: GitHub Releases</p>"},{"location":"structure/","title":"Estrutura do Projeto","text":""},{"location":"structure/#visao-geral-da-estrutura","title":"\ud83d\udcc1 Vis\u00e3o Geral da Estrutura","text":"<pre><code>car_api/\n\u251c\u2500\u2500 car_api/                    # \ud83d\udce6 C\u00f3digo principal da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 app.py                  # \ud83d\ude80 Arquivo principal do FastAPI\n\u2502   \u251c\u2500\u2500 core/                   # \u2699\ufe0f Funcionalidades centrais\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 database.py         # \ud83d\uddc3\ufe0f Configura\u00e7\u00e3o do banco de dados\n\u2502   \u2502   \u251c\u2500\u2500 security.py         # \ud83d\udd10 Fun\u00e7\u00f5es de seguran\u00e7a e JWT\n\u2502   \u2502   \u2514\u2500\u2500 settings.py         # \ud83d\udccb Configura\u00e7\u00f5es da aplica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 models/                 # \ud83c\udfd7\ufe0f Modelos SQLAlchemy\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py             # \ud83d\udcc4 Classe base para modelos\n\u2502   \u2502   \u251c\u2500\u2500 cars.py             # \ud83d\ude97 Modelos de carros e marcas\n\u2502   \u2502   \u2514\u2500\u2500 users.py            # \ud83d\udc64 Modelo de usu\u00e1rios\n\u2502   \u251c\u2500\u2500 routers/                # \ud83d\udee3\ufe0f Rotas da API\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 auth.py             # \ud83d\udd11 Rotas de autentica\u00e7\u00e3o\n\u2502   \u2502   \u251c\u2500\u2500 brands.py           # \ud83c\udff7\ufe0f Rotas de marcas\n\u2502   \u2502   \u251c\u2500\u2500 cars.py             # \ud83d\ude97 Rotas de carros\n\u2502   \u2502   \u2514\u2500\u2500 users.py            # \ud83d\udc64 Rotas de usu\u00e1rios\n\u2502   \u2514\u2500\u2500 schemas/                # \ud83d\udcdd Esquemas Pydantic\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 auth.py             # \ud83d\udd11 Esquemas de autentica\u00e7\u00e3o\n\u2502       \u251c\u2500\u2500 brands.py           # \ud83c\udff7\ufe0f Esquemas de marcas\n\u2502       \u251c\u2500\u2500 cars.py             # \ud83d\ude97 Esquemas de carros\n\u2502       \u2514\u2500\u2500 users.py            # \ud83d\udc64 Esquemas de usu\u00e1rios\n\u251c\u2500\u2500 docs/                       # \ud83d\udcda Documenta\u00e7\u00e3o do projeto\n\u2502   \u251c\u2500\u2500 index.md                # \ud83c\udfe0 P\u00e1gina inicial da documenta\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 overview.md             # \ud83d\udcd6 Vis\u00e3o geral\n\u2502   \u251c\u2500\u2500 prerequisites.md        # \ud83d\udd27 Pr\u00e9-requisitos\n\u2502   \u251c\u2500\u2500 installation.md         # \ud83d\udcbf Instala\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 configuration.md        # \u2699\ufe0f Configura\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 guidelines.md           # \ud83d\udccf Guidelines e padr\u00f5es\n\u2502   \u251c\u2500\u2500 structure.md            # \ud83d\udcc1 Este arquivo\n\u2502   \u2514\u2500\u2500 ...                     # \ud83d\udcc4 Outros arquivos de documenta\u00e7\u00e3o\n\u251c\u2500\u2500 migrations/                 # \ud83d\udd04 Migra\u00e7\u00f5es do Alembic\n\u2502   \u251c\u2500\u2500 env.py                  # \ud83c\udf0d Configura\u00e7\u00e3o do ambiente Alembic\n\u2502   \u2514\u2500\u2500 versions/               # \ud83d\udcc5 Vers\u00f5es das migra\u00e7\u00f5es\n\u2502       \u2514\u2500\u2500 *.py                # \ud83d\udcc4 Arquivos de migra\u00e7\u00e3o\n\u251c\u2500\u2500 tests/                      # \ud83e\uddea Testes automatizados\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py             # \u2699\ufe0f Configura\u00e7\u00f5es dos testes\n\u2502   \u251c\u2500\u2500 test_auth.py            # \ud83d\udd11 Testes de autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 test_brands.py          # \ud83c\udff7\ufe0f Testes de marcas\n\u2502   \u251c\u2500\u2500 test_cars.py            # \ud83d\ude97 Testes de carros\n\u2502   \u251c\u2500\u2500 test_db.py              # \ud83d\uddc3\ufe0f Testes de banco de dados\n\u2502   \u2514\u2500\u2500 test_users.py           # \ud83d\udc64 Testes de usu\u00e1rios\n\u251c\u2500\u2500 .env                        # \ud83d\udd10 Vari\u00e1veis de ambiente (local)\n\u251c\u2500\u2500 .env.example                # \ud83d\udccb Exemplo de vari\u00e1veis de ambiente\n\u251c\u2500\u2500 alembic.ini                 # \u2699\ufe0f Configura\u00e7\u00e3o do Alembic\n\u251c\u2500\u2500 docker-compose.yml          # \ud83d\udc33 Configura\u00e7\u00e3o Docker Compose\n\u251c\u2500\u2500 Dockerfile                  # \ud83d\udc33 Imagem Docker da aplica\u00e7\u00e3o\n\u251c\u2500\u2500 Dockerfile.mkdocs           # \ud83d\udcda Imagem Docker para documenta\u00e7\u00e3o\n\u251c\u2500\u2500 poetry.lock                 # \ud83d\udd12 Lock file do Poetry\n\u251c\u2500\u2500 pyproject.toml              # \ud83d\udce6 Configura\u00e7\u00e3o do projeto\n\u251c\u2500\u2500 README.md                   # \ud83d\udcd6 Documenta\u00e7\u00e3o b\u00e1sica\n\u2514\u2500\u2500 requirements.txt            # \ud83d\udccb Depend\u00eancias (gerado pelo Poetry)\n</code></pre>"},{"location":"structure/#detalhamento-dos-diretorios","title":"\ud83d\udce6 Detalhamento dos Diret\u00f3rios","text":""},{"location":"structure/#car_apiapppy-aplicacao-principal","title":"\ud83d\ude80 <code>car_api/app.py</code> - Aplica\u00e7\u00e3o Principal","text":"<p>Arquivo de entrada da aplica\u00e7\u00e3o FastAPI:</p> <pre><code>from fastapi import FastAPI\nfrom car_api.routers import auth, brands, cars, users\n\napp = FastAPI()\n\n# Configura\u00e7\u00e3o de routers\napp.include_router(auth.router, prefix='/api/v1/auth', tags=['authentication'])\napp.include_router(users.router, prefix='/api/v1/users', tags=['users'])\napp.include_router(brands.router, prefix='/api/v1/brands', tags=['brands'])\napp.include_router(cars.router, prefix='/api/v1/cars', tags=['cars'])\n\n# Health check endpoint\n@app.get('/health_check')\ndef health_check():\n    return {'status': 'ok'}\n</code></pre> <p>Responsabilidades: - Criar inst\u00e2ncia do FastAPI - Registrar routers e middleware - Configurar CORS e outros middleware - Definir endpoints globais</p>"},{"location":"structure/#car_apicore-funcionalidades-centrais","title":"\u2699\ufe0f <code>car_api/core/</code> - Funcionalidades Centrais","text":""},{"location":"structure/#databasepy-configuracao-do-banco","title":"<code>database.py</code> - Configura\u00e7\u00e3o do Banco","text":"<pre><code>from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker\n\nengine = create_async_engine(settings.database_url)\nSessionLocal = async_sessionmaker(engine, expire_on_commit=False)\n\nasync def get_session():\n    async with SessionLocal() as session:\n        yield session\n</code></pre> <p>Responsabilidades: - Configurar engine do SQLAlchemy - Gerenciar sess\u00f5es de banco - Dependency injection para sess\u00f5es</p>"},{"location":"structure/#securitypy-seguranca-e-autenticacao","title":"<code>security.py</code> - Seguran\u00e7a e Autentica\u00e7\u00e3o","text":"<pre><code>from pwdlib import PasswordHash\nimport jwt\n\npwd_context = PasswordHash.recommended()\n\ndef get_password_hash(password: str) -&gt; str:\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict) -&gt; str:\n    return jwt.encode(data, settings.jwt_secret_key, algorithm=settings.jwt_algorithm)\n</code></pre> <p>Responsabilidades: - Hash de senhas com Argon2 - Cria\u00e7\u00e3o e valida\u00e7\u00e3o de tokens JWT - Dependency para usu\u00e1rio atual - Verifica\u00e7\u00e3o de permiss\u00f5es</p>"},{"location":"structure/#settingspy-configuracoes","title":"<code>settings.py</code> - Configura\u00e7\u00f5es","text":"<pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    database_url: str = 'sqlite+aiosqlite:///./car.db'\n    jwt_secret_key: str\n    jwt_algorithm: str = 'HS256'\n    jwt_expiration_minutes: int = 30\n\n    class Config:\n        env_file = '.env'\n</code></pre> <p>Responsabilidades: - Centralizar configura\u00e7\u00f5es - Valida\u00e7\u00e3o de vari\u00e1veis de ambiente - Type hints para configura\u00e7\u00f5es</p>"},{"location":"structure/#car_apimodels-modelos-de-dados","title":"\ud83c\udfd7\ufe0f <code>car_api/models/</code> - Modelos de Dados","text":""},{"location":"structure/#basepy-classe-base","title":"<code>base.py</code> - Classe Base","text":"<pre><code>from sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n    pass\n</code></pre>"},{"location":"structure/#userspy-modelo-de-usuarios","title":"<code>users.py</code> - Modelo de Usu\u00e1rios","text":"<pre><code>class User(Base):\n    __tablename__ = 'users'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(unique=True)\n    email: Mapped[str] = mapped_column(unique=True)\n    password: Mapped[str]\n    created_at: Mapped[datetime] = mapped_column(server_default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(onupdate=func.now())\n\n    cars: Mapped[list['Car']] = relationship(back_populates='owner')\n</code></pre>"},{"location":"structure/#carspy-modelos-de-carros-e-marcas","title":"<code>cars.py</code> - Modelos de Carros e Marcas","text":"<pre><code>class Brand(Base):\n    __tablename__ = 'brands'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(String(50), unique=True)\n    description: Mapped[Optional[str]] = mapped_column(Text)\n    is_active: Mapped[bool] = mapped_column(default=True)\n\nclass Car(Base):\n    __tablename__ = 'cars'\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    model: Mapped[str] = mapped_column(String(100))\n    factory_year: Mapped[int]\n    model_year: Mapped[int]\n    color: Mapped[str] = mapped_column(String(30))\n    plate: Mapped[str] = mapped_column(String(10), unique=True)\n    fuel_type: Mapped[FuelType]\n    transmission: Mapped[TransmissionType]\n    price: Mapped[Decimal] = mapped_column(Numeric(10, 2))\n\n    # Relacionamentos\n    brand_id: Mapped[int] = mapped_column(ForeignKey('brands.id'))\n    owner_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\n\n    brand: Mapped['Brand'] = relationship('Brand', back_populates='cars')\n    owner: Mapped['User'] = relationship('User', back_populates='cars')\n</code></pre> <p>Caracter\u00edsticas dos Modelos: - Type hints completos com <code>Mapped[]</code> - Relacionamentos bidirecionais - Campos de auditoria (created_at, updated_at) - Valida\u00e7\u00f5es de integridade - Enums para campos categ\u00f3ricos</p>"},{"location":"structure/#car_apirouters-rotas-da-api","title":"\ud83d\udee3\ufe0f <code>car_api/routers/</code> - Rotas da API","text":"<p>Cada router implementa as opera\u00e7\u00f5es CRUD para sua entidade:</p>"},{"location":"structure/#estrutura-padrao-de-router","title":"Estrutura Padr\u00e3o de Router","text":"<pre><code>from fastapi import APIRouter, Depends, HTTPException, Query, status\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nrouter = APIRouter()\n\n@router.post('/', status_code=status.HTTP_201_CREATED, response_model=Schema)\nasync def create_item(): pass\n\n@router.get('/', status_code=status.HTTP_200_OK, response_model=ListSchema)\nasync def list_items(): pass\n\n@router.get('/{item_id}', status_code=status.HTTP_200_OK, response_model=Schema)\nasync def get_item(): pass\n\n@router.put('/{item_id}', status_code=status.HTTP_200_OK, response_model=Schema)\nasync def update_item(): pass\n\n@router.delete('/{item_id}', status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_item(): pass\n</code></pre>"},{"location":"structure/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<p><code>auth.py</code>: - <code>POST /token</code> - Gerar token de acesso - <code>POST /refresh_token</code> - Renovar token</p> <p><code>users.py</code>: - CRUD completo de usu\u00e1rios - Busca por username/email - Valida\u00e7\u00e3o de unicidade</p> <p><code>brands.py</code>: - CRUD completo de marcas - Filtros por status ativo - Prote\u00e7\u00e3o contra dele\u00e7\u00e3o com carros</p> <p><code>cars.py</code>: - CRUD completo de carros - Filtros avan\u00e7ados (pre\u00e7o, combust\u00edvel, etc.) - Verifica\u00e7\u00e3o de propriedade - Busca por modelo/placa</p>"},{"location":"structure/#car_apischemas-esquemas-pydantic","title":"\ud83d\udcdd <code>car_api/schemas/</code> - Esquemas Pydantic","text":""},{"location":"structure/#padrao-de-nomenclatura","title":"Padr\u00e3o de Nomenclatura","text":"<pre><code># Schema para cria\u00e7\u00e3o (entrada)\nclass UserSchema(BaseModel):\n    username: str\n    email: str\n    password: str\n\n# Schema para atualiza\u00e7\u00e3o (entrada parcial)\nclass UserUpdateSchema(BaseModel):\n    username: Optional[str] = None\n    email: Optional[str] = None\n    password: Optional[str] = None\n\n# Schema p\u00fablico (sa\u00edda - sem senha)\nclass UserPublicSchema(BaseModel):\n    id: int\n    username: str\n    email: str\n    created_at: datetime\n    updated_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Schema para listagem\nclass UserListPublicSchema(BaseModel):\n    users: list[UserPublicSchema]\n    offset: int\n    limit: int\n</code></pre>"},{"location":"structure/#funcionalidades-dos-schemas","title":"Funcionalidades dos Schemas","text":"<p>Valida\u00e7\u00e3o de Entrada: <pre><code>class CarSchema(BaseModel):\n    model: str = Field(..., min_length=1, max_length=100)\n    factory_year: int = Field(..., ge=1900, le=2030)\n    price: Decimal = Field(..., gt=0)\n    plate: str = Field(..., regex=r'^[A-Z]{3}[0-9]{4}$|^[A-Z]{3}[0-9][A-Z][0-9]{2}$')\n</code></pre></p> <p>Configura\u00e7\u00e3o para SQLAlchemy: <pre><code>class Config:\n    from_attributes = True  # Permite convers\u00e3o de modelos SQLAlchemy\n</code></pre></p>"},{"location":"structure/#migrations-migracoes-do-banco","title":"\ud83d\udd04 <code>migrations/</code> - Migra\u00e7\u00f5es do Banco","text":""},{"location":"structure/#estrutura-das-migracoes","title":"Estrutura das Migra\u00e7\u00f5es","text":"<pre><code>migrations/\n\u251c\u2500\u2500 env.py                      # Configura\u00e7\u00e3o do Alembic\n\u2514\u2500\u2500 versions/\n    \u2514\u2500\u2500 20231201_120000_create_tables.py\n</code></pre>"},{"location":"structure/#exemplo-de-migracao","title":"Exemplo de Migra\u00e7\u00e3o","text":"<pre><code>\"\"\"create tables\n\nRevision ID: d519a757c476\nRevises:\nCreate Date: 2023-12-01 12:00:00.000000\n\"\"\"\n\nfrom alembic import op\nimport sqlalchemy as sa\n\nrevision = 'd519a757c476'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\ndef upgrade() -&gt; None:\n    # Criar tabelas\n    op.create_table('users', ...)\n    op.create_table('brands', ...)\n    op.create_table('cars', ...)\n\ndef downgrade() -&gt; None:\n    # Reverter tabelas\n    op.drop_table('cars')\n    op.drop_table('brands')\n    op.drop_table('users')\n</code></pre>"},{"location":"structure/#tests-testes-automatizados","title":"\ud83e\uddea <code>tests/</code> - Testes Automatizados","text":""},{"location":"structure/#estrutura-dos-testes","title":"Estrutura dos Testes","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py                 # Fixtures compartilhadas\n\u251c\u2500\u2500 test_auth.py               # Testes de autentica\u00e7\u00e3o\n\u251c\u2500\u2500 test_brands.py             # Testes de marcas\n\u251c\u2500\u2500 test_cars.py               # Testes de carros\n\u251c\u2500\u2500 test_db.py                 # Testes de banco\n\u2514\u2500\u2500 test_users.py              # Testes de usu\u00e1rios\n</code></pre>"},{"location":"structure/#fixtures-principais-conftestpy","title":"Fixtures Principais (<code>conftest.py</code>)","text":"<pre><code>@pytest_asyncio.fixture\nasync def db_session():\n    # Sess\u00e3o de banco para testes\n\n@pytest_asyncio.fixture\nasync def client(db_session):\n    # Cliente HTTP para testes\n\n@pytest_asyncio.fixture\nasync def sample_user(db_session):\n    # Usu\u00e1rio de exemplo para testes\n\n@pytest_asyncio.fixture\nasync def auth_headers(sample_user):\n    # Headers de autentica\u00e7\u00e3o\n</code></pre>"},{"location":"structure/#padrao-de-testes","title":"Padr\u00e3o de Testes","text":"<pre><code>class TestCarEndpoints:\n    async def test_create_car_success(self, client, auth_headers):\n        # Teste de cria\u00e7\u00e3o bem-sucedida\n\n    async def test_create_car_invalid_data(self, client, auth_headers):\n        # Teste com dados inv\u00e1lidos\n\n    async def test_get_car_not_found(self, client, auth_headers):\n        # Teste de recurso n\u00e3o encontrado\n</code></pre>"},{"location":"structure/#arquivos-de-configuracao","title":"\ud83d\udd27 Arquivos de Configura\u00e7\u00e3o","text":""},{"location":"structure/#pyprojecttoml-configuracao-principal","title":"<code>pyproject.toml</code> - Configura\u00e7\u00e3o Principal","text":"<pre><code>[project]\nname = \"car-api\"\nversion = \"0.1.0\"\ndescription = \"API para gerenciamento de carros\"\n\n[tool.ruff]\nline-length = 79\nselect = ['I', 'F', 'E', 'W', 'PL', 'PT']\n\n[tool.taskipy.tasks]\nlint = 'ruff check'\nformat = 'ruff format'\ntest = 'pytest -v --cov=car_api'\nrun = 'fastapi dev car_api/app.py'\n</code></pre>"},{"location":"structure/#alembicini-configuracao-de-migracoes","title":"<code>alembic.ini</code> - Configura\u00e7\u00e3o de Migra\u00e7\u00f5es","text":"<pre><code>[alembic]\nscript_location = migrations\nfile_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s\n\nsqlalchemy.url =\n</code></pre>"},{"location":"structure/#docker-composeyml-orquestracao","title":"<code>docker-compose.yml</code> - Orquestra\u00e7\u00e3o","text":"<pre><code>version: '3.8'\nservices:\n  api:\n    build: .\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n    environment:\n      - DATABASE_URL=postgresql+psycopg://postgres:postgres@db:5432/car_api\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: car_api\n      POSTGRES_PASSWORD: postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"structure/#metricas-da-estrutura","title":"\ud83d\udcca M\u00e9tricas da Estrutura","text":""},{"location":"structure/#tamanho-dos-modulos","title":"Tamanho dos M\u00f3dulos","text":"M\u00f3dulo Arquivos Linhas de C\u00f3digo Responsabilidade <code>core/</code> 3 ~200 Infraestrutura <code>models/</code> 3 ~150 Modelo de dados <code>routers/</code> 4 ~800 API endpoints <code>schemas/</code> 4 ~300 Valida\u00e7\u00e3o <code>tests/</code> 6 ~600 Testes"},{"location":"structure/#complexidade","title":"Complexidade","text":"<ul> <li>M\u00f3dulos independentes: Baixo acoplamento</li> <li>Responsabilidades claras: Alta coes\u00e3o</li> <li>Facilidade de teste: Dependency injection</li> <li>Escalabilidade: F\u00e1cil adicionar novos m\u00f3dulos</li> </ul>"},{"location":"structure/#principios-arquiteturais","title":"\ud83c\udfaf Princ\u00edpios Arquiteturais","text":""},{"location":"structure/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>Cada m\u00f3dulo tem uma responsabilidade espec\u00edfica: - <code>routers/</code>: Apenas endpoints HTTP - <code>models/</code>: Apenas estrutura de dados - <code>schemas/</code>: Apenas valida\u00e7\u00e3o - <code>core/</code>: Apenas infraestrutura</p>"},{"location":"structure/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<pre><code># \u2705 Depende de abstra\u00e7\u00e3o (AsyncSession)\nasync def create_car(db: AsyncSession):\n    pass\n\n# \u274c Dependeria de implementa\u00e7\u00e3o concreta\nasync def create_car(postgres_connection):\n    pass\n</code></pre>"},{"location":"structure/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<ul> <li>F\u00e1cil adicionar novos endpoints sem modificar existentes</li> <li>F\u00e1cil adicionar novos modelos sem afetar outros</li> <li>Middleware pode ser adicionado sem modificar routers</li> </ul>"},{"location":"structure/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<ul> <li>Schemas espec\u00edficos para cada opera\u00e7\u00e3o</li> <li>Dependencies injetadas apenas quando necess\u00e1rias</li> <li>Interfaces pequenas e focadas</li> </ul>"},{"location":"structure/#escalabilidade","title":"\ud83d\ude80 Escalabilidade","text":""},{"location":"structure/#horizontal-adicionar-funcionalidades","title":"Horizontal (Adicionar Funcionalidades)","text":"<ol> <li> <p>Novo Modelo de Dados: <pre><code>car_api/models/categories.py      # Novo modelo\ncar_api/schemas/categories.py     # Novos schemas\ncar_api/routers/categories.py     # Novos endpoints\ntests/test_categories.py          # Novos testes\n</code></pre></p> </li> <li> <p>Nova Funcionalidade: <pre><code>car_api/core/notifications.py    # Nova infraestrutura\ncar_api/services/email.py        # Nova service layer\n</code></pre></p> </li> </ol>"},{"location":"structure/#vertical-melhorar-existente","title":"Vertical (Melhorar Existente)","text":"<ol> <li>Otimiza\u00e7\u00e3o de Performance:</li> <li>Cache em <code>core/cache.py</code></li> <li> <p>Rate limiting em <code>core/middleware.py</code></p> </li> <li> <p>Melhor Observabilidade:</p> </li> <li>Logging em <code>core/logging.py</code></li> <li>M\u00e9tricas em <code>core/metrics.py</code></li> </ol>"},{"location":"structure/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Para entender melhor a estrutura:</p> <ol> <li>\ud83d\udcd6 Leia os Guidelines e Padr\u00f5es</li> <li>\ud83d\udee0\ufe0f Explore os API Endpoints</li> <li>\ud83c\udfd7\ufe0f Entenda a Modelagem do Sistema</li> <li>\ud83d\udcbb Comece o Desenvolvimento</li> </ol>"},{"location":"system-modeling/","title":"Modelagem do Sistema","text":""},{"location":"system-modeling/#visao-geral-arquitetural","title":"\ud83c\udfd7\ufe0f Vis\u00e3o Geral Arquitetural","text":"<p>Este documento apresenta a modelagem completa do sistema Car API, incluindo diagramas de dados, arquitetura, fluxos de autentica\u00e7\u00e3o e opera\u00e7\u00f5es CRUD.</p>"},{"location":"system-modeling/#modelo-de-dados-erd","title":"\ud83d\udcca Modelo de Dados (ERD)","text":""},{"location":"system-modeling/#diagrama-entidade-relacionamento","title":"Diagrama Entidade-Relacionamento","text":"<pre><code>erDiagram\n    USERS {\n        int id PK\n        string username UK\n        string email UK\n        string password\n        datetime created_at\n        datetime updated_at\n    }\n\n    BRANDS {\n        int id PK\n        string name UK\n        text description\n        boolean is_active\n        datetime created_at\n        datetime updated_at\n    }\n\n    CARS {\n        int id PK\n        string model\n        int factory_year\n        int model_year\n        string color\n        string plate UK\n        string fuel_type\n        string transmission\n        decimal price\n        text description\n        boolean is_available\n        int brand_id FK\n        int owner_id FK\n        datetime created_at\n        datetime updated_at\n    }\n\n    USERS ||--o{ CARS : \"owns\"\n    BRANDS ||--o{ CARS : \"belongs_to\"</code></pre>"},{"location":"system-modeling/#descricao-das-entidades","title":"Descri\u00e7\u00e3o das Entidades","text":""},{"location":"system-modeling/#users-usuarios","title":"\ud83d\udc64 USERS (Usu\u00e1rios)","text":"<ul> <li>Prop\u00f3sito: Armazenar informa\u00e7\u00f5es dos usu\u00e1rios do sistema</li> <li>Caracter\u00edsticas:</li> <li>Cada usu\u00e1rio pode ter m\u00faltiplos carros</li> <li>Username e email s\u00e3o \u00fanicos</li> <li>Senha armazenada com hash Argon2</li> <li>Timestamps de auditoria</li> </ul>"},{"location":"system-modeling/#brands-marcas","title":"\ud83c\udff7\ufe0f BRANDS (Marcas)","text":"<ul> <li>Prop\u00f3sito: Cat\u00e1logo de marcas de ve\u00edculos</li> <li>Caracter\u00edsticas:</li> <li>Nome \u00fanico no sistema</li> <li>Controle de ativa\u00e7\u00e3o/desativa\u00e7\u00e3o</li> <li>Descri\u00e7\u00e3o opcional</li> <li>Uma marca pode ter m\u00faltiplos carros</li> </ul>"},{"location":"system-modeling/#cars-carros","title":"\ud83d\ude97 CARS (Carros)","text":"<ul> <li>Prop\u00f3sito: Registro de ve\u00edculos no sistema</li> <li>Caracter\u00edsticas:</li> <li>Placa \u00fanica no sistema</li> <li>Relacionamento com marca e propriet\u00e1rio</li> <li>Informa\u00e7\u00f5es t\u00e9cnicas detalhadas</li> <li>Controle de disponibilidade</li> <li>Pre\u00e7o com precis\u00e3o decimal</li> </ul>"},{"location":"system-modeling/#relacionamentos","title":"Relacionamentos","text":"<ol> <li>USERS \u2192 CARS (1:N)</li> <li>Um usu\u00e1rio pode possuir m\u00faltiplos carros</li> <li>Um carro pertence a apenas um usu\u00e1rio</li> <li> <p>Relacionamento obrigat\u00f3rio (owner_id NOT NULL)</p> </li> <li> <p>BRANDS \u2192 CARS (1:N)</p> </li> <li>Uma marca pode ter m\u00faltiplos carros</li> <li>Um carro pertence a apenas uma marca</li> <li>Relacionamento obrigat\u00f3rio (brand_id NOT NULL)</li> </ol>"},{"location":"system-modeling/#constraints-e-validacoes","title":"Constraints e Valida\u00e7\u00f5es","text":"<pre><code>-- Constraints de unicidade\nUNIQUE(users.username)\nUNIQUE(users.email)\nUNIQUE(brands.name)\nUNIQUE(cars.plate)\n\n-- Constraints de integridade referencial\nFOREIGN KEY(cars.owner_id) REFERENCES users(id)\nFOREIGN KEY(cars.brand_id) REFERENCES brands(id)\n\n-- Constraints de valida\u00e7\u00e3o\nCHECK(cars.factory_year &gt;= 1900 AND cars.factory_year &lt;= 2030)\nCHECK(cars.model_year &gt;= 1900 AND cars.model_year &lt;= 2030)\nCHECK(cars.price &gt; 0)\nCHECK(cars.fuel_type IN ('gasoline', 'ethanol', 'flex', 'diesel', 'electric', 'hybrid'))\nCHECK(cars.transmission IN ('manual', 'automatic', 'semi_automatic', 'cvt'))\n</code></pre>"},{"location":"system-modeling/#arquitetura-do-sistema","title":"\ud83c\udfdb\ufe0f Arquitetura do Sistema","text":""},{"location":"system-modeling/#diagrama-de-arquitetura","title":"Diagrama de Arquitetura","text":"<pre><code>graph TB\n    subgraph \"Cliente\"\n        CLI[Cliente HTTP]\n        UI[Interface Web]\n        MOB[App Mobile]\n    end\n\n    subgraph \"API Layer\"\n        GW[API Gateway]\n        LB[Load Balancer]\n    end\n\n    subgraph \"FastAPI Application\"\n        RT[Routers]\n        MW[Middleware]\n        DI[Dependency Injection]\n    end\n\n    subgraph \"Business Layer\"\n        AUTH[Auth Service]\n        USER[User Service]\n        CAR[Car Service]\n        BRAND[Brand Service]\n    end\n\n    subgraph \"Data Layer\"\n        ORM[SQLAlchemy ORM]\n        CACHE[Redis Cache]\n        DB[(PostgreSQL)]\n    end\n\n    subgraph \"External Services\"\n        JWT[JWT Provider]\n        LOG[Logging]\n        MON[Monitoring]\n    end\n\n    CLI --&gt; GW\n    UI --&gt; GW\n    MOB --&gt; GW\n\n    GW --&gt; LB\n    LB --&gt; RT\n\n    RT --&gt; MW\n    MW --&gt; DI\n    DI --&gt; AUTH\n    DI --&gt; USER\n    DI --&gt; CAR\n    DI --&gt; BRAND\n\n    AUTH --&gt; ORM\n    USER --&gt; ORM\n    CAR --&gt; ORM\n    BRAND --&gt; ORM\n\n    ORM --&gt; CACHE\n    ORM --&gt; DB\n\n    AUTH --&gt; JWT\n    RT --&gt; LOG\n    MW --&gt; MON\n\n    style CLI fill:#e1f5fe\n    style UI fill:#e1f5fe\n    style MOB fill:#e1f5fe\n    style RT fill:#f3e5f5\n    style DB fill:#e8f5e8\n    style CACHE fill:#fff3e0</code></pre>"},{"location":"system-modeling/#camadas-da-arquitetura","title":"Camadas da Arquitetura","text":""},{"location":"system-modeling/#1-cliente-layer","title":"1. Cliente Layer","text":"<ul> <li>Responsabilidade: Interface com usu\u00e1rio</li> <li>Componentes: CLI, Web UI, Mobile App</li> <li>Protocolos: HTTP/HTTPS, REST</li> </ul>"},{"location":"system-modeling/#2-api-layer","title":"2. API Layer","text":"<ul> <li>Responsabilidade: Gerenciamento de tr\u00e1fego</li> <li>Componentes: API Gateway, Load Balancer</li> <li>Funcionalidades: Rate limiting, CORS, SSL</li> </ul>"},{"location":"system-modeling/#3-application-layer","title":"3. Application Layer","text":"<ul> <li>Responsabilidade: L\u00f3gica de apresenta\u00e7\u00e3o</li> <li>Componentes: FastAPI Routers, Middleware</li> <li>Funcionalidades: Roteamento, valida\u00e7\u00e3o, serializa\u00e7\u00e3o</li> </ul>"},{"location":"system-modeling/#4-business-layer","title":"4. Business Layer","text":"<ul> <li>Responsabilidade: Regras de neg\u00f3cio</li> <li>Componentes: Services (impl\u00edcitos nos routers)</li> <li>Funcionalidades: Autentica\u00e7\u00e3o, CRUD, valida\u00e7\u00f5es</li> </ul>"},{"location":"system-modeling/#5-data-layer","title":"5. Data Layer","text":"<ul> <li>Responsabilidade: Persist\u00eancia de dados</li> <li>Componentes: SQLAlchemy ORM, PostgreSQL</li> <li>Funcionalidades: Transa\u00e7\u00f5es, relacionamentos, cache</li> </ul>"},{"location":"system-modeling/#fluxo-de-autenticacao","title":"\ud83d\udd11 Fluxo de Autentica\u00e7\u00e3o","text":""},{"location":"system-modeling/#diagrama-de-autenticacao-jwt","title":"Diagrama de Autentica\u00e7\u00e3o JWT","text":"<pre><code>sequenceDiagram\n    participant C as Cliente\n    participant A as API\n    participant JWT as JWT Service\n    participant DB as Database\n\n    C-&gt;&gt;A: POST /auth/token (username, password)\n    A-&gt;&gt;DB: Validar credenciais\n    DB--&gt;&gt;A: Usu\u00e1rio v\u00e1lido\n    A-&gt;&gt;JWT: Gerar token\n    JWT--&gt;&gt;A: Access token\n    A--&gt;&gt;C: {access_token, token_type}\n\n    Note over C: Cliente armazena token\n\n    C-&gt;&gt;A: GET /users/ (Authorization: Bearer token)\n    A-&gt;&gt;JWT: Validar token\n    JWT--&gt;&gt;A: Token v\u00e1lido + user_id\n    A-&gt;&gt;DB: Buscar dados do usu\u00e1rio\n    DB--&gt;&gt;A: Dados do usu\u00e1rio\n    A--&gt;&gt;C: Lista de usu\u00e1rios</code></pre>"},{"location":"system-modeling/#componentes-de-seguranca","title":"Componentes de Seguran\u00e7a","text":""},{"location":"system-modeling/#1-password-hashing","title":"1. Password Hashing","text":"<pre><code>from pwdlib import PasswordHash\n\npwd_context = PasswordHash.recommended()\n\ndef get_password_hash(password: str) -&gt; str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain_password: str, hashed_password: str) -&gt; bool:\n    return pwd_context.verify(plain_password, hashed_password)\n</code></pre>"},{"location":"system-modeling/#2-jwt-token-management","title":"2. JWT Token Management","text":"<pre><code>import jwt\nfrom datetime import datetime, timedelta\n\ndef create_access_token(data: dict) -&gt; str:\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=settings.jwt_expiration_minutes)\n    to_encode.update({\"exp\": expire})\n\n    return jwt.encode(to_encode, settings.jwt_secret_key, algorithm=settings.jwt_algorithm)\n</code></pre>"},{"location":"system-modeling/#3-authorization-middleware","title":"3. Authorization Middleware","text":"<pre><code>async def get_current_user(token: str = Depends(oauth2_scheme)) -&gt; User:\n    try:\n        payload = jwt.decode(token, settings.jwt_secret_key, algorithms=[settings.jwt_algorithm])\n        user_id: str = payload.get(\"sub\")\n        if user_id is None:\n            raise credentials_exception\n    except JWTError:\n        raise credentials_exception\n\n    user = await get_user_by_id(user_id)\n    if user is None:\n        raise credentials_exception\n\n    return user\n</code></pre>"},{"location":"system-modeling/#fluxo-crud-de-carros","title":"\ud83d\ude97 Fluxo CRUD de Carros","text":""},{"location":"system-modeling/#diagrama-de-operacoes-crud","title":"Diagrama de Opera\u00e7\u00f5es CRUD","text":"<pre><code>flowchart TD\n    Start([In\u00edcio]) --&gt; Auth{Token v\u00e1lido?}\n    Auth --&gt;|N\u00e3o| Unauthorized[401 Unauthorized]\n    Auth --&gt;|Sim| Operation{Tipo de opera\u00e7\u00e3o?}\n\n    Operation --&gt;|CREATE| ValidateData[Validar dados do carro]\n    ValidateData --&gt; CheckBrand{Marca existe?}\n    CheckBrand --&gt;|N\u00e3o| CreateBrand[Criar nova marca]\n    CheckBrand --&gt;|Sim| CheckPlate{Placa \u00fanica?}\n    CreateBrand --&gt; CheckPlate\n    CheckPlate --&gt;|N\u00e3o| ConflictError[409 Conflict]\n    CheckPlate --&gt;|Sim| CreateCar[Criar carro]\n    CreateCar --&gt; ReturnCar[Retornar carro criado]\n\n    Operation --&gt;|READ| GetCars[Buscar carros]\n    GetCars --&gt; FilterOwner{Filtrar por propriet\u00e1rio?}\n    FilterOwner --&gt;|Sim| UserCars[Carros do usu\u00e1rio]\n    FilterOwner --&gt;|N\u00e3o| AllCars[Todos os carros]\n    UserCars --&gt; ReturnCars[Retornar lista]\n    AllCars --&gt; ReturnCars\n\n    Operation --&gt;|UPDATE| FindCar[Buscar carro por ID]\n    FindCar --&gt; CarExists{Carro existe?}\n    CarExists --&gt;|N\u00e3o| NotFound[404 Not Found]\n    CarExists --&gt;|Sim| CheckOwner{\u00c9 o propriet\u00e1rio?}\n    CheckOwner --&gt;|N\u00e3o| Forbidden[403 Forbidden]\n    CheckOwner --&gt;|Sim| UpdateCar[Atualizar carro]\n    UpdateCar --&gt; ReturnUpdated[Retornar carro atualizado]\n\n    Operation --&gt;|DELETE| FindCar2[Buscar carro por ID]\n    FindCar2 --&gt; CarExists2{Carro existe?}\n    CarExists2 --&gt;|N\u00e3o| NotFound2[404 Not Found]\n    CarExists2 --&gt;|Sim| CheckOwner2{\u00c9 o propriet\u00e1rio?}\n    CheckOwner2 --&gt;|N\u00e3o| Forbidden2[403 Forbidden]\n    CheckOwner2 --&gt;|Sim| DeleteCar[Deletar carro]\n    DeleteCar --&gt; Success[204 No Content]\n\n    style Start fill:#e8f5e8\n    style Success fill:#e8f5e8\n    style ReturnCar fill:#e8f5e8\n    style ReturnCars fill:#e8f5e8\n    style ReturnUpdated fill:#e8f5e8\n    style Unauthorized fill:#ffe8e8\n    style ConflictError fill:#ffe8e8\n    style NotFound fill:#ffe8e8\n    style NotFound2 fill:#ffe8e8\n    style Forbidden fill:#ffe8e8\n    style Forbidden2 fill:#ffe8e8</code></pre>"},{"location":"system-modeling/#validacoes-e-regras-de-negocio","title":"Valida\u00e7\u00f5es e Regras de Neg\u00f3cio","text":""},{"location":"system-modeling/#1-validacoes-de-criacao","title":"1. Valida\u00e7\u00f5es de Cria\u00e7\u00e3o","text":"<pre><code>async def create_car(car: CarSchema, current_user: User, db: AsyncSession):\n    # 1. Validar placa \u00fanica\n    plate_exists = await db.scalar(select(exists().where(Car.plate == car.plate)))\n    if plate_exists:\n        raise HTTPException(400, \"Placa j\u00e1 est\u00e1 em uso\")\n\n    # 2. Validar marca existe\n    brand_exists = await db.scalar(select(exists().where(Brand.id == car.brand_id)))\n    if not brand_exists:\n        raise HTTPException(400, \"Marca n\u00e3o encontrada\")\n\n    # 3. Criar carro com propriet\u00e1rio\n    db_car = Car(**car.dict(), owner_id=current_user.id)\n</code></pre>"},{"location":"system-modeling/#2-validacoes-de-propriedade","title":"2. Valida\u00e7\u00f5es de Propriedade","text":"<pre><code>def verify_car_ownership(current_user: User, car_owner_id: int):\n    if current_user.id != car_owner_id:\n        raise HTTPException(403, \"Acesso negado\")\n</code></pre>"},{"location":"system-modeling/#3-filtros-de-busca","title":"3. Filtros de Busca","text":"<pre><code># Aplicar filtros dinamicamente\nif search:\n    query = query.where(\n        (Car.model.ilike(f'%{search}%')) |\n        (Car.plate.ilike(f'%{search}%'))\n    )\n\nif brand_id:\n    query = query.where(Car.brand_id == brand_id)\n\nif fuel_type:\n    query = query.where(Car.fuel_type == fuel_type)\n\nif min_price:\n    query = query.where(Car.price &gt;= min_price)\n</code></pre>"},{"location":"system-modeling/#fluxo-de-seguranca","title":"\ud83d\udee1\ufe0f Fluxo de Seguran\u00e7a","text":""},{"location":"system-modeling/#diagrama-de-seguranca-integrada","title":"Diagrama de Seguran\u00e7a Integrada","text":"<pre><code>flowchart LR\n    subgraph REQ_PROC [\"Request Processing\"]\n        REQ[HTTP Request] --&gt; CORS[CORS Middleware]\n        CORS --&gt; RATE[Rate Limiting]\n        RATE --&gt; AUTH[Authentication]\n        AUTH --&gt; AUTHZ[Authorization]\n        AUTHZ --&gt; VAL[Input Validation]\n        VAL --&gt; BIZ[Business Logic]\n        BIZ --&gt; RES[Response]\n    end\n\n    subgraph SEC_LAYERS [\"Security Layers\"]\n        subgraph NET_SEC [\"Network Security\"]\n            HTTPS[HTTPS/TLS]\n            FIREWALL[Firewall]\n        end\n\n        subgraph APP_SEC [\"Application Security\"]\n            JWT_SEC[JWT Validation]\n            HASH[Password Hashing]\n            SANIT[Input Sanitization]\n        end\n\n        subgraph DATA_SEC [\"Data Security\"]\n            ENCRYPT[Database Encryption]\n            BACKUP[Secure Backups]\n            AUDIT[Audit Logs]\n        end\n    end\n\n    subgraph THREAT_MIT [\"Threat Mitigation\"]\n        DDOS[DDoS Protection]\n        INJECTION[SQL Injection Prevention]\n        XSS[XSS Protection]\n        CSRF[CSRF Protection]\n    end\n\n    REQ --&gt; HTTPS\n    AUTH --&gt; JWT_SEC\n    VAL --&gt; SANIT\n    BIZ --&gt; AUDIT\n\n    style REQ fill:#ffebee\n    style AUTH fill:#e8f5e8\n    style VAL fill:#e3f2fd\n    style RES fill:#f3e5f5</code></pre>"},{"location":"system-modeling/#controles-de-seguranca-implementados","title":"Controles de Seguran\u00e7a Implementados","text":""},{"location":"system-modeling/#1-autenticacao-multi-camada","title":"1. Autentica\u00e7\u00e3o Multi-Camada","text":"<pre><code># Layer 1: Token Validation\nasync def validate_token(token: str) -&gt; dict:\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[\"HS256\"])\n        return payload\n    except JWTError:\n        raise HTTPException(401, \"Token inv\u00e1lido\")\n\n# Layer 2: User Verification\nasync def get_current_user(payload: dict, db: AsyncSession) -&gt; User:\n    user = await db.get(User, payload[\"sub\"])\n    if not user:\n        raise HTTPException(401, \"Usu\u00e1rio n\u00e3o encontrado\")\n    return user\n\n# Layer 3: Resource Authorization\ndef verify_resource_access(user: User, resource_owner_id: int):\n    if user.id != resource_owner_id:\n        raise HTTPException(403, \"Acesso negado\")\n</code></pre>"},{"location":"system-modeling/#2-validacao-de-entrada","title":"2. Valida\u00e7\u00e3o de Entrada","text":"<pre><code># Schema Validation\nclass CarSchema(BaseModel):\n    model: str = Field(..., min_length=1, max_length=100)\n    factory_year: int = Field(..., ge=1900, le=2030)\n    price: Decimal = Field(..., gt=0)\n    plate: str = Field(..., regex=r'^[A-Z]{3}[0-9]{4}$|^[A-Z]{3}[0-9][A-Z][0-9]{2}$')\n\n# SQL Injection Prevention (SQLAlchemy ORM)\nquery = select(Car).where(Car.plate == plate)  # Parameterized query\n</code></pre>"},{"location":"system-modeling/#3-rate-limiting-e-cors","title":"3. Rate Limiting e CORS","text":"<pre><code># CORS Configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://yourdomain.com\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Rate Limiting (Planned)\n@limits(calls=100, period=60)  # 100 calls per minute\nasync def rate_limited_endpoint():\n    pass\n</code></pre>"},{"location":"system-modeling/#metricas-e-monitoramento","title":"\ud83d\udcca M\u00e9tricas e Monitoramento","text":""},{"location":"system-modeling/#diagrama-de-observabilidade","title":"Diagrama de Observabilidade","text":"<pre><code>graph LR\n    subgraph \"Application\"\n        APP[FastAPI App]\n        LOGS[Application Logs]\n        METRICS[Business Metrics]\n    end\n\n    subgraph \"Monitoring Stack\"\n        PROM[Prometheus]\n        GRAF[Grafana]\n        ALERT[AlertManager]\n    end\n\n    subgraph \"Logging Stack\"\n        ELASTIC[Elasticsearch]\n        LOGSTASH[Logstash]\n        KIBANA[Kibana]\n    end\n\n    subgraph \"Tracing\"\n        JAEGER[Jaeger]\n        TRACE[Distributed Tracing]\n    end\n\n    APP --&gt; LOGS\n    APP --&gt; METRICS\n\n    LOGS --&gt; LOGSTASH\n    LOGSTASH --&gt; ELASTIC\n    ELASTIC --&gt; KIBANA\n\n    METRICS --&gt; PROM\n    PROM --&gt; GRAF\n    PROM --&gt; ALERT\n\n    APP --&gt; TRACE\n    TRACE --&gt; JAEGER\n\n    style APP fill:#e8f5e8\n    style PROM fill:#e3f2fd\n    style ELASTIC fill:#fff3e0\n    style JAEGER fill:#f3e5f5</code></pre>"},{"location":"system-modeling/#kpis-e-metricas","title":"KPIs e M\u00e9tricas","text":""},{"location":"system-modeling/#1-metricas-de-performance","title":"1. M\u00e9tricas de Performance","text":"<ul> <li>Response time m\u00e9dio: &lt; 200ms</li> <li>Throughput: requests/segundo</li> <li>Error rate: &lt; 1%</li> <li>Uptime: &gt; 99.9%</li> </ul>"},{"location":"system-modeling/#2-metricas-de-negocio","title":"2. M\u00e9tricas de Neg\u00f3cio","text":"<ul> <li>Usu\u00e1rios ativos</li> <li>Carros cadastrados</li> <li>Transa\u00e7\u00f5es por hora</li> <li>Taxa de convers\u00e3o</li> </ul>"},{"location":"system-modeling/#3-metricas-de-seguranca","title":"3. M\u00e9tricas de Seguran\u00e7a","text":"<ul> <li>Tentativas de login falhadas</li> <li>Tokens expirados</li> <li>Acessos negados</li> <li>Anomalias de tr\u00e1fego</li> </ul>"},{"location":"system-modeling/#padroes-de-integracao","title":"\ud83d\udd04 Padr\u00f5es de Integra\u00e7\u00e3o","text":""},{"location":"system-modeling/#diagrama-de-integracoes","title":"Diagrama de Integra\u00e7\u00f5es","text":"<pre><code>graph TB\n    subgraph \"Car API Core\"\n        API[FastAPI Application]\n        DB[(PostgreSQL)]\n        CACHE[(Redis)]\n    end\n\n    subgraph \"External APIs\"\n        PAYMENT[Payment Gateway]\n        MAPS[Maps Service]\n        NOTIF[Notification Service]\n        FILE[File Storage]\n    end\n\n    subgraph \"Internal Services\"\n        USER_SVC[User Service]\n        INVENTORY[Inventory Service]\n        ANALYTICS[Analytics Service]\n    end\n\n    subgraph \"Event System\"\n        QUEUE[Message Queue]\n        EVENTS[Event Bus]\n    end\n\n    API &lt;--&gt; PAYMENT\n    API &lt;--&gt; MAPS\n    API &lt;--&gt; NOTIF\n    API &lt;--&gt; FILE\n\n    API --&gt; QUEUE\n    QUEUE --&gt; USER_SVC\n    QUEUE --&gt; INVENTORY\n    QUEUE --&gt; ANALYTICS\n\n    API --&gt; EVENTS\n    EVENTS --&gt; CACHE\n    EVENTS --&gt; DB\n\n    style API fill:#e8f5e8\n    style QUEUE fill:#e3f2fd\n    style EVENTS fill:#fff3e0</code></pre>"},{"location":"system-modeling/#escalabilidade-e-performance","title":"\ud83d\udcc8 Escalabilidade e Performance","text":""},{"location":"system-modeling/#estrategias-de-escalabilidade","title":"Estrat\u00e9gias de Escalabilidade","text":""},{"location":"system-modeling/#1-horizontal-scaling","title":"1. Horizontal Scaling","text":"<pre><code>graph TB\n    LB[Load Balancer]\n\n    subgraph \"API Instances\"\n        API1[Car API - Instance 1]\n        API2[Car API - Instance 2]\n        API3[Car API - Instance 3]\n    end\n\n    subgraph \"Database Cluster\"\n        MASTER[(PostgreSQL Master)]\n        SLAVE1[(PostgreSQL Slave 1)]\n        SLAVE2[(PostgreSQL Slave 2)]\n    end\n\n    CACHE[(Redis Cluster)]\n\n    LB --&gt; API1\n    LB --&gt; API2\n    LB --&gt; API3\n\n    API1 --&gt; MASTER\n    API1 --&gt; SLAVE1\n    API2 --&gt; MASTER\n    API2 --&gt; SLAVE2\n    API3 --&gt; MASTER\n    API3 --&gt; SLAVE1\n\n    API1 --&gt; CACHE\n    API2 --&gt; CACHE\n    API3 --&gt; CACHE</code></pre>"},{"location":"system-modeling/#2-caching-strategy","title":"2. Caching Strategy","text":"<pre><code># Multi-level caching\n@cache.memoize(timeout=300)  # 5 minutes\nasync def get_popular_cars():\n    return await db.execute(\n        select(Car).where(Car.is_available == True).limit(10)\n    )\n\n# Database query optimization\nquery = select(Car).options(\n    selectinload(Car.brand),  # Eager loading\n    selectinload(Car.owner)\n).where(Car.owner_id == user_id)\n</code></pre>"},{"location":"system-modeling/#proximos-passos","title":"\ud83c\udfaf Pr\u00f3ximos Passos","text":"<p>Para explorar mais detalhes:</p> <ol> <li>\ud83d\udd10 Autentica\u00e7\u00e3o e Seguran\u00e7a - Implementa\u00e7\u00e3o detalhada</li> <li>\ud83d\udcbb Desenvolvimento - Fluxo de desenvolvimento</li> <li>\ud83e\uddea Testes - Estrat\u00e9gias de teste</li> <li>\ud83d\ude80 Deploy - Processo de implanta\u00e7\u00e3o</li> </ol>"},{"location":"testing/","title":"Testes","text":""},{"location":"testing/#estrategia-de-testes","title":"\ud83e\uddea Estrat\u00e9gia de Testes","text":""},{"location":"testing/#piramide-de-testes","title":"Pir\u00e2mide de Testes","text":"<pre><code>graph TB\n    subgraph \"Pir\u00e2mide de Testes\"\n        E2E[End-to-End Tests]\n        INT[Integration Tests]\n        UNIT[Unit Tests]\n    end\n\n    subgraph \"Distribui\u00e7\u00e3o\"\n        E2E_PCT[10%&lt;br/&gt;Poucos e Caros]\n        INT_PCT[20%&lt;br/&gt;Moderados]\n        UNIT_PCT[70%&lt;br/&gt;Muitos e R\u00e1pidos]\n    end\n\n    E2E --&gt; E2E_PCT\n    INT --&gt; INT_PCT\n    UNIT --&gt; UNIT_PCT\n\n    style UNIT fill:#e8f5e8\n    style INT fill:#e3f2fd\n    style E2E fill:#fff3e0</code></pre>"},{"location":"testing/#tipos-de-testes-implementados","title":"Tipos de Testes Implementados","text":""},{"location":"testing/#1-unit-tests-70","title":"1. Unit Tests (70%)","text":"<ul> <li>Testam fun\u00e7\u00f5es/m\u00e9todos isoladamente</li> <li>R\u00e1pidos de executar (&lt; 1s cada)</li> <li>Mocks para depend\u00eancias externas</li> <li>Cobertura de l\u00f3gica de neg\u00f3cio</li> </ul>"},{"location":"testing/#2-integration-tests-20","title":"2. Integration Tests (20%)","text":"<ul> <li>Testam intera\u00e7\u00e3o entre componentes</li> <li>Incluem banco de dados de teste</li> <li>Validam schemas e valida\u00e7\u00f5es</li> <li>Testam endpoints da API</li> </ul>"},{"location":"testing/#3-end-to-end-tests-10","title":"3. End-to-End Tests (10%)","text":"<ul> <li>Testam fluxos completos</li> <li>Simulam usu\u00e1rio real</li> <li>Validam funcionalidades cr\u00edticas</li> <li>Executados menos frequentemente</li> </ul>"},{"location":"testing/#estrutura-de-testes","title":"\ud83d\udcc1 Estrutura de Testes","text":"<pre><code>tests/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 conftest.py              # \ud83d\udd27 Configura\u00e7\u00f5es e fixtures\n\u251c\u2500\u2500 unit/                    # \ud83e\uddea Testes unit\u00e1rios\n\u2502   \u251c\u2500\u2500 test_security.py     # \ud83d\udd10 Fun\u00e7\u00f5es de seguran\u00e7a\n\u2502   \u251c\u2500\u2500 test_models.py       # \ud83c\udfd7\ufe0f Modelos SQLAlchemy\n\u2502   \u2514\u2500\u2500 test_schemas.py      # \ud83d\udcdd Valida\u00e7\u00f5es Pydantic\n\u251c\u2500\u2500 integration/             # \ud83d\udd17 Testes de integra\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 test_auth.py         # \ud83d\udd11 Autentica\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 test_brands.py       # \ud83c\udff7\ufe0f API de marcas\n\u2502   \u251c\u2500\u2500 test_cars.py         # \ud83d\ude97 API de carros\n\u2502   \u251c\u2500\u2500 test_users.py        # \ud83d\udc64 API de usu\u00e1rios\n\u2502   \u2514\u2500\u2500 test_db.py           # \ud83d\uddc3\ufe0f Banco de dados\n\u251c\u2500\u2500 e2e/                     # \ud83c\udfaf Testes end-to-end\n\u2502   \u251c\u2500\u2500 test_user_journey.py # \ud83d\udc64 Jornada do usu\u00e1rio\n\u2502   \u2514\u2500\u2500 test_car_workflow.py # \ud83d\ude97 Fluxo de carros\n\u2514\u2500\u2500 fixtures/                # \ud83d\udce6 Dados de teste\n    \u251c\u2500\u2500 cars.json\n    \u251c\u2500\u2500 brands.json\n    \u2514\u2500\u2500 users.json\n</code></pre>"},{"location":"testing/#configuracao-de-testes","title":"\u2699\ufe0f Configura\u00e7\u00e3o de Testes","text":""},{"location":"testing/#conftestpy-fixtures-globais","title":"conftest.py - Fixtures Globais","text":"<pre><code># tests/conftest.py\nimport asyncio\nimport pytest\nimport pytest_asyncio\nfrom httpx import AsyncClient\nfrom sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine\nfrom sqlalchemy.pool import StaticPool\n\nfrom car_api.app import app\nfrom car_api.core.database import get_session\nfrom car_api.core.security import create_access_token, get_password_hash\nfrom car_api.models.base import Base\nfrom car_api.models.cars import Brand, Car, FuelType, TransmissionType\nfrom car_api.models.users import User\n\n# Database de teste em mem\u00f3ria\nTEST_DATABASE_URL = \"sqlite+aiosqlite:///:memory:\"\n\n@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Criar event loop para a sess\u00e3o de testes.\"\"\"\n    loop = asyncio.new_event_loop()\n    yield loop\n    loop.close()\n\n@pytest_asyncio.fixture\nasync def db_engine():\n    \"\"\"Engine de banco de dados para testes.\"\"\"\n    engine = create_async_engine(\n        TEST_DATABASE_URL,\n        connect_args={\n            \"check_same_thread\": False,\n        },\n        poolclass=StaticPool,\n    )\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    yield engine\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n\n    await engine.dispose()\n\n@pytest_asyncio.fixture\nasync def db_session(db_engine):\n    \"\"\"Sess\u00e3o de banco de dados para testes.\"\"\"\n    TestSessionLocal = async_sessionmaker(\n        db_engine, expire_on_commit=False\n    )\n\n    async with TestSessionLocal() as session:\n        yield session\n\n@pytest_asyncio.fixture\nasync def client(db_session):\n    \"\"\"Cliente HTTP para testes de API.\"\"\"\n    app.dependency_overrides[get_session] = lambda: db_session\n\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        yield ac\n\n    app.dependency_overrides.clear()\n\n@pytest_asyncio.fixture\nasync def sample_user(db_session):\n    \"\"\"Usu\u00e1rio de exemplo para testes.\"\"\"\n    user = User(\n        username=\"testuser\",\n        email=\"test@example.com\",\n        password=get_password_hash(\"password123\")\n    )\n    db_session.add(user)\n    await db_session.commit()\n    await db_session.refresh(user)\n    return user\n\n@pytest_asyncio.fixture\nasync def auth_headers(sample_user):\n    \"\"\"Headers de autentica\u00e7\u00e3o para testes.\"\"\"\n    token = create_access_token(data={\"sub\": str(sample_user.id)})\n    return {\"Authorization\": f\"Bearer {token}\"}\n\n@pytest_asyncio.fixture\nasync def sample_brand(db_session):\n    \"\"\"Marca de exemplo para testes.\"\"\"\n    brand = Brand(\n        name=\"Toyota\",\n        description=\"Marca japonesa confi\u00e1vel\",\n        is_active=True\n    )\n    db_session.add(brand)\n    await db_session.commit()\n    await db_session.refresh(brand)\n    return brand\n\n@pytest_asyncio.fixture\nasync def sample_car(db_session, sample_user, sample_brand):\n    \"\"\"Carro de exemplo para testes.\"\"\"\n    car = Car(\n        model=\"Corolla\",\n        factory_year=2022,\n        model_year=2023,\n        color=\"Prata\",\n        plate=\"ABC1234\",\n        fuel_type=FuelType.FLEX,\n        transmission=TransmissionType.AUTOMATIC,\n        price=85000.00,\n        brand_id=sample_brand.id,\n        owner_id=sample_user.id\n    )\n    db_session.add(car)\n    await db_session.commit()\n    await db_session.refresh(car)\n    return car\n</code></pre>"},{"location":"testing/#pytestini-configuracao","title":"pytest.ini - Configura\u00e7\u00e3o","text":"<pre><code>[tool:pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\nasyncio_mode = auto\nasyncio_default_fixture_loop_scope = function\naddopts =\n    -v\n    --strict-markers\n    --strict-config\n    --cov=car_api\n    --cov-report=html\n    --cov-report=term-missing\n    --cov-fail-under=90\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    e2e: End-to-end tests\n    slow: Slow tests\n    database: Tests that require database\n    auth: Authentication tests\n</code></pre>"},{"location":"testing/#testes-unitarios","title":"\ud83e\uddea Testes Unit\u00e1rios","text":""},{"location":"testing/#testes-de-seguranca","title":"Testes de Seguran\u00e7a","text":"<pre><code># tests/unit/test_security.py\nimport pytest\nfrom datetime import datetime, timedelta\nimport jwt\n\nfrom car_api.core.security import (\n    create_access_token,\n    get_password_hash,\n    verify_password,\n    get_current_user\n)\nfrom car_api.core.settings import Settings\n\nsettings = Settings()\n\nclass TestPasswordHashing:\n    def test_password_hash_and_verify(self):\n        \"\"\"Testar hash e verifica\u00e7\u00e3o de senha.\"\"\"\n        password = \"my_secure_password123\"\n\n        # Hash da senha\n        hashed = get_password_hash(password)\n\n        # Verifica\u00e7\u00f5es\n        assert hashed != password  # Hash \u00e9 diferente da senha original\n        assert verify_password(password, hashed) is True  # Verifica\u00e7\u00e3o positiva\n        assert verify_password(\"wrong_password\", hashed) is False  # Verifica\u00e7\u00e3o negativa\n\n    def test_different_hashes_for_same_password(self):\n        \"\"\"Testar que a mesma senha gera hashes diferentes (salt).\"\"\"\n        password = \"same_password\"\n\n        hash1 = get_password_hash(password)\n        hash2 = get_password_hash(password)\n\n        assert hash1 != hash2  # Hashes diferentes devido ao salt\n        assert verify_password(password, hash1) is True\n        assert verify_password(password, hash2) is True\n\nclass TestJWT:\n    def test_create_and_decode_token(self):\n        \"\"\"Testar cria\u00e7\u00e3o e decodifica\u00e7\u00e3o de token JWT.\"\"\"\n        user_data = {\"sub\": \"123\"}\n\n        # Criar token\n        token = create_access_token(data=user_data)\n\n        # Decodificar token\n        payload = jwt.decode(\n            token,\n            settings.jwt_secret_key,\n            algorithms=[settings.jwt_algorithm]\n        )\n\n        assert payload[\"sub\"] == \"123\"\n        assert \"exp\" in payload  # Token tem expira\u00e7\u00e3o\n\n    def test_token_expiration(self):\n        \"\"\"Testar expira\u00e7\u00e3o de token.\"\"\"\n        user_data = {\"sub\": \"123\"}\n\n        # Criar token que expira imediatamente\n        past_time = datetime.utcnow() - timedelta(minutes=1)\n        token = jwt.encode(\n            {**user_data, \"exp\": past_time},\n            settings.jwt_secret_key,\n            algorithm=settings.jwt_algorithm\n        )\n\n        # Tentar decodificar token expirado\n        with pytest.raises(jwt.ExpiredSignatureError):\n            jwt.decode(\n                token,\n                settings.jwt_secret_key,\n                algorithms=[settings.jwt_algorithm]\n            )\n</code></pre>"},{"location":"testing/#testes-de-modelos","title":"Testes de Modelos","text":"<pre><code># tests/unit/test_models.py\nimport pytest\nfrom decimal import Decimal\nfrom datetime import datetime\n\nfrom car_api.models.cars import Car, Brand, FuelType, TransmissionType\nfrom car_api.models.users import User\n\nclass TestUserModel:\n    def test_user_creation(self):\n        \"\"\"Testar cria\u00e7\u00e3o de usu\u00e1rio.\"\"\"\n        user = User(\n            username=\"testuser\",\n            email=\"test@example.com\",\n            password=\"hashed_password\"\n        )\n\n        assert user.username == \"testuser\"\n        assert user.email == \"test@example.com\"\n        assert user.password == \"hashed_password\"\n\n    def test_user_string_representation(self):\n        \"\"\"Testar representa\u00e7\u00e3o string do usu\u00e1rio.\"\"\"\n        user = User(\n            username=\"testuser\",\n            email=\"test@example.com\",\n            password=\"hashed_password\"\n        )\n\n        assert str(user) == \"testuser\"\n\nclass TestCarModel:\n    def test_car_creation(self):\n        \"\"\"Testar cria\u00e7\u00e3o de carro.\"\"\"\n        car = Car(\n            model=\"Civic\",\n            factory_year=2023,\n            model_year=2023,\n            color=\"Preto\",\n            plate=\"ABC1234\",\n            fuel_type=FuelType.FLEX,\n            transmission=TransmissionType.MANUAL,\n            price=Decimal(\"95000.00\"),\n            brand_id=1,\n            owner_id=1\n        )\n\n        assert car.model == \"Civic\"\n        assert car.factory_year == 2023\n        assert car.fuel_type == FuelType.FLEX\n        assert car.price == Decimal(\"95000.00\")\n\n    def test_fuel_type_enum(self):\n        \"\"\"Testar enum de tipo de combust\u00edvel.\"\"\"\n        assert FuelType.GASOLINE == \"gasoline\"\n        assert FuelType.ELECTRIC == \"electric\"\n        assert FuelType.HYBRID == \"hybrid\"\n\n    def test_transmission_enum(self):\n        \"\"\"Testar enum de transmiss\u00e3o.\"\"\"\n        assert TransmissionType.MANUAL == \"manual\"\n        assert TransmissionType.AUTOMATIC == \"automatic\"\n        assert TransmissionType.CVT == \"cvt\"\n</code></pre>"},{"location":"testing/#testes-de-schemas","title":"Testes de Schemas","text":"<pre><code># tests/unit/test_schemas.py\nimport pytest\nfrom decimal import Decimal\nfrom pydantic import ValidationError\n\nfrom car_api.schemas.cars import CarSchema, CarUpdateSchema\nfrom car_api.schemas.users import UserSchema\nfrom car_api.models.cars import FuelType, TransmissionType\n\nclass TestUserSchema:\n    def test_valid_user_schema(self):\n        \"\"\"Testar schema v\u00e1lido de usu\u00e1rio.\"\"\"\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"password123\"\n        }\n\n        user = UserSchema(**user_data)\n\n        assert user.username == \"testuser\"\n        assert user.email == \"test@example.com\"\n        assert user.password == \"password123\"\n\n    def test_invalid_email(self):\n        \"\"\"Testar email inv\u00e1lido.\"\"\"\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"invalid-email\",\n            \"password\": \"password123\"\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            UserSchema(**user_data)\n\n        assert \"email\" in str(exc_info.value)\n\n    def test_short_password(self):\n        \"\"\"Testar senha muito curta.\"\"\"\n        user_data = {\n            \"username\": \"testuser\",\n            \"email\": \"test@example.com\",\n            \"password\": \"123\"  # Muito curta\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            UserSchema(**user_data)\n\n        assert \"password\" in str(exc_info.value)\n\nclass TestCarSchema:\n    def test_valid_car_schema(self):\n        \"\"\"Testar schema v\u00e1lido de carro.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 2023,\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": \"ABC1234\",\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"brand_id\": 1\n        }\n\n        car = CarSchema(**car_data)\n\n        assert car.model == \"Civic\"\n        assert car.factory_year == 2023\n        assert car.fuel_type == FuelType.FLEX\n        assert car.price == Decimal(\"95000.00\")\n\n    def test_invalid_year(self):\n        \"\"\"Testar ano inv\u00e1lido.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 1800,  # Muito antigo\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": \"ABC1234\",\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"brand_id\": 1\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            CarSchema(**car_data)\n\n        assert \"factory_year\" in str(exc_info.value)\n\n    def test_invalid_plate_format(self):\n        \"\"\"Testar formato inv\u00e1lido de placa.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 2023,\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": \"INVALID\",  # Formato inv\u00e1lido\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"brand_id\": 1\n        }\n\n        with pytest.raises(ValidationError) as exc_info:\n            CarSchema(**car_data)\n\n        assert \"plate\" in str(exc_info.value)\n</code></pre>"},{"location":"testing/#testes-de-integracao","title":"\ud83d\udd17 Testes de Integra\u00e7\u00e3o","text":""},{"location":"testing/#testes-de-autenticacao","title":"Testes de Autentica\u00e7\u00e3o","text":"<pre><code># tests/integration/test_auth.py\nimport pytest\nfrom httpx import AsyncClient\n\nclass TestAuthentication:\n    async def test_login_success(self, client: AsyncClient, sample_user):\n        \"\"\"Testar login bem-sucedido.\"\"\"\n        login_data = {\n            \"email\": sample_user.email,\n            \"password\": \"password123\"\n        }\n\n        response = await client.post(\"/api/v1/auth/token\", json=login_data)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"access_token\" in data\n        assert data[\"token_type\"] == \"bearer\"\n\n    async def test_login_invalid_credentials(self, client: AsyncClient, sample_user):\n        \"\"\"Testar login com credenciais inv\u00e1lidas.\"\"\"\n        login_data = {\n            \"email\": sample_user.email,\n            \"password\": \"wrong_password\"\n        }\n\n        response = await client.post(\"/api/v1/auth/token\", json=login_data)\n\n        assert response.status_code == 401\n        assert \"Incorrect email or password\" in response.json()[\"detail\"]\n\n    async def test_login_nonexistent_user(self, client: AsyncClient):\n        \"\"\"Testar login com usu\u00e1rio inexistente.\"\"\"\n        login_data = {\n            \"email\": \"nonexistent@example.com\",\n            \"password\": \"password123\"\n        }\n\n        response = await client.post(\"/api/v1/auth/token\", json=login_data)\n\n        assert response.status_code == 401\n\n    async def test_refresh_token(self, client: AsyncClient, auth_headers):\n        \"\"\"Testar renova\u00e7\u00e3o de token.\"\"\"\n        response = await client.post(\n            \"/api/v1/auth/refresh_token\",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"access_token\" in data\n        assert data[\"token_type\"] == \"bearer\"\n\n    async def test_access_protected_endpoint_without_token(self, client: AsyncClient):\n        \"\"\"Testar acesso a endpoint protegido sem token.\"\"\"\n        response = await client.get(\"/api/v1/cars/\")\n\n        assert response.status_code == 401\n</code></pre>"},{"location":"testing/#testes-de-api-de-carros","title":"Testes de API de Carros","text":"<pre><code># tests/integration/test_cars.py\nimport pytest\nfrom httpx import AsyncClient\nfrom decimal import Decimal\n\nclass TestCarsAPI:\n    async def test_create_car_success(self, client: AsyncClient, auth_headers, sample_brand):\n        \"\"\"Testar cria\u00e7\u00e3o bem-sucedida de carro.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 2023,\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": \"XYZ9876\",\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"description\": \"Carro seminovo\",\n            \"is_available\": True,\n            \"brand_id\": sample_brand.id\n        }\n\n        response = await client.post(\n            \"/api/v1/cars/\",\n            json=car_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 201\n        data = response.json()\n        assert data[\"model\"] == \"Civic\"\n        assert data[\"plate\"] == \"XYZ9876\"\n        assert data[\"brand\"][\"name\"] == sample_brand.name\n        assert \"owner\" in data\n\n    async def test_create_car_duplicate_plate(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar cria\u00e7\u00e3o com placa duplicada.\"\"\"\n        car_data = {\n            \"model\": \"Civic\",\n            \"factory_year\": 2023,\n            \"model_year\": 2023,\n            \"color\": \"Preto\",\n            \"plate\": sample_car.plate,  # Placa j\u00e1 existe\n            \"fuel_type\": \"flex\",\n            \"transmission\": \"manual\",\n            \"price\": \"95000.00\",\n            \"brand_id\": sample_car.brand_id\n        }\n\n        response = await client.post(\n            \"/api/v1/cars/\",\n            json=car_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 400\n        assert \"Placa j\u00e1 est\u00e1 em uso\" in response.json()[\"detail\"]\n\n    async def test_list_cars(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar listagem de carros.\"\"\"\n        response = await client.get(\"/api/v1/cars/\", headers=auth_headers)\n\n        assert response.status_code == 200\n        data = response.json()\n        assert \"cars\" in data\n        assert len(data[\"cars\"]) == 1\n        assert data[\"cars\"][0][\"id\"] == sample_car.id\n\n    async def test_list_cars_with_filters(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar listagem com filtros.\"\"\"\n        # Filtro por marca\n        response = await client.get(\n            f\"/api/v1/cars/?brand_id={sample_car.brand_id}\",\n            headers=auth_headers\n        )\n        assert response.status_code == 200\n        assert len(response.json()[\"cars\"]) == 1\n\n        # Filtro por combust\u00edvel\n        response = await client.get(\n            f\"/api/v1/cars/?fuel_type={sample_car.fuel_type}\",\n            headers=auth_headers\n        )\n        assert response.status_code == 200\n        assert len(response.json()[\"cars\"]) == 1\n\n        # Filtro por pre\u00e7o\n        response = await client.get(\n            f\"/api/v1/cars/?min_price=50000&amp;max_price=100000\",\n            headers=auth_headers\n        )\n        assert response.status_code == 200\n        assert len(response.json()[\"cars\"]) == 1\n\n    async def test_get_car_success(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar busca bem-sucedida de carro.\"\"\"\n        response = await client.get(\n            f\"/api/v1/cars/{sample_car.id}\",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"id\"] == sample_car.id\n        assert data[\"model\"] == sample_car.model\n\n    async def test_get_car_not_found(self, client: AsyncClient, auth_headers):\n        \"\"\"Testar busca de carro inexistente.\"\"\"\n        response = await client.get(\"/api/v1/cars/999\", headers=auth_headers)\n\n        assert response.status_code == 404\n        assert \"n\u00e3o encontrado\" in response.json()[\"detail\"]\n\n    async def test_update_car_success(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar atualiza\u00e7\u00e3o bem-sucedida de carro.\"\"\"\n        update_data = {\n            \"price\": \"88000.00\",\n            \"description\": \"Pre\u00e7o atualizado\"\n        }\n\n        response = await client.put(\n            f\"/api/v1/cars/{sample_car.id}\",\n            json=update_data,\n            headers=auth_headers\n        )\n\n        assert response.status_code == 200\n        data = response.json()\n        assert data[\"price\"] == \"88000.00\"\n        assert data[\"description\"] == \"Pre\u00e7o atualizado\"\n\n    async def test_delete_car_success(self, client: AsyncClient, auth_headers, sample_car):\n        \"\"\"Testar dele\u00e7\u00e3o bem-sucedida de carro.\"\"\"\n        response = await client.delete(\n            f\"/api/v1/cars/{sample_car.id}\",\n            headers=auth_headers\n        )\n\n        assert response.status_code == 204\n\n        # Verificar que foi deletado\n        response = await client.get(\n            f\"/api/v1/cars/{sample_car.id}\",\n            headers=auth_headers\n        )\n        assert response.status_code == 404\n</code></pre>"},{"location":"testing/#testes-end-to-end","title":"\ud83c\udfaf Testes End-to-End","text":""},{"location":"testing/#jornada-completa-do-usuario","title":"Jornada Completa do Usu\u00e1rio","text":"<pre><code># tests/e2e/test_user_journey.py\nimport pytest\nfrom httpx import AsyncClient\n\nclass TestUserJourney:\n    async def test_complete_user_journey(self, client: AsyncClient):\n        \"\"\"Testar jornada completa do usu\u00e1rio.\"\"\"\n\n        # 1. Registrar usu\u00e1rio\n        user_data = {\n            \"username\": \"newuser\",\n            \"email\": \"newuser@example.com\",\n            \"password\": \"securepassword123\"\n        }\n        response = await client.post(\"/api/v1/users/\", json=user_data)\n        assert response.status_code == 201\n        user_id = response.json()[\"id\"]\n\n        # 2. Fazer login\n        login_data = {\n            \"email\": \"newuser@example.com\",\n            \"password\": \"securepassword123\"\n        }\n        response = await client.post(\"/api/v1/auth/token\", json=login_data)\n        assert response.status_code == 200\n        token = response.json()[\"access_token\"]\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n\n        # 3. Criar marca\n        brand_data = {\n            \"name\": \"Tesla\",\n            \"description\": \"Ve\u00edculos el\u00e9tricos\",\n            \"is_active\": True\n        }\n        response = await client.post(\"/api/v1/brands/\", json=brand_data, headers=headers)\n        assert response.status_code == 201\n        brand_id = response.json()[\"id\"]\n\n        # 4. Criar m\u00faltiplos carros\n        cars = []\n        for i in range(3):\n            car_data = {\n                \"model\": f\"Model {i+1}\",\n                \"factory_year\": 2023,\n                \"model_year\": 2023,\n                \"color\": [\"Branco\", \"Preto\", \"Vermelho\"][i],\n                \"plate\": f\"TSL{i+1}234\",\n                \"fuel_type\": \"electric\",\n                \"transmission\": \"automatic\",\n                \"price\": f\"{150000 + i*10000}.00\",\n                \"description\": f\"Tesla Model {i+1}\",\n                \"is_available\": True,\n                \"brand_id\": brand_id\n            }\n            response = await client.post(\"/api/v1/cars/\", json=car_data, headers=headers)\n            assert response.status_code == 201\n            cars.append(response.json())\n\n        # 5. Listar todos os carros\n        response = await client.get(\"/api/v1/cars/\", headers=headers)\n        assert response.status_code == 200\n        assert len(response.json()[\"cars\"]) == 3\n\n        # 6. Filtrar carros por pre\u00e7o\n        response = await client.get(\n            \"/api/v1/cars/?min_price=160000\",\n            headers=headers\n        )\n        assert response.status_code == 200\n        filtered_cars = response.json()[\"cars\"]\n        assert len(filtered_cars) == 2  # Apenas 2 carros custam mais que 160k\n\n        # 7. Atualizar um carro\n        car_to_update = cars[0]\n        update_data = {\"price\": \"145000.00\", \"is_available\": False}\n        response = await client.put(\n            f\"/api/v1/cars/{car_to_update['id']}\",\n            json=update_data,\n            headers=headers\n        )\n        assert response.status_code == 200\n        assert response.json()[\"price\"] == \"145000.00\"\n        assert response.json()[\"is_available\"] is False\n\n        # 8. Buscar carros dispon\u00edveis\n        response = await client.get(\n            \"/api/v1/cars/?is_available=true\",\n            headers=headers\n        )\n        assert response.status_code == 200\n        available_cars = response.json()[\"cars\"]\n        assert len(available_cars) == 2  # Apenas 2 est\u00e3o dispon\u00edveis\n\n        # 9. Deletar um carro\n        car_to_delete = cars[1]\n        response = await client.delete(\n            f\"/api/v1/cars/{car_to_delete['id']}\",\n            headers=headers\n        )\n        assert response.status_code == 204\n\n        # 10. Verificar que foi deletado\n        response = await client.get(\"/api/v1/cars/\", headers=headers)\n        assert response.status_code == 200\n        remaining_cars = response.json()[\"cars\"]\n        assert len(remaining_cars) == 2\n        assert car_to_delete['id'] not in [car['id'] for car in remaining_cars]\n\n        # 11. Renovar token\n        response = await client.post(\"/api/v1/auth/refresh_token\", headers=headers)\n        assert response.status_code == 200\n        new_token = response.json()[\"access_token\"]\n        assert new_token != token  # Token deve ser diferente\n\n        # 12. Verificar acesso com novo token\n        new_headers = {\"Authorization\": f\"Bearer {new_token}\"}\n        response = await client.get(\"/api/v1/cars/\", headers=new_headers)\n        assert response.status_code == 200\n</code></pre>"},{"location":"testing/#cobertura-de-testes","title":"\ud83d\udcca Cobertura de Testes","text":""},{"location":"testing/#configuracao-de-coverage","title":"Configura\u00e7\u00e3o de Coverage","text":"<pre><code># pyproject.toml\n[tool.coverage.run]\nsource = [\"car_api\"]\nomit = [\n    \"*/tests/*\",\n    \"*/venv/*\",\n    \"*/.venv/*\",\n    \"*/migrations/*\",\n    \"*/__init__.py\"\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"if settings.DEBUG\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\"\n]\n</code></pre>"},{"location":"testing/#executar-testes-com-coverage","title":"Executar Testes com Coverage","text":"<pre><code># Executar todos os testes com coverage\npoetry run pytest --cov=car_api --cov-report=html --cov-report=term-missing\n\n# Coverage m\u00ednima de 90%\npoetry run pytest --cov=car_api --cov-fail-under=90\n\n# Gerar relat\u00f3rio HTML\npoetry run pytest --cov=car_api --cov-report=html\nopen htmlcov/index.html\n\n# Coverage apenas de arquivos modificados\npoetry run pytest --cov=car_api --cov-report=term-missing tests/integration/test_cars.py\n</code></pre>"},{"location":"testing/#relatorio-de-coverage","title":"Relat\u00f3rio de Coverage","text":"<pre><code>Name                          Stmts   Miss  Cover   Missing\n-----------------------------------------------------------\ncar_api/__init__.py               0      0   100%\ncar_api/app.py                   15      0   100%\ncar_api/core/database.py         12      1    92%   23\ncar_api/core/security.py         45      2    96%   67-68\ncar_api/core/settings.py          8      0   100%\ncar_api/models/base.py            3      0   100%\ncar_api/models/cars.py           35      0   100%\ncar_api/models/users.py          12      0   100%\ncar_api/routers/auth.py          25      1    96%   47\ncar_api/routers/brands.py        85      3    96%   156-158\ncar_api/routers/cars.py         125      5    96%   234-238\ncar_api/routers/users.py         95      4    96%   167-170\ncar_api/schemas/auth.py           8      0   100%\ncar_api/schemas/brands.py        18      0   100%\ncar_api/schemas/cars.py          32      0   100%\ncar_api/schemas/users.py         22      0   100%\n-----------------------------------------------------------\nTOTAL                           540     16    97%\n</code></pre>"},{"location":"testing/#automacao-de-testes","title":"\ud83d\ude80 Automa\u00e7\u00e3o de Testes","text":""},{"location":"testing/#github-actions-cicd","title":"GitHub Actions CI/CD","text":"<pre><code># .github/workflows/tests.yml\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.13]\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_car_api\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install Poetry\n      uses: snok/install-poetry@v1\n      with:\n        version: latest\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n\n    - name: Install project\n      run: poetry install --no-interaction\n\n    - name: Run linting\n      run: |\n        poetry run ruff check\n        poetry run ruff format --check\n\n    - name: Run tests\n      run: |\n        poetry run pytest --cov=car_api --cov-report=xml --cov-fail-under=90\n      env:\n        DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/test_car_api\n        JWT_SECRET_KEY: test-secret-key-for-ci\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n</code></pre>"},{"location":"testing/#pre-commit-hooks-para-testes","title":"Pre-commit Hooks para Testes","text":"<pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: tests\n        name: Run tests\n        entry: poetry run pytest tests/unit tests/integration --maxfail=1\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"testing/#testes-de-performance","title":"\ud83c\udfaf Testes de Performance","text":""},{"location":"testing/#teste-de-carga","title":"Teste de Carga","text":"<pre><code># tests/performance/test_load.py\nimport asyncio\nimport time\nfrom httpx import AsyncClient\n\nclass TestPerformance:\n    async def test_concurrent_car_creation(self, client: AsyncClient, auth_headers, sample_brand):\n        \"\"\"Testar cria\u00e7\u00e3o concorrente de carros.\"\"\"\n\n        async def create_car(i):\n            car_data = {\n                \"model\": f\"Civic {i}\",\n                \"factory_year\": 2023,\n                \"model_year\": 2023,\n                \"color\": \"Preto\",\n                \"plate\": f\"ABC{i:04d}\",\n                \"fuel_type\": \"flex\",\n                \"transmission\": \"manual\",\n                \"price\": \"95000.00\",\n                \"brand_id\": sample_brand.id\n            }\n\n            start_time = time.time()\n            response = await client.post(\n                \"/api/v1/cars/\",\n                json=car_data,\n                headers=auth_headers\n            )\n            end_time = time.time()\n\n            return {\n                \"status_code\": response.status_code,\n                \"duration\": end_time - start_time\n            }\n\n        # Criar 10 carros concorrentemente\n        tasks = [create_car(i) for i in range(10)]\n        results = await asyncio.gather(*tasks)\n\n        # Verificar resultados\n        success_count = sum(1 for r in results if r[\"status_code\"] == 201)\n        avg_duration = sum(r[\"duration\"] for r in results) / len(results)\n\n        assert success_count == 10  # Todos devem ter sucesso\n        assert avg_duration &lt; 1.0   # Menos de 1 segundo por request\n\n        print(f\"Created {success_count} cars in average {avg_duration:.3f}s each\")\n</code></pre>"},{"location":"testing/#comandos-de-teste","title":"\ud83d\udccb Comandos de Teste","text":""},{"location":"testing/#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<pre><code># Executar todos os testes\npoetry run pytest\n\n# Executar testes espec\u00edficos\npoetry run pytest tests/unit/\npoetry run pytest tests/integration/test_cars.py\npoetry run pytest tests/e2e/ -v\n\n# Executar com marcadores\npoetry run pytest -m unit\npoetry run pytest -m integration\npoetry run pytest -m \"not slow\"\n\n# Executar com coverage\npoetry run pytest --cov=car_api\npoetry run pytest --cov=car_api --cov-report=html\n\n# Executar testes que falharam na \u00faltima execu\u00e7\u00e3o\npoetry run pytest --lf\n\n# Executar em modo watch\npoetry run ptw --now\n</code></pre>"},{"location":"testing/#comandos-avancados","title":"Comandos Avan\u00e7ados","text":"<pre><code># Executar com profiling\npoetry run pytest --profile\n\n# Executar com timeout\npoetry run pytest --timeout=300\n\n# Executar em paralelo\npoetry run pytest -n auto\n\n# Verbose com dura\u00e7\u00e3o\npoetry run pytest -v --durations=10\n\n# Gerar relat\u00f3rio JUnit XML\npoetry run pytest --junit-xml=results.xml\n\n# Executar apenas testes modificados\npoetry run pytest --testmon\n</code></pre>"},{"location":"testing/#proximos-passos","title":"\ud83d\ude80 Pr\u00f3ximos Passos","text":"<p>Para melhorar ainda mais os testes:</p> <ol> <li>\ud83d\ude80 Deploy - Pipeline de CI/CD</li> <li>\ud83d\udcca Implementar testes de mutation testing</li> <li>\ud83c\udfaf Adicionar testes de propriedade (Hypothesis)</li> <li>\ud83d\udcf1 Testes de API com Postman/Newman</li> <li>\ud83d\udd0d Testes de seguran\u00e7a automatizados</li> <li>\ud83d\udcc8 Benchmarks de performance automatizados</li> </ol>"}]}